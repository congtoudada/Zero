id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
items:
- id: ZeroFramework
  commentId: N:ZeroFramework
  language: CSharp
  name:
    CSharp: ZeroFramework
    VB: ZeroFramework
  nameWithType:
    CSharp: ZeroFramework
    VB: ZeroFramework
  qualifiedName:
    CSharp: ZeroFramework
    VB: ZeroFramework
  type: Namespace
  assemblies:
  - cs.temp.dll
  items:
  - id: ZeroFramework.ZeroArchitecture
    commentId: T:ZeroFramework.ZeroArchitecture
    language: CSharp
    name:
      CSharp: ZeroArchitecture
      VB: ZeroArchitecture
    nameWithType:
      CSharp: ZeroArchitecture
      VB: ZeroArchitecture
    qualifiedName:
      CSharp: ZeroFramework.ZeroArchitecture
      VB: ZeroFramework.ZeroArchitecture
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ZeroArchitecture
      path: ''
      startLine: 531
    summary: "\nZeroArchitecture类\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ZeroArchitecture : Architecture<ZeroArchitecture>, IArchitecture'
        VB: Public Class ZeroArchitecture Inherits Architecture(Of ZeroArchitecture) Implements IArchitecture
    inheritance:
    - System.Object
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    implements:
    - ZeroFramework.IArchitecture
    inheritedMembers:
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Initialized
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Interface
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Deinit
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.OnDeinit
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1({TSystem})
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1({TModel})
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1({TUtility})
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterSystem``1
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterModel``1
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterUtility``1
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetSystem``1
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetModel``1
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetUtility``1
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(ZeroFramework.ICommand{{TResult}})
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1({TCommand})
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{{TResult}})
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendQuery``1(ZeroFramework.IQuery{{TResult}})
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.DoQuery``1(ZeroFramework.IQuery{{TResult}})
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1({TEvent})
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterEvent``1(Action{{TEvent}})
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1(Action{{TEvent}})
    - ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1
    items:
    - id: ZeroFramework.ZeroArchitecture.Init
      commentId: M:ZeroFramework.ZeroArchitecture.Init
      language: CSharp
      name:
        CSharp: Init()
        VB: Init()
      nameWithType:
        CSharp: ZeroArchitecture.Init()
        VB: ZeroArchitecture.Init()
      qualifiedName:
        CSharp: ZeroFramework.ZeroArchitecture.Init()
        VB: ZeroFramework.ZeroArchitecture.Init()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Init
        path: ''
        startLine: 536
      summary: "\n初始化\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Init()
          VB: Protected Overrides Sub Init()
      overload: ZeroFramework.ZeroArchitecture.Init*
      overridden: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Init
  - id: ZeroFramework.IZeroController
    commentId: T:ZeroFramework.IZeroController
    language: CSharp
    name:
      CSharp: IZeroController
      VB: IZeroController
    nameWithType:
      CSharp: IZeroController
      VB: IZeroController
    qualifiedName:
      CSharp: ZeroFramework.IZeroController
      VB: ZeroFramework.IZeroController
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IZeroController
      path: ''
      startLine: 559
    syntax:
      content:
        CSharp: 'public interface IZeroController : IController, ICanSendCommand, ICanGetSystem, ICanGetModel, ICanRegisterEvent, ICanSendQuery, ICanGetUtility, IBelongToArchitecture'
        VB: Public Interface IZeroController Inherits IController, ICanSendCommand, ICanGetSystem, ICanGetModel, ICanRegisterEvent, ICanSendQuery, ICanGetUtility, IBelongToArchitecture
    inheritedMembers:
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    items: []
  - id: ZeroFramework.ZeroControllerExtension
    commentId: T:ZeroFramework.ZeroControllerExtension
    language: CSharp
    name:
      CSharp: ZeroControllerExtension
      VB: ZeroControllerExtension
    nameWithType:
      CSharp: ZeroControllerExtension
      VB: ZeroControllerExtension
    qualifiedName:
      CSharp: ZeroFramework.ZeroControllerExtension
      VB: ZeroFramework.ZeroControllerExtension
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ZeroControllerExtension
      path: ''
      startLine: 564
    syntax:
      content:
        CSharp: public static class ZeroControllerExtension
        VB: Public Module ZeroControllerExtension
    inheritance:
    - System.Object
    items:
    - isExtensionMethod: true
      id: ZeroFramework.ZeroControllerExtension.GetZeroToolKits(ZeroFramework.IZeroController)
      commentId: M:ZeroFramework.ZeroControllerExtension.GetZeroToolKits(ZeroFramework.IZeroController)
      language: CSharp
      name:
        CSharp: GetZeroToolKits(IZeroController)
        VB: GetZeroToolKits(IZeroController)
      nameWithType:
        CSharp: ZeroControllerExtension.GetZeroToolKits(IZeroController)
        VB: ZeroControllerExtension.GetZeroToolKits(IZeroController)
      qualifiedName:
        CSharp: ZeroFramework.ZeroControllerExtension.GetZeroToolKits(ZeroFramework.IZeroController)
        VB: ZeroFramework.ZeroControllerExtension.GetZeroToolKits(ZeroFramework.IZeroController)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetZeroToolKits
        path: ''
        startLine: 571
      summary: "\n获得内置 ZeroToolKits工具包\n"
      example: []
      syntax:
        content:
          CSharp: public static ZeroToolKits GetZeroToolKits(this IZeroController self)
          VB: Public Shared Function GetZeroToolKits(self As IZeroController) As ZeroToolKits
        parameters:
        - id: self
          type: ZeroFramework.IZeroController
          description: ''
        return:
          type: Global.ZeroToolKits
          description: ''
      overload: ZeroFramework.ZeroControllerExtension.GetZeroToolKits*
  - id: ZeroFramework.ZeroMonoController`1
    commentId: T:ZeroFramework.ZeroMonoController`1
    language: CSharp
    name:
      CSharp: ZeroMonoController<T>
      VB: ZeroMonoController(Of T)
    nameWithType:
      CSharp: ZeroMonoController<T>
      VB: ZeroMonoController(Of T)
    qualifiedName:
      CSharp: ZeroFramework.ZeroMonoController<T>
      VB: ZeroFramework.ZeroMonoController(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ZeroMonoController
      path: ''
      startLine: 577
    syntax:
      content:
        CSharp: 'public class ZeroMonoController<T> : MonoBehaviour, IZeroController, IController, ICanSendCommand, ICanGetSystem, ICanGetModel, ICanRegisterEvent, ICanSendQuery, ICanGetUtility, IBelongToArchitecture where T : ZeroMonoController<T>'
        VB: Public Class ZeroMonoController(Of T As ZeroMonoController(Of T)) Inherits MonoBehaviour Implements IZeroController, IController, ICanSendCommand, ICanGetSystem, ICanGetModel, ICanRegisterEvent, ICanSendQuery, ICanGetUtility, IBelongToArchitecture
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.IZeroController
    - ZeroFramework.IController
    - ZeroFramework.ICanSendCommand
    - ZeroFramework.ICanGetSystem
    - ZeroFramework.ICanGetModel
    - ZeroFramework.ICanRegisterEvent
    - ZeroFramework.ICanSendQuery
    - ZeroFramework.ICanGetUtility
    - ZeroFramework.IBelongToArchitecture
    items:
    - id: ZeroFramework.ZeroMonoController`1.logger
      commentId: P:ZeroFramework.ZeroMonoController`1.logger
      language: CSharp
      name:
        CSharp: logger
        VB: logger
      nameWithType:
        CSharp: ZeroMonoController<T>.logger
        VB: ZeroMonoController(Of T).logger
      qualifiedName:
        CSharp: ZeroFramework.ZeroMonoController<T>.logger
        VB: ZeroFramework.ZeroMonoController(Of T).logger
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: logger
        path: ''
        startLine: 579
      syntax:
        content:
          CSharp: public ILogger logger { get; }
          VB: Public ReadOnly Property logger As ILogger
        parameters: []
        return:
          type: Global.ILogger
      overload: ZeroFramework.ZeroMonoController`1.logger*
    - id: ZeroFramework.ZeroMonoController`1.GetArchitecture
      commentId: M:ZeroFramework.ZeroMonoController`1.GetArchitecture
      language: CSharp
      name:
        CSharp: GetArchitecture()
        VB: GetArchitecture()
      nameWithType:
        CSharp: ZeroMonoController<T>.GetArchitecture()
        VB: ZeroMonoController(Of T).GetArchitecture()
      qualifiedName:
        CSharp: ZeroFramework.ZeroMonoController<T>.GetArchitecture()
        VB: ZeroFramework.ZeroMonoController(Of T).GetArchitecture()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetArchitecture
        path: ''
        startLine: 593
      syntax:
        content:
          CSharp: public IArchitecture GetArchitecture()
          VB: Public Function GetArchitecture() As IArchitecture
        return:
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.ZeroMonoController`1.GetArchitecture*
      implements:
      - ZeroFramework.IBelongToArchitecture.GetArchitecture
  - id: ZeroFramework.ZeroController`1
    commentId: T:ZeroFramework.ZeroController`1
    language: CSharp
    name:
      CSharp: ZeroController<T>
      VB: ZeroController(Of T)
    nameWithType:
      CSharp: ZeroController<T>
      VB: ZeroController(Of T)
    qualifiedName:
      CSharp: ZeroFramework.ZeroController<T>
      VB: ZeroFramework.ZeroController(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ZeroController
      path: ''
      startLine: 599
    syntax:
      content:
        CSharp: 'public class ZeroController<T> : IZeroController, IController, ICanSendCommand, ICanGetSystem, ICanGetModel, ICanRegisterEvent, ICanSendQuery, ICanGetUtility, IBelongToArchitecture where T : ZeroController<T>'
        VB: Public Class ZeroController(Of T As ZeroController(Of T)) Implements IZeroController, IController, ICanSendCommand, ICanGetSystem, ICanGetModel, ICanRegisterEvent, ICanSendQuery, ICanGetUtility, IBelongToArchitecture
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.IZeroController
    - ZeroFramework.IController
    - ZeroFramework.ICanSendCommand
    - ZeroFramework.ICanGetSystem
    - ZeroFramework.ICanGetModel
    - ZeroFramework.ICanRegisterEvent
    - ZeroFramework.ICanSendQuery
    - ZeroFramework.ICanGetUtility
    - ZeroFramework.IBelongToArchitecture
    items:
    - id: ZeroFramework.ZeroController`1.logger
      commentId: P:ZeroFramework.ZeroController`1.logger
      language: CSharp
      name:
        CSharp: logger
        VB: logger
      nameWithType:
        CSharp: ZeroController<T>.logger
        VB: ZeroController(Of T).logger
      qualifiedName:
        CSharp: ZeroFramework.ZeroController<T>.logger
        VB: ZeroFramework.ZeroController(Of T).logger
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: logger
        path: ''
        startLine: 601
      syntax:
        content:
          CSharp: public ILogger logger { get; }
          VB: Public ReadOnly Property logger As ILogger
        parameters: []
        return:
          type: Global.ILogger
      overload: ZeroFramework.ZeroController`1.logger*
    - id: ZeroFramework.ZeroController`1.GetArchitecture
      commentId: M:ZeroFramework.ZeroController`1.GetArchitecture
      language: CSharp
      name:
        CSharp: GetArchitecture()
        VB: GetArchitecture()
      nameWithType:
        CSharp: ZeroController<T>.GetArchitecture()
        VB: ZeroController(Of T).GetArchitecture()
      qualifiedName:
        CSharp: ZeroFramework.ZeroController<T>.GetArchitecture()
        VB: ZeroFramework.ZeroController(Of T).GetArchitecture()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetArchitecture
        path: ''
        startLine: 615
      syntax:
        content:
          CSharp: public IArchitecture GetArchitecture()
          VB: Public Function GetArchitecture() As IArchitecture
        return:
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.ZeroController`1.GetArchitecture*
      implements:
      - ZeroFramework.IBelongToArchitecture.GetArchitecture
  - id: ZeroFramework.IZeroFactory
    commentId: T:ZeroFramework.IZeroFactory
    language: CSharp
    name:
      CSharp: IZeroFactory
      VB: IZeroFactory
    nameWithType:
      CSharp: IZeroFactory
      VB: IZeroFactory
    qualifiedName:
      CSharp: ZeroFramework.IZeroFactory
      VB: ZeroFramework.IZeroFactory
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IZeroFactory
      path: ''
      startLine: 656
    syntax:
      content:
        CSharp: public interface IZeroFactory
        VB: Public Interface IZeroFactory
    items:
    - id: ZeroFramework.IZeroFactory.Create
      commentId: M:ZeroFramework.IZeroFactory.Create
      language: CSharp
      name:
        CSharp: Create()
        VB: Create()
      nameWithType:
        CSharp: IZeroFactory.Create()
        VB: IZeroFactory.Create()
      qualifiedName:
        CSharp: ZeroFramework.IZeroFactory.Create()
        VB: ZeroFramework.IZeroFactory.Create()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Create
        path: ''
        startLine: 658
      syntax:
        content:
          CSharp: object Create()
          VB: Function Create() As Object
        return:
          type: System.Object
      overload: ZeroFramework.IZeroFactory.Create*
  - id: ZeroFramework.IArchitecture
    commentId: T:ZeroFramework.IArchitecture
    language: CSharp
    name:
      CSharp: IArchitecture
      VB: IArchitecture
    nameWithType:
      CSharp: IArchitecture
      VB: IArchitecture
    qualifiedName:
      CSharp: ZeroFramework.IArchitecture
      VB: ZeroFramework.IArchitecture
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IArchitecture
      path: ''
      startLine: 664
    summary: "\n架构接口\n"
    example: []
    syntax:
      content:
        CSharp: public interface IArchitecture
        VB: Public Interface IArchitecture
    items:
    - id: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
      commentId: M:ZeroFramework.IArchitecture.RegisterSystem``1(``0)
      language: CSharp
      name:
        CSharp: RegisterSystem<T>(T)
        VB: RegisterSystem(Of T)(T)
      nameWithType:
        CSharp: IArchitecture.RegisterSystem<T>(T)
        VB: IArchitecture.RegisterSystem(Of T)(T)
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.RegisterSystem<T>(T)
        VB: ZeroFramework.IArchitecture.RegisterSystem(Of T)(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterSystem
        path: ''
        startLine: 667
      syntax:
        content:
          CSharp: 'T RegisterSystem<T>(T system) where T : class, ISystem'
          VB: Function RegisterSystem(Of T As {Class, ISystem})(system As T) As T
        parameters:
        - id: system
          type: '{T}'
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.IArchitecture.RegisterSystem*
    - id: ZeroFramework.IArchitecture.RegisterSystem``1(ZeroFramework.IZeroFactory)
      commentId: M:ZeroFramework.IArchitecture.RegisterSystem``1(ZeroFramework.IZeroFactory)
      language: CSharp
      name:
        CSharp: RegisterSystem<T>(IZeroFactory)
        VB: RegisterSystem(Of T)(IZeroFactory)
      nameWithType:
        CSharp: IArchitecture.RegisterSystem<T>(IZeroFactory)
        VB: IArchitecture.RegisterSystem(Of T)(IZeroFactory)
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.RegisterSystem<T>(ZeroFramework.IZeroFactory)
        VB: ZeroFramework.IArchitecture.RegisterSystem(Of T)(ZeroFramework.IZeroFactory)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterSystem
        path: ''
        startLine: 668
      syntax:
        content:
          CSharp: 'void RegisterSystem<T>(IZeroFactory systemFactory) where T : class, ISystem'
          VB: Sub RegisterSystem(Of T As {Class, ISystem})(systemFactory As IZeroFactory)
        parameters:
        - id: systemFactory
          type: ZeroFramework.IZeroFactory
        typeParameters:
        - id: T
      overload: ZeroFramework.IArchitecture.RegisterSystem*
    - id: ZeroFramework.IArchitecture.RegisterModel``1(``0)
      commentId: M:ZeroFramework.IArchitecture.RegisterModel``1(``0)
      language: CSharp
      name:
        CSharp: RegisterModel<T>(T)
        VB: RegisterModel(Of T)(T)
      nameWithType:
        CSharp: IArchitecture.RegisterModel<T>(T)
        VB: IArchitecture.RegisterModel(Of T)(T)
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.RegisterModel<T>(T)
        VB: ZeroFramework.IArchitecture.RegisterModel(Of T)(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterModel
        path: ''
        startLine: 669
      syntax:
        content:
          CSharp: 'T RegisterModel<T>(T model) where T : class, IModel'
          VB: Function RegisterModel(Of T As {Class, IModel})(model As T) As T
        parameters:
        - id: model
          type: '{T}'
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.IArchitecture.RegisterModel*
    - id: ZeroFramework.IArchitecture.RegisterModel``1(ZeroFramework.IZeroFactory)
      commentId: M:ZeroFramework.IArchitecture.RegisterModel``1(ZeroFramework.IZeroFactory)
      language: CSharp
      name:
        CSharp: RegisterModel<T>(IZeroFactory)
        VB: RegisterModel(Of T)(IZeroFactory)
      nameWithType:
        CSharp: IArchitecture.RegisterModel<T>(IZeroFactory)
        VB: IArchitecture.RegisterModel(Of T)(IZeroFactory)
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.RegisterModel<T>(ZeroFramework.IZeroFactory)
        VB: ZeroFramework.IArchitecture.RegisterModel(Of T)(ZeroFramework.IZeroFactory)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterModel
        path: ''
        startLine: 670
      syntax:
        content:
          CSharp: 'void RegisterModel<T>(IZeroFactory modelFactory) where T : class, IModel'
          VB: Sub RegisterModel(Of T As {Class, IModel})(modelFactory As IZeroFactory)
        parameters:
        - id: modelFactory
          type: ZeroFramework.IZeroFactory
        typeParameters:
        - id: T
      overload: ZeroFramework.IArchitecture.RegisterModel*
    - id: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
      commentId: M:ZeroFramework.IArchitecture.RegisterUtility``1(``0)
      language: CSharp
      name:
        CSharp: RegisterUtility<T>(T)
        VB: RegisterUtility(Of T)(T)
      nameWithType:
        CSharp: IArchitecture.RegisterUtility<T>(T)
        VB: IArchitecture.RegisterUtility(Of T)(T)
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.RegisterUtility<T>(T)
        VB: ZeroFramework.IArchitecture.RegisterUtility(Of T)(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterUtility
        path: ''
        startLine: 671
      syntax:
        content:
          CSharp: 'T RegisterUtility<T>(T utility) where T : class, IUtility'
          VB: Function RegisterUtility(Of T As {Class, IUtility})(utility As T) As T
        parameters:
        - id: utility
          type: '{T}'
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.IArchitecture.RegisterUtility*
    - id: ZeroFramework.IArchitecture.RegisterUtility``1(ZeroFramework.IZeroFactory)
      commentId: M:ZeroFramework.IArchitecture.RegisterUtility``1(ZeroFramework.IZeroFactory)
      language: CSharp
      name:
        CSharp: RegisterUtility<T>(IZeroFactory)
        VB: RegisterUtility(Of T)(IZeroFactory)
      nameWithType:
        CSharp: IArchitecture.RegisterUtility<T>(IZeroFactory)
        VB: IArchitecture.RegisterUtility(Of T)(IZeroFactory)
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.RegisterUtility<T>(ZeroFramework.IZeroFactory)
        VB: ZeroFramework.IArchitecture.RegisterUtility(Of T)(ZeroFramework.IZeroFactory)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterUtility
        path: ''
        startLine: 672
      syntax:
        content:
          CSharp: 'void RegisterUtility<T>(IZeroFactory utilityFactory) where T : class, IUtility'
          VB: Sub RegisterUtility(Of T As {Class, IUtility})(utilityFactory As IZeroFactory)
        parameters:
        - id: utilityFactory
          type: ZeroFramework.IZeroFactory
        typeParameters:
        - id: T
      overload: ZeroFramework.IArchitecture.RegisterUtility*
    - id: ZeroFramework.IArchitecture.UnRegisterSystem``1
      commentId: M:ZeroFramework.IArchitecture.UnRegisterSystem``1
      language: CSharp
      name:
        CSharp: UnRegisterSystem<T>()
        VB: UnRegisterSystem(Of T)()
      nameWithType:
        CSharp: IArchitecture.UnRegisterSystem<T>()
        VB: IArchitecture.UnRegisterSystem(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.UnRegisterSystem<T>()
        VB: ZeroFramework.IArchitecture.UnRegisterSystem(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterSystem
        path: ''
        startLine: 675
      syntax:
        content:
          CSharp: 'void UnRegisterSystem<T>() where T : ISystem'
          VB: Sub UnRegisterSystem(Of T As ISystem)()
        typeParameters:
        - id: T
      overload: ZeroFramework.IArchitecture.UnRegisterSystem*
    - id: ZeroFramework.IArchitecture.UnRegisterModel``1
      commentId: M:ZeroFramework.IArchitecture.UnRegisterModel``1
      language: CSharp
      name:
        CSharp: UnRegisterModel<T>()
        VB: UnRegisterModel(Of T)()
      nameWithType:
        CSharp: IArchitecture.UnRegisterModel<T>()
        VB: IArchitecture.UnRegisterModel(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.UnRegisterModel<T>()
        VB: ZeroFramework.IArchitecture.UnRegisterModel(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterModel
        path: ''
        startLine: 676
      syntax:
        content:
          CSharp: 'void UnRegisterModel<T>() where T : IModel'
          VB: Sub UnRegisterModel(Of T As IModel)()
        typeParameters:
        - id: T
      overload: ZeroFramework.IArchitecture.UnRegisterModel*
    - id: ZeroFramework.IArchitecture.UnRegisterUtility``1
      commentId: M:ZeroFramework.IArchitecture.UnRegisterUtility``1
      language: CSharp
      name:
        CSharp: UnRegisterUtility<T>()
        VB: UnRegisterUtility(Of T)()
      nameWithType:
        CSharp: IArchitecture.UnRegisterUtility<T>()
        VB: IArchitecture.UnRegisterUtility(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.UnRegisterUtility<T>()
        VB: ZeroFramework.IArchitecture.UnRegisterUtility(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterUtility
        path: ''
        startLine: 677
      syntax:
        content:
          CSharp: 'void UnRegisterUtility<T>() where T : IUtility'
          VB: Sub UnRegisterUtility(Of T As IUtility)()
        typeParameters:
        - id: T
      overload: ZeroFramework.IArchitecture.UnRegisterUtility*
    - id: ZeroFramework.IArchitecture.GetSystem``1
      commentId: M:ZeroFramework.IArchitecture.GetSystem``1
      language: CSharp
      name:
        CSharp: GetSystem<T>()
        VB: GetSystem(Of T)()
      nameWithType:
        CSharp: IArchitecture.GetSystem<T>()
        VB: IArchitecture.GetSystem(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.GetSystem<T>()
        VB: ZeroFramework.IArchitecture.GetSystem(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetSystem
        path: ''
        startLine: 680
      syntax:
        content:
          CSharp: 'T GetSystem<T>() where T : class, ISystem'
          VB: Function GetSystem(Of T As {Class, ISystem})() As T
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.IArchitecture.GetSystem*
    - id: ZeroFramework.IArchitecture.GetModel``1
      commentId: M:ZeroFramework.IArchitecture.GetModel``1
      language: CSharp
      name:
        CSharp: GetModel<T>()
        VB: GetModel(Of T)()
      nameWithType:
        CSharp: IArchitecture.GetModel<T>()
        VB: IArchitecture.GetModel(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.GetModel<T>()
        VB: ZeroFramework.IArchitecture.GetModel(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetModel
        path: ''
        startLine: 681
      syntax:
        content:
          CSharp: 'T GetModel<T>() where T : class, IModel'
          VB: Function GetModel(Of T As {Class, IModel})() As T
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.IArchitecture.GetModel*
    - id: ZeroFramework.IArchitecture.GetUtility``1
      commentId: M:ZeroFramework.IArchitecture.GetUtility``1
      language: CSharp
      name:
        CSharp: GetUtility<T>()
        VB: GetUtility(Of T)()
      nameWithType:
        CSharp: IArchitecture.GetUtility<T>()
        VB: IArchitecture.GetUtility(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.GetUtility<T>()
        VB: ZeroFramework.IArchitecture.GetUtility(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetUtility
        path: ''
        startLine: 682
      syntax:
        content:
          CSharp: 'T GetUtility<T>() where T : class, IUtility'
          VB: Function GetUtility(Of T As {Class, IUtility})() As T
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.IArchitecture.GetUtility*
    - id: ZeroFramework.IArchitecture.SendCommand``1(``0)
      commentId: M:ZeroFramework.IArchitecture.SendCommand``1(``0)
      language: CSharp
      name:
        CSharp: SendCommand<T>(T)
        VB: SendCommand(Of T)(T)
      nameWithType:
        CSharp: IArchitecture.SendCommand<T>(T)
        VB: IArchitecture.SendCommand(Of T)(T)
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.SendCommand<T>(T)
        VB: ZeroFramework.IArchitecture.SendCommand(Of T)(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendCommand
        path: ''
        startLine: 685
      syntax:
        content:
          CSharp: 'void SendCommand<T>(T command) where T : ICommand'
          VB: Sub SendCommand(Of T As ICommand)(command As T)
        parameters:
        - id: command
          type: '{T}'
        typeParameters:
        - id: T
      overload: ZeroFramework.IArchitecture.SendCommand*
    - id: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
      commentId: M:ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
      language: CSharp
      name:
        CSharp: SendCommand<TResult>(ICommand<TResult>)
        VB: SendCommand(Of TResult)(ICommand(Of TResult))
      nameWithType:
        CSharp: IArchitecture.SendCommand<TResult>(ICommand<TResult>)
        VB: IArchitecture.SendCommand(Of TResult)(ICommand(Of TResult))
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.SendCommand<TResult>(ZeroFramework.ICommand<TResult>)
        VB: ZeroFramework.IArchitecture.SendCommand(Of TResult)(ZeroFramework.ICommand(Of TResult))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendCommand
        path: ''
        startLine: 686
      syntax:
        content:
          CSharp: TResult SendCommand<TResult>(ICommand<TResult> command)
          VB: Function SendCommand(Of TResult)(command As ICommand(Of TResult)) As TResult
        parameters:
        - id: command
          type: ZeroFramework.ICommand{{TResult}}
        typeParameters:
        - id: TResult
        return:
          type: '{TResult}'
      overload: ZeroFramework.IArchitecture.SendCommand*
    - id: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
      commentId: M:ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
      language: CSharp
      name:
        CSharp: SendQuery<TResult>(IQuery<TResult>)
        VB: SendQuery(Of TResult)(IQuery(Of TResult))
      nameWithType:
        CSharp: IArchitecture.SendQuery<TResult>(IQuery<TResult>)
        VB: IArchitecture.SendQuery(Of TResult)(IQuery(Of TResult))
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.SendQuery<TResult>(ZeroFramework.IQuery<TResult>)
        VB: ZeroFramework.IArchitecture.SendQuery(Of TResult)(ZeroFramework.IQuery(Of TResult))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendQuery
        path: ''
        startLine: 689
      syntax:
        content:
          CSharp: TResult SendQuery<TResult>(IQuery<TResult> query)
          VB: Function SendQuery(Of TResult)(query As IQuery(Of TResult)) As TResult
        parameters:
        - id: query
          type: ZeroFramework.IQuery{{TResult}}
        typeParameters:
        - id: TResult
        return:
          type: '{TResult}'
      overload: ZeroFramework.IArchitecture.SendQuery*
    - id: ZeroFramework.IArchitecture.SendEvent``1
      commentId: M:ZeroFramework.IArchitecture.SendEvent``1
      language: CSharp
      name:
        CSharp: SendEvent<T>()
        VB: SendEvent(Of T)()
      nameWithType:
        CSharp: IArchitecture.SendEvent<T>()
        VB: IArchitecture.SendEvent(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.SendEvent<T>()
        VB: ZeroFramework.IArchitecture.SendEvent(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendEvent
        path: ''
        startLine: 692
      syntax:
        content:
          CSharp: 'void SendEvent<T>() where T : new()'
          VB: Sub SendEvent(Of T As New)()
        typeParameters:
        - id: T
      overload: ZeroFramework.IArchitecture.SendEvent*
    - id: ZeroFramework.IArchitecture.SendEvent``1(``0)
      commentId: M:ZeroFramework.IArchitecture.SendEvent``1(``0)
      language: CSharp
      name:
        CSharp: SendEvent<T>(T)
        VB: SendEvent(Of T)(T)
      nameWithType:
        CSharp: IArchitecture.SendEvent<T>(T)
        VB: IArchitecture.SendEvent(Of T)(T)
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.SendEvent<T>(T)
        VB: ZeroFramework.IArchitecture.SendEvent(Of T)(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendEvent
        path: ''
        startLine: 693
      syntax:
        content:
          CSharp: void SendEvent<T>(T e)
          VB: Sub SendEvent(Of T)(e As T)
        parameters:
        - id: e
          type: '{T}'
        typeParameters:
        - id: T
      overload: ZeroFramework.IArchitecture.SendEvent*
    - id: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
      commentId: M:ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
      language: CSharp
      name:
        CSharp: RegisterEvent<T>(Action<T>)
        VB: RegisterEvent(Of T)(Action(Of T))
      nameWithType:
        CSharp: IArchitecture.RegisterEvent<T>(Action<T>)
        VB: IArchitecture.RegisterEvent(Of T)(Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.RegisterEvent<T>(Action<T>)
        VB: ZeroFramework.IArchitecture.RegisterEvent(Of T)(Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterEvent
        path: ''
        startLine: 695
      syntax:
        content:
          CSharp: IUnRegister RegisterEvent<T>(Action<T> onEvent)
          VB: Function RegisterEvent(Of T)(onEvent As Action(Of T)) As IUnRegister
        parameters:
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.IArchitecture.RegisterEvent*
    - id: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
      commentId: M:ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
      language: CSharp
      name:
        CSharp: UnRegisterEvent<T>(Action<T>)
        VB: UnRegisterEvent(Of T)(Action(Of T))
      nameWithType:
        CSharp: IArchitecture.UnRegisterEvent<T>(Action<T>)
        VB: IArchitecture.UnRegisterEvent(Of T)(Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.UnRegisterEvent<T>(Action<T>)
        VB: ZeroFramework.IArchitecture.UnRegisterEvent(Of T)(Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterEvent
        path: ''
        startLine: 696
      syntax:
        content:
          CSharp: void UnRegisterEvent<T>(Action<T> onEvent)
          VB: Sub UnRegisterEvent(Of T)(onEvent As Action(Of T))
        parameters:
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
      overload: ZeroFramework.IArchitecture.UnRegisterEvent*
    - id: ZeroFramework.IArchitecture.UnRegisterEvent``1
      commentId: M:ZeroFramework.IArchitecture.UnRegisterEvent``1
      language: CSharp
      name:
        CSharp: UnRegisterEvent<T>()
        VB: UnRegisterEvent(Of T)()
      nameWithType:
        CSharp: IArchitecture.UnRegisterEvent<T>()
        VB: IArchitecture.UnRegisterEvent(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.UnRegisterEvent<T>()
        VB: ZeroFramework.IArchitecture.UnRegisterEvent(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterEvent
        path: ''
        startLine: 697
      syntax:
        content:
          CSharp: void UnRegisterEvent<T>()
          VB: Sub UnRegisterEvent(Of T)()
        typeParameters:
        - id: T
      overload: ZeroFramework.IArchitecture.UnRegisterEvent*
    - id: ZeroFramework.IArchitecture.Deinit
      commentId: M:ZeroFramework.IArchitecture.Deinit
      language: CSharp
      name:
        CSharp: Deinit()
        VB: Deinit()
      nameWithType:
        CSharp: IArchitecture.Deinit()
        VB: IArchitecture.Deinit()
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.Deinit()
        VB: ZeroFramework.IArchitecture.Deinit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Deinit
        path: ''
        startLine: 700
      syntax:
        content:
          CSharp: void Deinit()
          VB: Sub Deinit()
      overload: ZeroFramework.IArchitecture.Deinit*
    - id: ZeroFramework.IArchitecture.Initialized
      commentId: P:ZeroFramework.IArchitecture.Initialized
      language: CSharp
      name:
        CSharp: Initialized
        VB: Initialized
      nameWithType:
        CSharp: IArchitecture.Initialized
        VB: IArchitecture.Initialized
      qualifiedName:
        CSharp: ZeroFramework.IArchitecture.Initialized
        VB: ZeroFramework.IArchitecture.Initialized
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Initialized
        path: ''
        startLine: 703
      syntax:
        content:
          CSharp: bool Initialized { get; set; }
          VB: Property Initialized As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: ZeroFramework.IArchitecture.Initialized*
  - id: ZeroFramework.Architecture`1
    commentId: T:ZeroFramework.Architecture`1
    language: CSharp
    name:
      CSharp: Architecture<T>
      VB: Architecture(Of T)
    nameWithType:
      CSharp: Architecture<T>
      VB: Architecture(Of T)
    qualifiedName:
      CSharp: ZeroFramework.Architecture<T>
      VB: ZeroFramework.Architecture(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: Architecture
      path: ''
      startLine: 706
    syntax:
      content:
        CSharp: 'public abstract class Architecture<T> : IArchitecture where T : Architecture<T>, new()'
        VB: Public MustInherit Class Architecture(Of T As {Architecture(Of T), New}) Implements IArchitecture
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.IArchitecture
    items:
    - id: ZeroFramework.Architecture`1.Initialized
      commentId: P:ZeroFramework.Architecture`1.Initialized
      language: CSharp
      name:
        CSharp: Initialized
        VB: Initialized
      nameWithType:
        CSharp: Architecture<T>.Initialized
        VB: Architecture(Of T).Initialized
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.Initialized
        VB: ZeroFramework.Architecture(Of T).Initialized
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Initialized
        path: ''
        startLine: 708
      syntax:
        content:
          CSharp: public bool Initialized { get; set; }
          VB: Public Property Initialized As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: ZeroFramework.Architecture`1.Initialized*
      implements:
      - ZeroFramework.IArchitecture.Initialized
    - id: ZeroFramework.Architecture`1.Interface
      commentId: P:ZeroFramework.Architecture`1.Interface
      language: CSharp
      name:
        CSharp: Interface
        VB: Interface
      nameWithType:
        CSharp: Architecture<T>.Interface
        VB: Architecture(Of T).Interface
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.Interface
        VB: ZeroFramework.Architecture(Of T).Interface
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Interface
        path: ''
        startLine: 715
      syntax:
        content:
          CSharp: public static IArchitecture Interface { get; }
          VB: Public Shared ReadOnly Property [Interface] As IArchitecture
        parameters: []
        return:
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.Architecture`1.Interface*
    - id: ZeroFramework.Architecture`1.Init
      commentId: M:ZeroFramework.Architecture`1.Init
      language: CSharp
      name:
        CSharp: Init()
        VB: Init()
      nameWithType:
        CSharp: Architecture<T>.Init()
        VB: Architecture(Of T).Init()
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.Init()
        VB: ZeroFramework.Architecture(Of T).Init()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Init
        path: ''
        startLine: 748
      syntax:
        content:
          CSharp: protected abstract void Init()
          VB: Protected MustOverride Sub Init()
      overload: ZeroFramework.Architecture`1.Init*
    - id: ZeroFramework.Architecture`1.Deinit
      commentId: M:ZeroFramework.Architecture`1.Deinit
      language: CSharp
      name:
        CSharp: Deinit()
        VB: Deinit()
      nameWithType:
        CSharp: Architecture<T>.Deinit()
        VB: Architecture(Of T).Deinit()
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.Deinit()
        VB: ZeroFramework.Architecture(Of T).Deinit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Deinit
        path: ''
        startLine: 750
      syntax:
        content:
          CSharp: public void Deinit()
          VB: Public Sub Deinit()
      overload: ZeroFramework.Architecture`1.Deinit*
      implements:
      - ZeroFramework.IArchitecture.Deinit
    - id: ZeroFramework.Architecture`1.OnDeinit
      commentId: M:ZeroFramework.Architecture`1.OnDeinit
      language: CSharp
      name:
        CSharp: OnDeinit()
        VB: OnDeinit()
      nameWithType:
        CSharp: Architecture<T>.OnDeinit()
        VB: Architecture(Of T).OnDeinit()
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.OnDeinit()
        VB: ZeroFramework.Architecture(Of T).OnDeinit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: OnDeinit
        path: ''
        startLine: 761
      syntax:
        content:
          CSharp: protected virtual void OnDeinit()
          VB: Protected Overridable Sub OnDeinit()
      overload: ZeroFramework.Architecture`1.OnDeinit*
    - id: ZeroFramework.Architecture`1.RegisterSystem``1(``0)
      commentId: M:ZeroFramework.Architecture`1.RegisterSystem``1(``0)
      language: CSharp
      name:
        CSharp: RegisterSystem<TSystem>(TSystem)
        VB: RegisterSystem(Of TSystem)(TSystem)
      nameWithType:
        CSharp: Architecture<T>.RegisterSystem<TSystem>(TSystem)
        VB: Architecture(Of T).RegisterSystem(Of TSystem)(TSystem)
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.RegisterSystem<TSystem>(TSystem)
        VB: ZeroFramework.Architecture(Of T).RegisterSystem(Of TSystem)(TSystem)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterSystem
        path: ''
        startLine: 765
      syntax:
        content:
          CSharp: 'public TSystem RegisterSystem<TSystem>(TSystem system) where TSystem : class, ISystem'
          VB: Public Function RegisterSystem(Of TSystem As {Class, ISystem})(system As TSystem) As TSystem
        parameters:
        - id: system
          type: '{TSystem}'
        typeParameters:
        - id: TSystem
        return:
          type: '{TSystem}'
      overload: ZeroFramework.Architecture`1.RegisterSystem*
      implements:
      - ZeroFramework.IArchitecture.RegisterSystem``1({TSystem})
    - id: ZeroFramework.Architecture`1.RegisterSystem``1(ZeroFramework.IZeroFactory)
      commentId: M:ZeroFramework.Architecture`1.RegisterSystem``1(ZeroFramework.IZeroFactory)
      language: CSharp
      name:
        CSharp: RegisterSystem<TSystem>(IZeroFactory)
        VB: RegisterSystem(Of TSystem)(IZeroFactory)
      nameWithType:
        CSharp: Architecture<T>.RegisterSystem<TSystem>(IZeroFactory)
        VB: Architecture(Of T).RegisterSystem(Of TSystem)(IZeroFactory)
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.RegisterSystem<TSystem>(ZeroFramework.IZeroFactory)
        VB: ZeroFramework.Architecture(Of T).RegisterSystem(Of TSystem)(ZeroFramework.IZeroFactory)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterSystem
        path: ''
        startLine: 779
      syntax:
        content:
          CSharp: 'public void RegisterSystem<TSystem>(IZeroFactory systemFactory) where TSystem : class, ISystem'
          VB: Public Sub RegisterSystem(Of TSystem As {Class, ISystem})(systemFactory As IZeroFactory)
        parameters:
        - id: systemFactory
          type: ZeroFramework.IZeroFactory
        typeParameters:
        - id: TSystem
      overload: ZeroFramework.Architecture`1.RegisterSystem*
      implements:
      - ZeroFramework.IArchitecture.RegisterSystem``1(ZeroFramework.IZeroFactory)
    - id: ZeroFramework.Architecture`1.RegisterModel``1(``0)
      commentId: M:ZeroFramework.Architecture`1.RegisterModel``1(``0)
      language: CSharp
      name:
        CSharp: RegisterModel<TModel>(TModel)
        VB: RegisterModel(Of TModel)(TModel)
      nameWithType:
        CSharp: Architecture<T>.RegisterModel<TModel>(TModel)
        VB: Architecture(Of T).RegisterModel(Of TModel)(TModel)
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.RegisterModel<TModel>(TModel)
        VB: ZeroFramework.Architecture(Of T).RegisterModel(Of TModel)(TModel)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterModel
        path: ''
        startLine: 784
      syntax:
        content:
          CSharp: 'public TModel RegisterModel<TModel>(TModel model) where TModel : class, IModel'
          VB: Public Function RegisterModel(Of TModel As {Class, IModel})(model As TModel) As TModel
        parameters:
        - id: model
          type: '{TModel}'
        typeParameters:
        - id: TModel
        return:
          type: '{TModel}'
      overload: ZeroFramework.Architecture`1.RegisterModel*
      implements:
      - ZeroFramework.IArchitecture.RegisterModel``1({TModel})
    - id: ZeroFramework.Architecture`1.RegisterModel``1(ZeroFramework.IZeroFactory)
      commentId: M:ZeroFramework.Architecture`1.RegisterModel``1(ZeroFramework.IZeroFactory)
      language: CSharp
      name:
        CSharp: RegisterModel<TModel>(IZeroFactory)
        VB: RegisterModel(Of TModel)(IZeroFactory)
      nameWithType:
        CSharp: Architecture<T>.RegisterModel<TModel>(IZeroFactory)
        VB: Architecture(Of T).RegisterModel(Of TModel)(IZeroFactory)
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.RegisterModel<TModel>(ZeroFramework.IZeroFactory)
        VB: ZeroFramework.Architecture(Of T).RegisterModel(Of TModel)(ZeroFramework.IZeroFactory)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterModel
        path: ''
        startLine: 798
      syntax:
        content:
          CSharp: 'public void RegisterModel<TModel>(IZeroFactory modelFactory) where TModel : class, IModel'
          VB: Public Sub RegisterModel(Of TModel As {Class, IModel})(modelFactory As IZeroFactory)
        parameters:
        - id: modelFactory
          type: ZeroFramework.IZeroFactory
        typeParameters:
        - id: TModel
      overload: ZeroFramework.Architecture`1.RegisterModel*
      implements:
      - ZeroFramework.IArchitecture.RegisterModel``1(ZeroFramework.IZeroFactory)
    - id: ZeroFramework.Architecture`1.RegisterUtility``1(``0)
      commentId: M:ZeroFramework.Architecture`1.RegisterUtility``1(``0)
      language: CSharp
      name:
        CSharp: RegisterUtility<TUtility>(TUtility)
        VB: RegisterUtility(Of TUtility)(TUtility)
      nameWithType:
        CSharp: Architecture<T>.RegisterUtility<TUtility>(TUtility)
        VB: Architecture(Of T).RegisterUtility(Of TUtility)(TUtility)
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.RegisterUtility<TUtility>(TUtility)
        VB: ZeroFramework.Architecture(Of T).RegisterUtility(Of TUtility)(TUtility)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterUtility
        path: ''
        startLine: 803
      syntax:
        content:
          CSharp: 'public TUtility RegisterUtility<TUtility>(TUtility utility) where TUtility : class, IUtility'
          VB: Public Function RegisterUtility(Of TUtility As {Class, IUtility})(utility As TUtility) As TUtility
        parameters:
        - id: utility
          type: '{TUtility}'
        typeParameters:
        - id: TUtility
        return:
          type: '{TUtility}'
      overload: ZeroFramework.Architecture`1.RegisterUtility*
      implements:
      - ZeroFramework.IArchitecture.RegisterUtility``1({TUtility})
    - id: ZeroFramework.Architecture`1.RegisterUtility``1(ZeroFramework.IZeroFactory)
      commentId: M:ZeroFramework.Architecture`1.RegisterUtility``1(ZeroFramework.IZeroFactory)
      language: CSharp
      name:
        CSharp: RegisterUtility<TUtility>(IZeroFactory)
        VB: RegisterUtility(Of TUtility)(IZeroFactory)
      nameWithType:
        CSharp: Architecture<T>.RegisterUtility<TUtility>(IZeroFactory)
        VB: Architecture(Of T).RegisterUtility(Of TUtility)(IZeroFactory)
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.RegisterUtility<TUtility>(ZeroFramework.IZeroFactory)
        VB: ZeroFramework.Architecture(Of T).RegisterUtility(Of TUtility)(ZeroFramework.IZeroFactory)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterUtility
        path: ''
        startLine: 810
      syntax:
        content:
          CSharp: 'public void RegisterUtility<TUtility>(IZeroFactory utilityFactory) where TUtility : class, IUtility'
          VB: Public Sub RegisterUtility(Of TUtility As {Class, IUtility})(utilityFactory As IZeroFactory)
        parameters:
        - id: utilityFactory
          type: ZeroFramework.IZeroFactory
        typeParameters:
        - id: TUtility
      overload: ZeroFramework.Architecture`1.RegisterUtility*
      implements:
      - ZeroFramework.IArchitecture.RegisterUtility``1(ZeroFramework.IZeroFactory)
    - id: ZeroFramework.Architecture`1.UnRegisterSystem``1
      commentId: M:ZeroFramework.Architecture`1.UnRegisterSystem``1
      language: CSharp
      name:
        CSharp: UnRegisterSystem<TSystem>()
        VB: UnRegisterSystem(Of TSystem)()
      nameWithType:
        CSharp: Architecture<T>.UnRegisterSystem<TSystem>()
        VB: Architecture(Of T).UnRegisterSystem(Of TSystem)()
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.UnRegisterSystem<TSystem>()
        VB: ZeroFramework.Architecture(Of T).UnRegisterSystem(Of TSystem)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterSystem
        path: ''
        startLine: 818
      syntax:
        content:
          CSharp: 'public void UnRegisterSystem<TSystem>() where TSystem : ISystem'
          VB: Public Sub UnRegisterSystem(Of TSystem As ISystem)()
        typeParameters:
        - id: TSystem
      overload: ZeroFramework.Architecture`1.UnRegisterSystem*
      implements:
      - ZeroFramework.IArchitecture.UnRegisterSystem``1
    - id: ZeroFramework.Architecture`1.UnRegisterModel``1
      commentId: M:ZeroFramework.Architecture`1.UnRegisterModel``1
      language: CSharp
      name:
        CSharp: UnRegisterModel<TModel>()
        VB: UnRegisterModel(Of TModel)()
      nameWithType:
        CSharp: Architecture<T>.UnRegisterModel<TModel>()
        VB: Architecture(Of T).UnRegisterModel(Of TModel)()
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.UnRegisterModel<TModel>()
        VB: ZeroFramework.Architecture(Of T).UnRegisterModel(Of TModel)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterModel
        path: ''
        startLine: 824
      syntax:
        content:
          CSharp: 'public void UnRegisterModel<TModel>() where TModel : IModel'
          VB: Public Sub UnRegisterModel(Of TModel As IModel)()
        typeParameters:
        - id: TModel
      overload: ZeroFramework.Architecture`1.UnRegisterModel*
      implements:
      - ZeroFramework.IArchitecture.UnRegisterModel``1
    - id: ZeroFramework.Architecture`1.UnRegisterUtility``1
      commentId: M:ZeroFramework.Architecture`1.UnRegisterUtility``1
      language: CSharp
      name:
        CSharp: UnRegisterUtility<TUtility>()
        VB: UnRegisterUtility(Of TUtility)()
      nameWithType:
        CSharp: Architecture<T>.UnRegisterUtility<TUtility>()
        VB: Architecture(Of T).UnRegisterUtility(Of TUtility)()
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.UnRegisterUtility<TUtility>()
        VB: ZeroFramework.Architecture(Of T).UnRegisterUtility(Of TUtility)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterUtility
        path: ''
        startLine: 830
      syntax:
        content:
          CSharp: 'public void UnRegisterUtility<TUtility>() where TUtility : IUtility'
          VB: Public Sub UnRegisterUtility(Of TUtility As IUtility)()
        typeParameters:
        - id: TUtility
      overload: ZeroFramework.Architecture`1.UnRegisterUtility*
      implements:
      - ZeroFramework.IArchitecture.UnRegisterUtility``1
    - id: ZeroFramework.Architecture`1.GetSystem``1
      commentId: M:ZeroFramework.Architecture`1.GetSystem``1
      language: CSharp
      name:
        CSharp: GetSystem<TSystem>()
        VB: GetSystem(Of TSystem)()
      nameWithType:
        CSharp: Architecture<T>.GetSystem<TSystem>()
        VB: Architecture(Of T).GetSystem(Of TSystem)()
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.GetSystem<TSystem>()
        VB: ZeroFramework.Architecture(Of T).GetSystem(Of TSystem)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetSystem
        path: ''
        startLine: 840
      syntax:
        content:
          CSharp: 'public TSystem GetSystem<TSystem>() where TSystem : class, ISystem'
          VB: Public Function GetSystem(Of TSystem As {Class, ISystem})() As TSystem
        typeParameters:
        - id: TSystem
        return:
          type: '{TSystem}'
      overload: ZeroFramework.Architecture`1.GetSystem*
      implements:
      - ZeroFramework.IArchitecture.GetSystem``1
    - id: ZeroFramework.Architecture`1.GetModel``1
      commentId: M:ZeroFramework.Architecture`1.GetModel``1
      language: CSharp
      name:
        CSharp: GetModel<TModel>()
        VB: GetModel(Of TModel)()
      nameWithType:
        CSharp: Architecture<T>.GetModel<TModel>()
        VB: Architecture(Of T).GetModel(Of TModel)()
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.GetModel<TModel>()
        VB: ZeroFramework.Architecture(Of T).GetModel(Of TModel)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetModel
        path: ''
        startLine: 854
      syntax:
        content:
          CSharp: 'public TModel GetModel<TModel>() where TModel : class, IModel'
          VB: Public Function GetModel(Of TModel As {Class, IModel})() As TModel
        typeParameters:
        - id: TModel
        return:
          type: '{TModel}'
      overload: ZeroFramework.Architecture`1.GetModel*
      implements:
      - ZeroFramework.IArchitecture.GetModel``1
    - id: ZeroFramework.Architecture`1.GetUtility``1
      commentId: M:ZeroFramework.Architecture`1.GetUtility``1
      language: CSharp
      name:
        CSharp: GetUtility<TUtility>()
        VB: GetUtility(Of TUtility)()
      nameWithType:
        CSharp: Architecture<T>.GetUtility<TUtility>()
        VB: Architecture(Of T).GetUtility(Of TUtility)()
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.GetUtility<TUtility>()
        VB: ZeroFramework.Architecture(Of T).GetUtility(Of TUtility)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetUtility
        path: ''
        startLine: 868
      syntax:
        content:
          CSharp: 'public TUtility GetUtility<TUtility>() where TUtility : class, IUtility'
          VB: Public Function GetUtility(Of TUtility As {Class, IUtility})() As TUtility
        typeParameters:
        - id: TUtility
        return:
          type: '{TUtility}'
      overload: ZeroFramework.Architecture`1.GetUtility*
      implements:
      - ZeroFramework.IArchitecture.GetUtility``1
    - id: ZeroFramework.Architecture`1.SendCommand``1(ZeroFramework.ICommand{``0})
      commentId: M:ZeroFramework.Architecture`1.SendCommand``1(ZeroFramework.ICommand{``0})
      language: CSharp
      name:
        CSharp: SendCommand<TResult>(ICommand<TResult>)
        VB: SendCommand(Of TResult)(ICommand(Of TResult))
      nameWithType:
        CSharp: Architecture<T>.SendCommand<TResult>(ICommand<TResult>)
        VB: Architecture(Of T).SendCommand(Of TResult)(ICommand(Of TResult))
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.SendCommand<TResult>(ZeroFramework.ICommand<TResult>)
        VB: ZeroFramework.Architecture(Of T).SendCommand(Of TResult)(ZeroFramework.ICommand(Of TResult))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendCommand
        path: ''
        startLine: 885
      syntax:
        content:
          CSharp: public TResult SendCommand<TResult>(ICommand<TResult> command)
          VB: Public Function SendCommand(Of TResult)(command As ICommand(Of TResult)) As TResult
        parameters:
        - id: command
          type: ZeroFramework.ICommand{{TResult}}
        typeParameters:
        - id: TResult
        return:
          type: '{TResult}'
      overload: ZeroFramework.Architecture`1.SendCommand*
      implements:
      - ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{{TResult}})
    - id: ZeroFramework.Architecture`1.SendCommand``1(``0)
      commentId: M:ZeroFramework.Architecture`1.SendCommand``1(``0)
      language: CSharp
      name:
        CSharp: SendCommand<TCommand>(TCommand)
        VB: SendCommand(Of TCommand)(TCommand)
      nameWithType:
        CSharp: Architecture<T>.SendCommand<TCommand>(TCommand)
        VB: Architecture(Of T).SendCommand(Of TCommand)(TCommand)
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.SendCommand<TCommand>(TCommand)
        VB: ZeroFramework.Architecture(Of T).SendCommand(Of TCommand)(TCommand)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendCommand
        path: ''
        startLine: 887
      syntax:
        content:
          CSharp: 'public void SendCommand<TCommand>(TCommand command) where TCommand : ICommand'
          VB: Public Sub SendCommand(Of TCommand As ICommand)(command As TCommand)
        parameters:
        - id: command
          type: '{TCommand}'
        typeParameters:
        - id: TCommand
      overload: ZeroFramework.Architecture`1.SendCommand*
      implements:
      - ZeroFramework.IArchitecture.SendCommand``1({TCommand})
    - id: ZeroFramework.Architecture`1.ExecuteCommand``1(ZeroFramework.ICommand{``0})
      commentId: M:ZeroFramework.Architecture`1.ExecuteCommand``1(ZeroFramework.ICommand{``0})
      language: CSharp
      name:
        CSharp: ExecuteCommand<TResult>(ICommand<TResult>)
        VB: ExecuteCommand(Of TResult)(ICommand(Of TResult))
      nameWithType:
        CSharp: Architecture<T>.ExecuteCommand<TResult>(ICommand<TResult>)
        VB: Architecture(Of T).ExecuteCommand(Of TResult)(ICommand(Of TResult))
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.ExecuteCommand<TResult>(ZeroFramework.ICommand<TResult>)
        VB: ZeroFramework.Architecture(Of T).ExecuteCommand(Of TResult)(ZeroFramework.ICommand(Of TResult))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ExecuteCommand
        path: ''
        startLine: 889
      syntax:
        content:
          CSharp: protected virtual TResult ExecuteCommand<TResult>(ICommand<TResult> command)
          VB: Protected Overridable Function ExecuteCommand(Of TResult)(command As ICommand(Of TResult)) As TResult
        parameters:
        - id: command
          type: ZeroFramework.ICommand{{TResult}}
        typeParameters:
        - id: TResult
        return:
          type: '{TResult}'
      overload: ZeroFramework.Architecture`1.ExecuteCommand*
    - id: ZeroFramework.Architecture`1.ExecuteCommand(ZeroFramework.ICommand)
      commentId: M:ZeroFramework.Architecture`1.ExecuteCommand(ZeroFramework.ICommand)
      language: CSharp
      name:
        CSharp: ExecuteCommand(ICommand)
        VB: ExecuteCommand(ICommand)
      nameWithType:
        CSharp: Architecture<T>.ExecuteCommand(ICommand)
        VB: Architecture(Of T).ExecuteCommand(ICommand)
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.ExecuteCommand(ZeroFramework.ICommand)
        VB: ZeroFramework.Architecture(Of T).ExecuteCommand(ZeroFramework.ICommand)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ExecuteCommand
        path: ''
        startLine: 895
      syntax:
        content:
          CSharp: protected virtual void ExecuteCommand(ICommand command)
          VB: Protected Overridable Sub ExecuteCommand(command As ICommand)
        parameters:
        - id: command
          type: ZeroFramework.ICommand
      overload: ZeroFramework.Architecture`1.ExecuteCommand*
    - id: ZeroFramework.Architecture`1.SendQuery``1(ZeroFramework.IQuery{``0})
      commentId: M:ZeroFramework.Architecture`1.SendQuery``1(ZeroFramework.IQuery{``0})
      language: CSharp
      name:
        CSharp: SendQuery<TResult>(IQuery<TResult>)
        VB: SendQuery(Of TResult)(IQuery(Of TResult))
      nameWithType:
        CSharp: Architecture<T>.SendQuery<TResult>(IQuery<TResult>)
        VB: Architecture(Of T).SendQuery(Of TResult)(IQuery(Of TResult))
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.SendQuery<TResult>(ZeroFramework.IQuery<TResult>)
        VB: ZeroFramework.Architecture(Of T).SendQuery(Of TResult)(ZeroFramework.IQuery(Of TResult))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendQuery
        path: ''
        startLine: 901
      syntax:
        content:
          CSharp: public TResult SendQuery<TResult>(IQuery<TResult> query)
          VB: Public Function SendQuery(Of TResult)(query As IQuery(Of TResult)) As TResult
        parameters:
        - id: query
          type: ZeroFramework.IQuery{{TResult}}
        typeParameters:
        - id: TResult
        return:
          type: '{TResult}'
      overload: ZeroFramework.Architecture`1.SendQuery*
      implements:
      - ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{{TResult}})
    - id: ZeroFramework.Architecture`1.DoQuery``1(ZeroFramework.IQuery{``0})
      commentId: M:ZeroFramework.Architecture`1.DoQuery``1(ZeroFramework.IQuery{``0})
      language: CSharp
      name:
        CSharp: DoQuery<TResult>(IQuery<TResult>)
        VB: DoQuery(Of TResult)(IQuery(Of TResult))
      nameWithType:
        CSharp: Architecture<T>.DoQuery<TResult>(IQuery<TResult>)
        VB: Architecture(Of T).DoQuery(Of TResult)(IQuery(Of TResult))
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.DoQuery<TResult>(ZeroFramework.IQuery<TResult>)
        VB: ZeroFramework.Architecture(Of T).DoQuery(Of TResult)(ZeroFramework.IQuery(Of TResult))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: DoQuery
        path: ''
        startLine: 903
      syntax:
        content:
          CSharp: protected virtual TResult DoQuery<TResult>(IQuery<TResult> query)
          VB: Protected Overridable Function DoQuery(Of TResult)(query As IQuery(Of TResult)) As TResult
        parameters:
        - id: query
          type: ZeroFramework.IQuery{{TResult}}
        typeParameters:
        - id: TResult
        return:
          type: '{TResult}'
      overload: ZeroFramework.Architecture`1.DoQuery*
    - id: ZeroFramework.Architecture`1.SendEvent``1
      commentId: M:ZeroFramework.Architecture`1.SendEvent``1
      language: CSharp
      name:
        CSharp: SendEvent<TEvent>()
        VB: SendEvent(Of TEvent)()
      nameWithType:
        CSharp: Architecture<T>.SendEvent<TEvent>()
        VB: Architecture(Of T).SendEvent(Of TEvent)()
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.SendEvent<TEvent>()
        VB: ZeroFramework.Architecture(Of T).SendEvent(Of TEvent)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendEvent
        path: ''
        startLine: 909
      syntax:
        content:
          CSharp: 'public void SendEvent<TEvent>() where TEvent : new()'
          VB: Public Sub SendEvent(Of TEvent As New)()
        typeParameters:
        - id: TEvent
      overload: ZeroFramework.Architecture`1.SendEvent*
      implements:
      - ZeroFramework.IArchitecture.SendEvent``1
    - id: ZeroFramework.Architecture`1.SendEvent``1(``0)
      commentId: M:ZeroFramework.Architecture`1.SendEvent``1(``0)
      language: CSharp
      name:
        CSharp: SendEvent<TEvent>(TEvent)
        VB: SendEvent(Of TEvent)(TEvent)
      nameWithType:
        CSharp: Architecture<T>.SendEvent<TEvent>(TEvent)
        VB: Architecture(Of T).SendEvent(Of TEvent)(TEvent)
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.SendEvent<TEvent>(TEvent)
        VB: ZeroFramework.Architecture(Of T).SendEvent(Of TEvent)(TEvent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendEvent
        path: ''
        startLine: 911
      syntax:
        content:
          CSharp: public void SendEvent<TEvent>(TEvent e)
          VB: Public Sub SendEvent(Of TEvent)(e As TEvent)
        parameters:
        - id: e
          type: '{TEvent}'
        typeParameters:
        - id: TEvent
      overload: ZeroFramework.Architecture`1.SendEvent*
      implements:
      - ZeroFramework.IArchitecture.SendEvent``1({TEvent})
    - id: ZeroFramework.Architecture`1.RegisterEvent``1(Action{``0})
      commentId: M:ZeroFramework.Architecture`1.RegisterEvent``1(Action{``0})
      language: CSharp
      name:
        CSharp: RegisterEvent<TEvent>(Action<TEvent>)
        VB: RegisterEvent(Of TEvent)(Action(Of TEvent))
      nameWithType:
        CSharp: Architecture<T>.RegisterEvent<TEvent>(Action<TEvent>)
        VB: Architecture(Of T).RegisterEvent(Of TEvent)(Action(Of TEvent))
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.RegisterEvent<TEvent>(Action<TEvent>)
        VB: ZeroFramework.Architecture(Of T).RegisterEvent(Of TEvent)(Action(Of TEvent))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterEvent
        path: ''
        startLine: 913
      syntax:
        content:
          CSharp: public IUnRegister RegisterEvent<TEvent>(Action<TEvent> onEvent)
          VB: Public Function RegisterEvent(Of TEvent)(onEvent As Action(Of TEvent)) As IUnRegister
        parameters:
        - id: onEvent
          type: Global.Action{{TEvent}}
        typeParameters:
        - id: TEvent
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.Architecture`1.RegisterEvent*
      implements:
      - ZeroFramework.IArchitecture.RegisterEvent``1(Action{{TEvent}})
    - id: ZeroFramework.Architecture`1.UnRegisterEvent``1(Action{``0})
      commentId: M:ZeroFramework.Architecture`1.UnRegisterEvent``1(Action{``0})
      language: CSharp
      name:
        CSharp: UnRegisterEvent<TEvent>(Action<TEvent>)
        VB: UnRegisterEvent(Of TEvent)(Action(Of TEvent))
      nameWithType:
        CSharp: Architecture<T>.UnRegisterEvent<TEvent>(Action<TEvent>)
        VB: Architecture(Of T).UnRegisterEvent(Of TEvent)(Action(Of TEvent))
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.UnRegisterEvent<TEvent>(Action<TEvent>)
        VB: ZeroFramework.Architecture(Of T).UnRegisterEvent(Of TEvent)(Action(Of TEvent))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterEvent
        path: ''
        startLine: 915
      syntax:
        content:
          CSharp: public void UnRegisterEvent<TEvent>(Action<TEvent> onEvent)
          VB: Public Sub UnRegisterEvent(Of TEvent)(onEvent As Action(Of TEvent))
        parameters:
        - id: onEvent
          type: Global.Action{{TEvent}}
        typeParameters:
        - id: TEvent
      overload: ZeroFramework.Architecture`1.UnRegisterEvent*
      implements:
      - ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{{TEvent}})
    - id: ZeroFramework.Architecture`1.UnRegisterEvent``1
      commentId: M:ZeroFramework.Architecture`1.UnRegisterEvent``1
      language: CSharp
      name:
        CSharp: UnRegisterEvent<TEvent>()
        VB: UnRegisterEvent(Of TEvent)()
      nameWithType:
        CSharp: Architecture<T>.UnRegisterEvent<TEvent>()
        VB: Architecture(Of T).UnRegisterEvent(Of TEvent)()
      qualifiedName:
        CSharp: ZeroFramework.Architecture<T>.UnRegisterEvent<TEvent>()
        VB: ZeroFramework.Architecture(Of T).UnRegisterEvent(Of TEvent)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterEvent
        path: ''
        startLine: 917
      syntax:
        content:
          CSharp: public void UnRegisterEvent<TEvent>()
          VB: Public Sub UnRegisterEvent(Of TEvent)()
        typeParameters:
        - id: TEvent
      overload: ZeroFramework.Architecture`1.UnRegisterEvent*
      implements:
      - ZeroFramework.IArchitecture.UnRegisterEvent``1
  - id: ZeroFramework.ICommand
    commentId: T:ZeroFramework.ICommand
    language: CSharp
    name:
      CSharp: ICommand
      VB: ICommand
    nameWithType:
      CSharp: ICommand
      VB: ICommand
    qualifiedName:
      CSharp: ZeroFramework.ICommand
      VB: ZeroFramework.ICommand
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ICommand
      path: ''
      startLine: 936
    syntax:
      content:
        CSharp: 'public interface ICommand : ICanSetArchitecture, ICanGetSystem, ICanGetModel, ICanGetUtility, ICanSendEvent, ICanSendCommand, ICanSendQuery, IBelongToArchitecture'
        VB: Public Interface ICommand Inherits ICanSetArchitecture, ICanGetSystem, ICanGetModel, ICanGetUtility, ICanSendEvent, ICanSendCommand, ICanSendQuery, IBelongToArchitecture
    inheritedMembers:
    - ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    items:
    - id: ZeroFramework.ICommand.Execute
      commentId: M:ZeroFramework.ICommand.Execute
      language: CSharp
      name:
        CSharp: Execute()
        VB: Execute()
      nameWithType:
        CSharp: ICommand.Execute()
        VB: ICommand.Execute()
      qualifiedName:
        CSharp: ZeroFramework.ICommand.Execute()
        VB: ZeroFramework.ICommand.Execute()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Execute
        path: ''
        startLine: 939
      syntax:
        content:
          CSharp: void Execute()
          VB: Sub Execute()
      overload: ZeroFramework.ICommand.Execute*
  - id: ZeroFramework.ICommand`1
    commentId: T:ZeroFramework.ICommand`1
    language: CSharp
    name:
      CSharp: ICommand<TResult>
      VB: ICommand(Of TResult)
    nameWithType:
      CSharp: ICommand<TResult>
      VB: ICommand(Of TResult)
    qualifiedName:
      CSharp: ZeroFramework.ICommand<TResult>
      VB: ZeroFramework.ICommand(Of TResult)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ICommand
      path: ''
      startLine: 942
    syntax:
      content:
        CSharp: 'public interface ICommand<TResult> : ICanSetArchitecture, ICanGetSystem, ICanGetModel, ICanGetUtility, ICanSendEvent, ICanSendCommand, ICanSendQuery, IBelongToArchitecture'
        VB: Public Interface ICommand(Of TResult) Inherits ICanSetArchitecture, ICanGetSystem, ICanGetModel, ICanGetUtility, ICanSendEvent, ICanSendCommand, ICanSendQuery, IBelongToArchitecture
      typeParameters:
      - id: TResult
    inheritedMembers:
    - ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    items:
    - id: ZeroFramework.ICommand`1.Execute
      commentId: M:ZeroFramework.ICommand`1.Execute
      language: CSharp
      name:
        CSharp: Execute()
        VB: Execute()
      nameWithType:
        CSharp: ICommand<TResult>.Execute()
        VB: ICommand(Of TResult).Execute()
      qualifiedName:
        CSharp: ZeroFramework.ICommand<TResult>.Execute()
        VB: ZeroFramework.ICommand(Of TResult).Execute()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Execute
        path: ''
        startLine: 945
      syntax:
        content:
          CSharp: TResult Execute()
          VB: Function Execute() As TResult
        return:
          type: '{TResult}'
      overload: ZeroFramework.ICommand`1.Execute*
  - id: ZeroFramework.AbstractCommand
    commentId: T:ZeroFramework.AbstractCommand
    language: CSharp
    name:
      CSharp: AbstractCommand
      VB: AbstractCommand
    nameWithType:
      CSharp: AbstractCommand
      VB: AbstractCommand
    qualifiedName:
      CSharp: ZeroFramework.AbstractCommand
      VB: ZeroFramework.AbstractCommand
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: AbstractCommand
      path: ''
      startLine: 948
    syntax:
      content:
        CSharp: 'public abstract class AbstractCommand : ICommand, ICanSetArchitecture, ICanGetSystem, ICanGetModel, ICanGetUtility, ICanSendEvent, ICanSendCommand, ICanSendQuery, IBelongToArchitecture'
        VB: Public MustInherit Class AbstractCommand Implements ICommand, ICanSetArchitecture, ICanGetSystem, ICanGetModel, ICanGetUtility, ICanSendEvent, ICanSendCommand, ICanSendQuery, IBelongToArchitecture
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.ICommand
    - ZeroFramework.ICanSetArchitecture
    - ZeroFramework.ICanGetSystem
    - ZeroFramework.ICanGetModel
    - ZeroFramework.ICanGetUtility
    - ZeroFramework.ICanSendEvent
    - ZeroFramework.ICanSendCommand
    - ZeroFramework.ICanSendQuery
    - ZeroFramework.IBelongToArchitecture
    items:
    - isEii: true
      id: ZeroFramework.AbstractCommand.ZeroFramework#IBelongToArchitecture#GetArchitecture
      commentId: M:ZeroFramework.AbstractCommand.ZeroFramework#IBelongToArchitecture#GetArchitecture
      language: CSharp
      name:
        CSharp: IBelongToArchitecture.GetArchitecture()
        VB: ''
      nameWithType:
        CSharp: AbstractCommand.IBelongToArchitecture.GetArchitecture()
        VB: ''
      qualifiedName:
        CSharp: ZeroFramework.AbstractCommand.ZeroFramework.IBelongToArchitecture.GetArchitecture()
        VB: ''
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ZeroFramework.IBelongToArchitecture.GetArchitecture
        path: ''
        startLine: 952
      syntax:
        content:
          CSharp: IArchitecture IBelongToArchitecture.GetArchitecture()
        return:
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.AbstractCommand.ZeroFramework#IBelongToArchitecture#GetArchitecture*
      implements:
      - ZeroFramework.IBelongToArchitecture.GetArchitecture
    - isEii: true
      id: ZeroFramework.AbstractCommand.ZeroFramework#ICanSetArchitecture#SetArchitecture(ZeroFramework.IArchitecture)
      commentId: M:ZeroFramework.AbstractCommand.ZeroFramework#ICanSetArchitecture#SetArchitecture(ZeroFramework.IArchitecture)
      language: CSharp
      name:
        CSharp: ICanSetArchitecture.SetArchitecture(IArchitecture)
        VB: ''
      nameWithType:
        CSharp: AbstractCommand.ICanSetArchitecture.SetArchitecture(IArchitecture)
        VB: ''
      qualifiedName:
        CSharp: ZeroFramework.AbstractCommand.ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
        VB: ''
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ZeroFramework.ICanSetArchitecture.SetArchitecture
        path: ''
        startLine: 954
      syntax:
        content:
          CSharp: void ICanSetArchitecture.SetArchitecture(IArchitecture architecture)
        parameters:
        - id: architecture
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.AbstractCommand.ZeroFramework#ICanSetArchitecture#SetArchitecture*
      implements:
      - ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
    - isEii: true
      id: ZeroFramework.AbstractCommand.ZeroFramework#ICommand#Execute
      commentId: M:ZeroFramework.AbstractCommand.ZeroFramework#ICommand#Execute
      language: CSharp
      name:
        CSharp: ICommand.Execute()
        VB: ''
      nameWithType:
        CSharp: AbstractCommand.ICommand.Execute()
        VB: ''
      qualifiedName:
        CSharp: ZeroFramework.AbstractCommand.ZeroFramework.ICommand.Execute()
        VB: ''
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ZeroFramework.ICommand.Execute
        path: ''
        startLine: 956
      syntax:
        content:
          CSharp: void ICommand.Execute()
      overload: ZeroFramework.AbstractCommand.ZeroFramework#ICommand#Execute*
      implements:
      - ZeroFramework.ICommand.Execute
    - id: ZeroFramework.AbstractCommand.OnExecute
      commentId: M:ZeroFramework.AbstractCommand.OnExecute
      language: CSharp
      name:
        CSharp: OnExecute()
        VB: OnExecute()
      nameWithType:
        CSharp: AbstractCommand.OnExecute()
        VB: AbstractCommand.OnExecute()
      qualifiedName:
        CSharp: ZeroFramework.AbstractCommand.OnExecute()
        VB: ZeroFramework.AbstractCommand.OnExecute()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: OnExecute
        path: ''
        startLine: 958
      syntax:
        content:
          CSharp: protected abstract void OnExecute()
          VB: Protected MustOverride Sub OnExecute()
      overload: ZeroFramework.AbstractCommand.OnExecute*
  - id: ZeroFramework.AbstractCommand`1
    commentId: T:ZeroFramework.AbstractCommand`1
    language: CSharp
    name:
      CSharp: AbstractCommand<TResult>
      VB: AbstractCommand(Of TResult)
    nameWithType:
      CSharp: AbstractCommand<TResult>
      VB: AbstractCommand(Of TResult)
    qualifiedName:
      CSharp: ZeroFramework.AbstractCommand<TResult>
      VB: ZeroFramework.AbstractCommand(Of TResult)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: AbstractCommand
      path: ''
      startLine: 961
    syntax:
      content:
        CSharp: 'public abstract class AbstractCommand<TResult> : ICommand<TResult>, ICanSetArchitecture, ICanGetSystem, ICanGetModel, ICanGetUtility, ICanSendEvent, ICanSendCommand, ICanSendQuery, IBelongToArchitecture'
        VB: Public MustInherit Class AbstractCommand(Of TResult) Implements ICommand(Of TResult), ICanSetArchitecture, ICanGetSystem, ICanGetModel, ICanGetUtility, ICanSendEvent, ICanSendCommand, ICanSendQuery, IBelongToArchitecture
      typeParameters:
      - id: TResult
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.ICommand{{TResult}}
    - ZeroFramework.ICanSetArchitecture
    - ZeroFramework.ICanGetSystem
    - ZeroFramework.ICanGetModel
    - ZeroFramework.ICanGetUtility
    - ZeroFramework.ICanSendEvent
    - ZeroFramework.ICanSendCommand
    - ZeroFramework.ICanSendQuery
    - ZeroFramework.IBelongToArchitecture
    items:
    - isEii: true
      id: ZeroFramework.AbstractCommand`1.ZeroFramework#IBelongToArchitecture#GetArchitecture
      commentId: M:ZeroFramework.AbstractCommand`1.ZeroFramework#IBelongToArchitecture#GetArchitecture
      language: CSharp
      name:
        CSharp: IBelongToArchitecture.GetArchitecture()
        VB: ''
      nameWithType:
        CSharp: AbstractCommand<TResult>.IBelongToArchitecture.GetArchitecture()
        VB: ''
      qualifiedName:
        CSharp: ZeroFramework.AbstractCommand<TResult>.ZeroFramework.IBelongToArchitecture.GetArchitecture()
        VB: ''
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ZeroFramework.IBelongToArchitecture.GetArchitecture
        path: ''
        startLine: 965
      syntax:
        content:
          CSharp: IArchitecture IBelongToArchitecture.GetArchitecture()
        return:
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.AbstractCommand`1.ZeroFramework#IBelongToArchitecture#GetArchitecture*
      implements:
      - ZeroFramework.IBelongToArchitecture.GetArchitecture
    - isEii: true
      id: ZeroFramework.AbstractCommand`1.ZeroFramework#ICanSetArchitecture#SetArchitecture(ZeroFramework.IArchitecture)
      commentId: M:ZeroFramework.AbstractCommand`1.ZeroFramework#ICanSetArchitecture#SetArchitecture(ZeroFramework.IArchitecture)
      language: CSharp
      name:
        CSharp: ICanSetArchitecture.SetArchitecture(IArchitecture)
        VB: ''
      nameWithType:
        CSharp: AbstractCommand<TResult>.ICanSetArchitecture.SetArchitecture(IArchitecture)
        VB: ''
      qualifiedName:
        CSharp: ZeroFramework.AbstractCommand<TResult>.ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
        VB: ''
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ZeroFramework.ICanSetArchitecture.SetArchitecture
        path: ''
        startLine: 967
      syntax:
        content:
          CSharp: void ICanSetArchitecture.SetArchitecture(IArchitecture architecture)
        parameters:
        - id: architecture
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.AbstractCommand`1.ZeroFramework#ICanSetArchitecture#SetArchitecture*
      implements:
      - ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
    - isEii: true
      id: ZeroFramework.AbstractCommand`1.ZeroFramework#ICommand{TResult}#Execute
      commentId: M:ZeroFramework.AbstractCommand`1.ZeroFramework#ICommand{TResult}#Execute
      language: CSharp
      name:
        CSharp: ICommand<TResult>.Execute()
        VB: ''
      nameWithType:
        CSharp: AbstractCommand<TResult>.ICommand<TResult>.Execute()
        VB: ''
      qualifiedName:
        CSharp: ZeroFramework.AbstractCommand<TResult>.ZeroFramework.ICommand<TResult>.Execute()
        VB: ''
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ZeroFramework.ICommand<TResult>.Execute
        path: ''
        startLine: 969
      syntax:
        content:
          CSharp: TResult ICommand<TResult>.Execute()
        return:
          type: '{TResult}'
      overload: ZeroFramework.AbstractCommand`1.ZeroFramework#ICommand{TResult}#Execute*
      implements:
      - ZeroFramework.ICommand{{TResult}}.Execute
    - id: ZeroFramework.AbstractCommand`1.OnExecute
      commentId: M:ZeroFramework.AbstractCommand`1.OnExecute
      language: CSharp
      name:
        CSharp: OnExecute()
        VB: OnExecute()
      nameWithType:
        CSharp: AbstractCommand<TResult>.OnExecute()
        VB: AbstractCommand(Of TResult).OnExecute()
      qualifiedName:
        CSharp: ZeroFramework.AbstractCommand<TResult>.OnExecute()
        VB: ZeroFramework.AbstractCommand(Of TResult).OnExecute()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: OnExecute
        path: ''
        startLine: 971
      syntax:
        content:
          CSharp: protected abstract TResult OnExecute()
          VB: Protected MustOverride Function OnExecute() As TResult
        return:
          type: '{TResult}'
      overload: ZeroFramework.AbstractCommand`1.OnExecute*
  - id: ZeroFramework.IController
    commentId: T:ZeroFramework.IController
    language: CSharp
    name:
      CSharp: IController
      VB: IController
    nameWithType:
      CSharp: IController
      VB: IController
    qualifiedName:
      CSharp: ZeroFramework.IController
      VB: ZeroFramework.IController
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IController
      path: ''
      startLine: 988
    syntax:
      content:
        CSharp: 'public interface IController : ICanSendCommand, ICanGetSystem, ICanGetModel, ICanRegisterEvent, ICanSendQuery, ICanGetUtility, IBelongToArchitecture'
        VB: Public Interface IController Inherits ICanSendCommand, ICanGetSystem, ICanGetModel, ICanRegisterEvent, ICanSendQuery, ICanGetUtility, IBelongToArchitecture
    inheritedMembers:
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    items: []
  - id: ZeroFramework.IOCTypeContainer
    commentId: T:ZeroFramework.IOCTypeContainer
    language: CSharp
    name:
      CSharp: IOCTypeContainer
      VB: IOCTypeContainer
    nameWithType:
      CSharp: IOCTypeContainer
      VB: IOCTypeContainer
    qualifiedName:
      CSharp: ZeroFramework.IOCTypeContainer
      VB: ZeroFramework.IOCTypeContainer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IOCTypeContainer
      path: ''
      startLine: 1009
    syntax:
      content:
        CSharp: public class IOCTypeContainer
        VB: Public Class IOCTypeContainer
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.IOCTypeContainer.Register``1(``0)
      commentId: M:ZeroFramework.IOCTypeContainer.Register``1(``0)
      language: CSharp
      name:
        CSharp: Register<T>(T)
        VB: Register(Of T)(T)
      nameWithType:
        CSharp: IOCTypeContainer.Register<T>(T)
        VB: IOCTypeContainer.Register(Of T)(T)
      qualifiedName:
        CSharp: ZeroFramework.IOCTypeContainer.Register<T>(T)
        VB: ZeroFramework.IOCTypeContainer.Register(Of T)(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 1013
      syntax:
        content:
          CSharp: 'public void Register<T>(T instance) where T : class'
          VB: Public Sub Register(Of T As Class)(instance As T)
        parameters:
        - id: instance
          type: '{T}'
        typeParameters:
        - id: T
      overload: ZeroFramework.IOCTypeContainer.Register*
    - id: ZeroFramework.IOCTypeContainer.UnRegister``1
      commentId: M:ZeroFramework.IOCTypeContainer.UnRegister``1
      language: CSharp
      name:
        CSharp: UnRegister<T>()
        VB: UnRegister(Of T)()
      nameWithType:
        CSharp: IOCTypeContainer.UnRegister<T>()
        VB: IOCTypeContainer.UnRegister(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IOCTypeContainer.UnRegister<T>()
        VB: ZeroFramework.IOCTypeContainer.UnRegister(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1027
      syntax:
        content:
          CSharp: public void UnRegister<T>()
          VB: Public Sub UnRegister(Of T)()
        typeParameters:
        - id: T
      overload: ZeroFramework.IOCTypeContainer.UnRegister*
    - id: ZeroFramework.IOCTypeContainer.Containes``1
      commentId: M:ZeroFramework.IOCTypeContainer.Containes``1
      language: CSharp
      name:
        CSharp: Containes<T>()
        VB: Containes(Of T)()
      nameWithType:
        CSharp: IOCTypeContainer.Containes<T>()
        VB: IOCTypeContainer.Containes(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IOCTypeContainer.Containes<T>()
        VB: ZeroFramework.IOCTypeContainer.Containes(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Containes
        path: ''
        startLine: 1036
      syntax:
        content:
          CSharp: 'public bool Containes<T>() where T : class'
          VB: Public Function Containes(Of T As Class)() As Boolean
        typeParameters:
        - id: T
        return:
          type: System.Boolean
      overload: ZeroFramework.IOCTypeContainer.Containes*
    - id: ZeroFramework.IOCTypeContainer.Get``1
      commentId: M:ZeroFramework.IOCTypeContainer.Get``1
      language: CSharp
      name:
        CSharp: Get<T>()
        VB: Get(Of T)()
      nameWithType:
        CSharp: IOCTypeContainer.Get<T>()
        VB: IOCTypeContainer.Get(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IOCTypeContainer.Get<T>()
        VB: ZeroFramework.IOCTypeContainer.Get(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Get
        path: ''
        startLine: 1046
      syntax:
        content:
          CSharp: 'public T Get<T>() where T : class'
          VB: Public Function [Get](Of T As Class)() As T
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.IOCTypeContainer.Get*
    - id: ZeroFramework.IOCTypeContainer.GetInstancesByType``1
      commentId: M:ZeroFramework.IOCTypeContainer.GetInstancesByType``1
      language: CSharp
      name:
        CSharp: GetInstancesByType<T>()
        VB: GetInstancesByType(Of T)()
      nameWithType:
        CSharp: IOCTypeContainer.GetInstancesByType<T>()
        VB: IOCTypeContainer.GetInstancesByType(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IOCTypeContainer.GetInstancesByType<T>()
        VB: ZeroFramework.IOCTypeContainer.GetInstancesByType(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetInstancesByType
        path: ''
        startLine: 1056
      syntax:
        content:
          CSharp: public IEnumerable<T> GetInstancesByType<T>()
          VB: Public Function GetInstancesByType(Of T)() As IEnumerable(Of T)
        typeParameters:
        - id: T
        return:
          type: System.Collections.Generic.IEnumerable{{T}}
      overload: ZeroFramework.IOCTypeContainer.GetInstancesByType*
    - id: ZeroFramework.IOCTypeContainer.Clear
      commentId: M:ZeroFramework.IOCTypeContainer.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: IOCTypeContainer.Clear()
        VB: IOCTypeContainer.Clear()
      qualifiedName:
        CSharp: ZeroFramework.IOCTypeContainer.Clear()
        VB: ZeroFramework.IOCTypeContainer.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 1062
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: ZeroFramework.IOCTypeContainer.Clear*
  - id: ZeroFramework.IOCStrContainer
    commentId: T:ZeroFramework.IOCStrContainer
    language: CSharp
    name:
      CSharp: IOCStrContainer
      VB: IOCStrContainer
    nameWithType:
      CSharp: IOCStrContainer
      VB: IOCStrContainer
    qualifiedName:
      CSharp: ZeroFramework.IOCStrContainer
      VB: ZeroFramework.IOCStrContainer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IOCStrContainer
      path: ''
      startLine: 1065
    syntax:
      content:
        CSharp: public class IOCStrContainer
        VB: Public Class IOCStrContainer
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.IOCStrContainer.Register``1(System.String,``0)
      commentId: M:ZeroFramework.IOCStrContainer.Register``1(System.String,``0)
      language: CSharp
      name:
        CSharp: Register<T>(string, T)
        VB: Register(Of T)(String, T)
      nameWithType:
        CSharp: IOCStrContainer.Register<T>(string, T)
        VB: IOCStrContainer.Register(Of T)(String, T)
      qualifiedName:
        CSharp: ZeroFramework.IOCStrContainer.Register<T>(string, T)
        VB: ZeroFramework.IOCStrContainer.Register(Of T)(String, T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 1069
      syntax:
        content:
          CSharp: 'public void Register<T>(string key, T instance) where T : class'
          VB: Public Sub Register(Of T As Class)(key As String, instance As T)
        parameters:
        - id: key
          type: System.String
        - id: instance
          type: '{T}'
        typeParameters:
        - id: T
      overload: ZeroFramework.IOCStrContainer.Register*
    - id: ZeroFramework.IOCStrContainer.UnRegister(System.String)
      commentId: M:ZeroFramework.IOCStrContainer.UnRegister(System.String)
      language: CSharp
      name:
        CSharp: UnRegister(string)
        VB: UnRegister(String)
      nameWithType:
        CSharp: IOCStrContainer.UnRegister(string)
        VB: IOCStrContainer.UnRegister(String)
      qualifiedName:
        CSharp: ZeroFramework.IOCStrContainer.UnRegister(string)
        VB: ZeroFramework.IOCStrContainer.UnRegister(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1081
      syntax:
        content:
          CSharp: public void UnRegister(string key)
          VB: Public Sub UnRegister(key As String)
        parameters:
        - id: key
          type: System.String
      overload: ZeroFramework.IOCStrContainer.UnRegister*
    - id: ZeroFramework.IOCStrContainer.Containes(System.String)
      commentId: M:ZeroFramework.IOCStrContainer.Containes(System.String)
      language: CSharp
      name:
        CSharp: Containes(string)
        VB: Containes(String)
      nameWithType:
        CSharp: IOCStrContainer.Containes(string)
        VB: IOCStrContainer.Containes(String)
      qualifiedName:
        CSharp: ZeroFramework.IOCStrContainer.Containes(string)
        VB: ZeroFramework.IOCStrContainer.Containes(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Containes
        path: ''
        startLine: 1089
      syntax:
        content:
          CSharp: public bool Containes(string key)
          VB: Public Function Containes(key As String) As Boolean
        parameters:
        - id: key
          type: System.String
        return:
          type: System.Boolean
      overload: ZeroFramework.IOCStrContainer.Containes*
    - id: ZeroFramework.IOCStrContainer.Get``1(System.String)
      commentId: M:ZeroFramework.IOCStrContainer.Get``1(System.String)
      language: CSharp
      name:
        CSharp: Get<T>(string)
        VB: Get(Of T)(String)
      nameWithType:
        CSharp: IOCStrContainer.Get<T>(string)
        VB: IOCStrContainer.Get(Of T)(String)
      qualifiedName:
        CSharp: ZeroFramework.IOCStrContainer.Get<T>(string)
        VB: ZeroFramework.IOCStrContainer.Get(Of T)(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Get
        path: ''
        startLine: 1098
      syntax:
        content:
          CSharp: 'public T Get<T>(string key) where T : class'
          VB: Public Function [Get](Of T As Class)(key As String) As T
        parameters:
        - id: key
          type: System.String
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.IOCStrContainer.Get*
    - id: ZeroFramework.IOCStrContainer.Clear
      commentId: M:ZeroFramework.IOCStrContainer.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: IOCStrContainer.Clear()
        VB: IOCStrContainer.Clear()
      qualifiedName:
        CSharp: ZeroFramework.IOCStrContainer.Clear()
        VB: ZeroFramework.IOCStrContainer.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 1107
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: ZeroFramework.IOCStrContainer.Clear*
  - id: ZeroFramework.IOCTypeContainer`1
    commentId: T:ZeroFramework.IOCTypeContainer`1
    language: CSharp
    name:
      CSharp: IOCTypeContainer<TValue>
      VB: IOCTypeContainer(Of TValue)
    nameWithType:
      CSharp: IOCTypeContainer<TValue>
      VB: IOCTypeContainer(Of TValue)
    qualifiedName:
      CSharp: ZeroFramework.IOCTypeContainer<TValue>
      VB: ZeroFramework.IOCTypeContainer(Of TValue)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IOCTypeContainer
      path: ''
      startLine: 1110
    syntax:
      content:
        CSharp: 'public class IOCTypeContainer<TValue> where TValue : class'
        VB: Public Class IOCTypeContainer(Of TValue As Class)
      typeParameters:
      - id: TValue
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.IOCTypeContainer`1.Register``1(`0)
      commentId: M:ZeroFramework.IOCTypeContainer`1.Register``1(`0)
      language: CSharp
      name:
        CSharp: Register<T>(TValue)
        VB: Register(Of T)(TValue)
      nameWithType:
        CSharp: IOCTypeContainer<TValue>.Register<T>(TValue)
        VB: IOCTypeContainer(Of TValue).Register(Of T)(TValue)
      qualifiedName:
        CSharp: ZeroFramework.IOCTypeContainer<TValue>.Register<T>(TValue)
        VB: ZeroFramework.IOCTypeContainer(Of TValue).Register(Of T)(TValue)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 1114
      syntax:
        content:
          CSharp: 'public void Register<T>(TValue instance) where T : class'
          VB: Public Sub Register(Of T As Class)(instance As TValue)
        parameters:
        - id: instance
          type: '{TValue}'
        typeParameters:
        - id: T
      overload: ZeroFramework.IOCTypeContainer`1.Register*
    - id: ZeroFramework.IOCTypeContainer`1.UnRegister``1
      commentId: M:ZeroFramework.IOCTypeContainer`1.UnRegister``1
      language: CSharp
      name:
        CSharp: UnRegister<T>()
        VB: UnRegister(Of T)()
      nameWithType:
        CSharp: IOCTypeContainer<TValue>.UnRegister<T>()
        VB: IOCTypeContainer(Of TValue).UnRegister(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IOCTypeContainer<TValue>.UnRegister<T>()
        VB: ZeroFramework.IOCTypeContainer(Of TValue).UnRegister(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1128
      syntax:
        content:
          CSharp: public void UnRegister<T>()
          VB: Public Sub UnRegister(Of T)()
        typeParameters:
        - id: T
      overload: ZeroFramework.IOCTypeContainer`1.UnRegister*
    - id: ZeroFramework.IOCTypeContainer`1.Containes``1
      commentId: M:ZeroFramework.IOCTypeContainer`1.Containes``1
      language: CSharp
      name:
        CSharp: Containes<T>()
        VB: Containes(Of T)()
      nameWithType:
        CSharp: IOCTypeContainer<TValue>.Containes<T>()
        VB: IOCTypeContainer(Of TValue).Containes(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IOCTypeContainer<TValue>.Containes<T>()
        VB: ZeroFramework.IOCTypeContainer(Of TValue).Containes(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Containes
        path: ''
        startLine: 1137
      syntax:
        content:
          CSharp: 'public bool Containes<T>() where T : class'
          VB: Public Function Containes(Of T As Class)() As Boolean
        typeParameters:
        - id: T
        return:
          type: System.Boolean
      overload: ZeroFramework.IOCTypeContainer`1.Containes*
    - id: ZeroFramework.IOCTypeContainer`1.Get``1
      commentId: M:ZeroFramework.IOCTypeContainer`1.Get``1
      language: CSharp
      name:
        CSharp: Get<T>()
        VB: Get(Of T)()
      nameWithType:
        CSharp: IOCTypeContainer<TValue>.Get<T>()
        VB: IOCTypeContainer(Of TValue).Get(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IOCTypeContainer<TValue>.Get<T>()
        VB: ZeroFramework.IOCTypeContainer(Of TValue).Get(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Get
        path: ''
        startLine: 1147
      syntax:
        content:
          CSharp: 'public TValue Get<T>() where T : class'
          VB: Public Function [Get](Of T As Class)() As TValue
        typeParameters:
        - id: T
        return:
          type: '{TValue}'
      overload: ZeroFramework.IOCTypeContainer`1.Get*
    - id: ZeroFramework.IOCTypeContainer`1.GetInstancesByType``1
      commentId: M:ZeroFramework.IOCTypeContainer`1.GetInstancesByType``1
      language: CSharp
      name:
        CSharp: GetInstancesByType<T>()
        VB: GetInstancesByType(Of T)()
      nameWithType:
        CSharp: IOCTypeContainer<TValue>.GetInstancesByType<T>()
        VB: IOCTypeContainer(Of TValue).GetInstancesByType(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.IOCTypeContainer<TValue>.GetInstancesByType<T>()
        VB: ZeroFramework.IOCTypeContainer(Of TValue).GetInstancesByType(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetInstancesByType
        path: ''
        startLine: 1157
      syntax:
        content:
          CSharp: public IEnumerable<TValue> GetInstancesByType<T>()
          VB: Public Function GetInstancesByType(Of T)() As IEnumerable(Of TValue)
        typeParameters:
        - id: T
        return:
          type: System.Collections.Generic.IEnumerable{{TValue}}
      overload: ZeroFramework.IOCTypeContainer`1.GetInstancesByType*
    - id: ZeroFramework.IOCTypeContainer`1.Clear
      commentId: M:ZeroFramework.IOCTypeContainer`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: IOCTypeContainer<TValue>.Clear()
        VB: IOCTypeContainer(Of TValue).Clear()
      qualifiedName:
        CSharp: ZeroFramework.IOCTypeContainer<TValue>.Clear()
        VB: ZeroFramework.IOCTypeContainer(Of TValue).Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 1163
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: ZeroFramework.IOCTypeContainer`1.Clear*
  - id: ZeroFramework.IModel
    commentId: T:ZeroFramework.IModel
    language: CSharp
    name:
      CSharp: IModel
      VB: IModel
    nameWithType:
      CSharp: IModel
      VB: IModel
    qualifiedName:
      CSharp: ZeroFramework.IModel
      VB: ZeroFramework.IModel
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IModel
      path: ''
      startLine: 1180
    syntax:
      content:
        CSharp: 'public interface IModel : ICanSetArchitecture, ICanGetUtility, ICanSendEvent, IBelongToArchitecture, ICanInit'
        VB: Public Interface IModel Inherits ICanSetArchitecture, ICanGetUtility, ICanSendEvent, IBelongToArchitecture, ICanInit
    inheritedMembers:
    - ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    - ZeroFramework.ICanInit.Initialized
    - ZeroFramework.ICanInit.Init
    - ZeroFramework.ICanInit.Deinit
    items: []
  - id: ZeroFramework.AbstractModel
    commentId: T:ZeroFramework.AbstractModel
    language: CSharp
    name:
      CSharp: AbstractModel
      VB: AbstractModel
    nameWithType:
      CSharp: AbstractModel
      VB: AbstractModel
    qualifiedName:
      CSharp: ZeroFramework.AbstractModel
      VB: ZeroFramework.AbstractModel
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: AbstractModel
      path: ''
      startLine: 1183
    syntax:
      content:
        CSharp: 'public abstract class AbstractModel : IModel, ICanSetArchitecture, ICanGetUtility, ICanSendEvent, IBelongToArchitecture, ICanInit'
        VB: Public MustInherit Class AbstractModel Implements IModel, ICanSetArchitecture, ICanGetUtility, ICanSendEvent, IBelongToArchitecture, ICanInit
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.IModel
    - ZeroFramework.ICanSetArchitecture
    - ZeroFramework.ICanGetUtility
    - ZeroFramework.ICanSendEvent
    - ZeroFramework.IBelongToArchitecture
    - ZeroFramework.ICanInit
    items:
    - isEii: true
      id: ZeroFramework.AbstractModel.ZeroFramework#IBelongToArchitecture#GetArchitecture
      commentId: M:ZeroFramework.AbstractModel.ZeroFramework#IBelongToArchitecture#GetArchitecture
      language: CSharp
      name:
        CSharp: IBelongToArchitecture.GetArchitecture()
        VB: ''
      nameWithType:
        CSharp: AbstractModel.IBelongToArchitecture.GetArchitecture()
        VB: ''
      qualifiedName:
        CSharp: ZeroFramework.AbstractModel.ZeroFramework.IBelongToArchitecture.GetArchitecture()
        VB: ''
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ZeroFramework.IBelongToArchitecture.GetArchitecture
        path: ''
        startLine: 1187
      syntax:
        content:
          CSharp: IArchitecture IBelongToArchitecture.GetArchitecture()
        return:
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.AbstractModel.ZeroFramework#IBelongToArchitecture#GetArchitecture*
      implements:
      - ZeroFramework.IBelongToArchitecture.GetArchitecture
    - isEii: true
      id: ZeroFramework.AbstractModel.ZeroFramework#ICanSetArchitecture#SetArchitecture(ZeroFramework.IArchitecture)
      commentId: M:ZeroFramework.AbstractModel.ZeroFramework#ICanSetArchitecture#SetArchitecture(ZeroFramework.IArchitecture)
      language: CSharp
      name:
        CSharp: ICanSetArchitecture.SetArchitecture(IArchitecture)
        VB: ''
      nameWithType:
        CSharp: AbstractModel.ICanSetArchitecture.SetArchitecture(IArchitecture)
        VB: ''
      qualifiedName:
        CSharp: ZeroFramework.AbstractModel.ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
        VB: ''
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ZeroFramework.ICanSetArchitecture.SetArchitecture
        path: ''
        startLine: 1189
      syntax:
        content:
          CSharp: void ICanSetArchitecture.SetArchitecture(IArchitecture architecture)
        parameters:
        - id: architecture
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.AbstractModel.ZeroFramework#ICanSetArchitecture#SetArchitecture*
      implements:
      - ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
    - id: ZeroFramework.AbstractModel.Initialized
      commentId: P:ZeroFramework.AbstractModel.Initialized
      language: CSharp
      name:
        CSharp: Initialized
        VB: Initialized
      nameWithType:
        CSharp: AbstractModel.Initialized
        VB: AbstractModel.Initialized
      qualifiedName:
        CSharp: ZeroFramework.AbstractModel.Initialized
        VB: ZeroFramework.AbstractModel.Initialized
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Initialized
        path: ''
        startLine: 1191
      syntax:
        content:
          CSharp: public bool Initialized { get; set; }
          VB: Public Property Initialized As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: ZeroFramework.AbstractModel.Initialized*
      implements:
      - ZeroFramework.ICanInit.Initialized
    - isEii: true
      id: ZeroFramework.AbstractModel.ZeroFramework#ICanInit#Init
      commentId: M:ZeroFramework.AbstractModel.ZeroFramework#ICanInit#Init
      language: CSharp
      name:
        CSharp: ICanInit.Init()
        VB: ''
      nameWithType:
        CSharp: AbstractModel.ICanInit.Init()
        VB: ''
      qualifiedName:
        CSharp: ZeroFramework.AbstractModel.ZeroFramework.ICanInit.Init()
        VB: ''
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ZeroFramework.ICanInit.Init
        path: ''
        startLine: 1192
      syntax:
        content:
          CSharp: void ICanInit.Init()
      overload: ZeroFramework.AbstractModel.ZeroFramework#ICanInit#Init*
      implements:
      - ZeroFramework.ICanInit.Init
    - id: ZeroFramework.AbstractModel.Deinit
      commentId: M:ZeroFramework.AbstractModel.Deinit
      language: CSharp
      name:
        CSharp: Deinit()
        VB: Deinit()
      nameWithType:
        CSharp: AbstractModel.Deinit()
        VB: AbstractModel.Deinit()
      qualifiedName:
        CSharp: ZeroFramework.AbstractModel.Deinit()
        VB: ZeroFramework.AbstractModel.Deinit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Deinit
        path: ''
        startLine: 1193
      syntax:
        content:
          CSharp: public void Deinit()
          VB: Public Sub Deinit()
      overload: ZeroFramework.AbstractModel.Deinit*
      implements:
      - ZeroFramework.ICanInit.Deinit
    - id: ZeroFramework.AbstractModel.OnDeinit
      commentId: M:ZeroFramework.AbstractModel.OnDeinit
      language: CSharp
      name:
        CSharp: OnDeinit()
        VB: OnDeinit()
      nameWithType:
        CSharp: AbstractModel.OnDeinit()
        VB: AbstractModel.OnDeinit()
      qualifiedName:
        CSharp: ZeroFramework.AbstractModel.OnDeinit()
        VB: ZeroFramework.AbstractModel.OnDeinit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: OnDeinit
        path: ''
        startLine: 1195
      syntax:
        content:
          CSharp: protected virtual void OnDeinit()
          VB: Protected Overridable Sub OnDeinit()
      overload: ZeroFramework.AbstractModel.OnDeinit*
    - id: ZeroFramework.AbstractModel.OnInit
      commentId: M:ZeroFramework.AbstractModel.OnInit
      language: CSharp
      name:
        CSharp: OnInit()
        VB: OnInit()
      nameWithType:
        CSharp: AbstractModel.OnInit()
        VB: AbstractModel.OnInit()
      qualifiedName:
        CSharp: ZeroFramework.AbstractModel.OnInit()
        VB: ZeroFramework.AbstractModel.OnInit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: OnInit
        path: ''
        startLine: 1197
      syntax:
        content:
          CSharp: protected abstract void OnInit()
          VB: Protected MustOverride Sub OnInit()
      overload: ZeroFramework.AbstractModel.OnInit*
  - id: ZeroFramework.IQuery`1
    commentId: T:ZeroFramework.IQuery`1
    language: CSharp
    name:
      CSharp: IQuery<TResult>
      VB: IQuery(Of TResult)
    nameWithType:
      CSharp: IQuery<TResult>
      VB: IQuery(Of TResult)
    qualifiedName:
      CSharp: ZeroFramework.IQuery<TResult>
      VB: ZeroFramework.IQuery(Of TResult)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IQuery
      path: ''
      startLine: 1214
    syntax:
      content:
        CSharp: 'public interface IQuery<TResult> : ICanSetArchitecture, ICanGetModel, ICanGetSystem, ICanSendQuery, IBelongToArchitecture'
        VB: Public Interface IQuery(Of TResult) Inherits ICanSetArchitecture, ICanGetModel, ICanGetSystem, ICanSendQuery, IBelongToArchitecture
      typeParameters:
      - id: TResult
    inheritedMembers:
    - ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    items:
    - id: ZeroFramework.IQuery`1.Do
      commentId: M:ZeroFramework.IQuery`1.Do
      language: CSharp
      name:
        CSharp: Do()
        VB: Do()
      nameWithType:
        CSharp: IQuery<TResult>.Do()
        VB: IQuery(Of TResult).Do()
      qualifiedName:
        CSharp: ZeroFramework.IQuery<TResult>.Do()
        VB: ZeroFramework.IQuery(Of TResult).Do()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Do
        path: ''
        startLine: 1217
      syntax:
        content:
          CSharp: TResult Do()
          VB: Function [Do]() As TResult
        return:
          type: '{TResult}'
      overload: ZeroFramework.IQuery`1.Do*
  - id: ZeroFramework.AbstractQuery`1
    commentId: T:ZeroFramework.AbstractQuery`1
    language: CSharp
    name:
      CSharp: AbstractQuery<T>
      VB: AbstractQuery(Of T)
    nameWithType:
      CSharp: AbstractQuery<T>
      VB: AbstractQuery(Of T)
    qualifiedName:
      CSharp: ZeroFramework.AbstractQuery<T>
      VB: ZeroFramework.AbstractQuery(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: AbstractQuery
      path: ''
      startLine: 1220
    syntax:
      content:
        CSharp: 'public abstract class AbstractQuery<T> : IQuery<T>, ICanSetArchitecture, ICanGetModel, ICanGetSystem, ICanSendQuery, IBelongToArchitecture'
        VB: Public MustInherit Class AbstractQuery(Of T) Implements IQuery(Of T), ICanSetArchitecture, ICanGetModel, ICanGetSystem, ICanSendQuery, IBelongToArchitecture
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.IQuery{{T}}
    - ZeroFramework.ICanSetArchitecture
    - ZeroFramework.ICanGetModel
    - ZeroFramework.ICanGetSystem
    - ZeroFramework.ICanSendQuery
    - ZeroFramework.IBelongToArchitecture
    items:
    - id: ZeroFramework.AbstractQuery`1.Do
      commentId: M:ZeroFramework.AbstractQuery`1.Do
      language: CSharp
      name:
        CSharp: Do()
        VB: Do()
      nameWithType:
        CSharp: AbstractQuery<T>.Do()
        VB: AbstractQuery(Of T).Do()
      qualifiedName:
        CSharp: ZeroFramework.AbstractQuery<T>.Do()
        VB: ZeroFramework.AbstractQuery(Of T).Do()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Do
        path: ''
        startLine: 1222
      syntax:
        content:
          CSharp: public T Do()
          VB: Public Function [Do]() As T
        return:
          type: '{T}'
      overload: ZeroFramework.AbstractQuery`1.Do*
      implements:
      - ZeroFramework.IQuery{{T}}.Do
    - id: ZeroFramework.AbstractQuery`1.OnDo
      commentId: M:ZeroFramework.AbstractQuery`1.OnDo
      language: CSharp
      name:
        CSharp: OnDo()
        VB: OnDo()
      nameWithType:
        CSharp: AbstractQuery<T>.OnDo()
        VB: AbstractQuery(Of T).OnDo()
      qualifiedName:
        CSharp: ZeroFramework.AbstractQuery<T>.OnDo()
        VB: ZeroFramework.AbstractQuery(Of T).OnDo()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: OnDo
        path: ''
        startLine: 1224
      syntax:
        content:
          CSharp: protected abstract T OnDo()
          VB: Protected MustOverride Function OnDo() As T
        return:
          type: '{T}'
      overload: ZeroFramework.AbstractQuery`1.OnDo*
    - id: ZeroFramework.AbstractQuery`1.GetArchitecture
      commentId: M:ZeroFramework.AbstractQuery`1.GetArchitecture
      language: CSharp
      name:
        CSharp: GetArchitecture()
        VB: GetArchitecture()
      nameWithType:
        CSharp: AbstractQuery<T>.GetArchitecture()
        VB: AbstractQuery(Of T).GetArchitecture()
      qualifiedName:
        CSharp: ZeroFramework.AbstractQuery<T>.GetArchitecture()
        VB: ZeroFramework.AbstractQuery(Of T).GetArchitecture()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetArchitecture
        path: ''
        startLine: 1229
      syntax:
        content:
          CSharp: public IArchitecture GetArchitecture()
          VB: Public Function GetArchitecture() As IArchitecture
        return:
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.AbstractQuery`1.GetArchitecture*
      implements:
      - ZeroFramework.IBelongToArchitecture.GetArchitecture
    - id: ZeroFramework.AbstractQuery`1.SetArchitecture(ZeroFramework.IArchitecture)
      commentId: M:ZeroFramework.AbstractQuery`1.SetArchitecture(ZeroFramework.IArchitecture)
      language: CSharp
      name:
        CSharp: SetArchitecture(IArchitecture)
        VB: SetArchitecture(IArchitecture)
      nameWithType:
        CSharp: AbstractQuery<T>.SetArchitecture(IArchitecture)
        VB: AbstractQuery(Of T).SetArchitecture(IArchitecture)
      qualifiedName:
        CSharp: ZeroFramework.AbstractQuery<T>.SetArchitecture(ZeroFramework.IArchitecture)
        VB: ZeroFramework.AbstractQuery(Of T).SetArchitecture(ZeroFramework.IArchitecture)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SetArchitecture
        path: ''
        startLine: 1231
      syntax:
        content:
          CSharp: public void SetArchitecture(IArchitecture architecture)
          VB: Public Sub SetArchitecture(architecture As IArchitecture)
        parameters:
        - id: architecture
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.AbstractQuery`1.SetArchitecture*
      implements:
      - ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
  - id: ZeroFramework.IBelongToArchitecture
    commentId: T:ZeroFramework.IBelongToArchitecture
    language: CSharp
    name:
      CSharp: IBelongToArchitecture
      VB: IBelongToArchitecture
    nameWithType:
      CSharp: IBelongToArchitecture
      VB: IBelongToArchitecture
    qualifiedName:
      CSharp: ZeroFramework.IBelongToArchitecture
      VB: ZeroFramework.IBelongToArchitecture
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IBelongToArchitecture
      path: ''
      startLine: 1250
    syntax:
      content:
        CSharp: public interface IBelongToArchitecture
        VB: Public Interface IBelongToArchitecture
    items:
    - id: ZeroFramework.IBelongToArchitecture.GetArchitecture
      commentId: M:ZeroFramework.IBelongToArchitecture.GetArchitecture
      language: CSharp
      name:
        CSharp: GetArchitecture()
        VB: GetArchitecture()
      nameWithType:
        CSharp: IBelongToArchitecture.GetArchitecture()
        VB: IBelongToArchitecture.GetArchitecture()
      qualifiedName:
        CSharp: ZeroFramework.IBelongToArchitecture.GetArchitecture()
        VB: ZeroFramework.IBelongToArchitecture.GetArchitecture()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetArchitecture
        path: ''
        startLine: 1252
      syntax:
        content:
          CSharp: IArchitecture GetArchitecture()
          VB: Function GetArchitecture() As IArchitecture
        return:
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.IBelongToArchitecture.GetArchitecture*
  - id: ZeroFramework.ICanSetArchitecture
    commentId: T:ZeroFramework.ICanSetArchitecture
    language: CSharp
    name:
      CSharp: ICanSetArchitecture
      VB: ICanSetArchitecture
    nameWithType:
      CSharp: ICanSetArchitecture
      VB: ICanSetArchitecture
    qualifiedName:
      CSharp: ZeroFramework.ICanSetArchitecture
      VB: ZeroFramework.ICanSetArchitecture
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ICanSetArchitecture
      path: ''
      startLine: 1255
    syntax:
      content:
        CSharp: public interface ICanSetArchitecture
        VB: Public Interface ICanSetArchitecture
    items:
    - id: ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
      commentId: M:ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
      language: CSharp
      name:
        CSharp: SetArchitecture(IArchitecture)
        VB: SetArchitecture(IArchitecture)
      nameWithType:
        CSharp: ICanSetArchitecture.SetArchitecture(IArchitecture)
        VB: ICanSetArchitecture.SetArchitecture(IArchitecture)
      qualifiedName:
        CSharp: ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
        VB: ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SetArchitecture
        path: ''
        startLine: 1257
      syntax:
        content:
          CSharp: void SetArchitecture(IArchitecture architecture)
          VB: Sub SetArchitecture(architecture As IArchitecture)
        parameters:
        - id: architecture
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.ICanSetArchitecture.SetArchitecture*
  - id: ZeroFramework.ICanGetModel
    commentId: T:ZeroFramework.ICanGetModel
    language: CSharp
    name:
      CSharp: ICanGetModel
      VB: ICanGetModel
    nameWithType:
      CSharp: ICanGetModel
      VB: ICanGetModel
    qualifiedName:
      CSharp: ZeroFramework.ICanGetModel
      VB: ZeroFramework.ICanGetModel
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ICanGetModel
      path: ''
      startLine: 1260
    syntax:
      content:
        CSharp: 'public interface ICanGetModel : IBelongToArchitecture'
        VB: Public Interface ICanGetModel Inherits IBelongToArchitecture
    inheritedMembers:
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    items: []
  - id: ZeroFramework.CanGetModelExtension
    commentId: T:ZeroFramework.CanGetModelExtension
    language: CSharp
    name:
      CSharp: CanGetModelExtension
      VB: CanGetModelExtension
    nameWithType:
      CSharp: CanGetModelExtension
      VB: CanGetModelExtension
    qualifiedName:
      CSharp: ZeroFramework.CanGetModelExtension
      VB: ZeroFramework.CanGetModelExtension
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: CanGetModelExtension
      path: ''
      startLine: 1263
    syntax:
      content:
        CSharp: public static class CanGetModelExtension
        VB: Public Module CanGetModelExtension
    inheritance:
    - System.Object
    items:
    - isExtensionMethod: true
      id: ZeroFramework.CanGetModelExtension.GetModel``1(ZeroFramework.ICanGetModel)
      commentId: M:ZeroFramework.CanGetModelExtension.GetModel``1(ZeroFramework.ICanGetModel)
      language: CSharp
      name:
        CSharp: GetModel<T>(ICanGetModel)
        VB: GetModel(Of T)(ICanGetModel)
      nameWithType:
        CSharp: CanGetModelExtension.GetModel<T>(ICanGetModel)
        VB: CanGetModelExtension.GetModel(Of T)(ICanGetModel)
      qualifiedName:
        CSharp: ZeroFramework.CanGetModelExtension.GetModel<T>(ZeroFramework.ICanGetModel)
        VB: ZeroFramework.CanGetModelExtension.GetModel(Of T)(ZeroFramework.ICanGetModel)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetModel
        path: ''
        startLine: 1265
      syntax:
        content:
          CSharp: 'public static T GetModel<T>(this ICanGetModel self) where T : class, IModel'
          VB: Public Shared Function GetModel(Of T As {Class, IModel})(self As ICanGetModel) As T
        parameters:
        - id: self
          type: ZeroFramework.ICanGetModel
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.CanGetModelExtension.GetModel*
  - id: ZeroFramework.ICanGetSystem
    commentId: T:ZeroFramework.ICanGetSystem
    language: CSharp
    name:
      CSharp: ICanGetSystem
      VB: ICanGetSystem
    nameWithType:
      CSharp: ICanGetSystem
      VB: ICanGetSystem
    qualifiedName:
      CSharp: ZeroFramework.ICanGetSystem
      VB: ZeroFramework.ICanGetSystem
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ICanGetSystem
      path: ''
      startLine: 1269
    syntax:
      content:
        CSharp: 'public interface ICanGetSystem : IBelongToArchitecture'
        VB: Public Interface ICanGetSystem Inherits IBelongToArchitecture
    inheritedMembers:
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    items: []
  - id: ZeroFramework.CanGetSystemExtension
    commentId: T:ZeroFramework.CanGetSystemExtension
    language: CSharp
    name:
      CSharp: CanGetSystemExtension
      VB: CanGetSystemExtension
    nameWithType:
      CSharp: CanGetSystemExtension
      VB: CanGetSystemExtension
    qualifiedName:
      CSharp: ZeroFramework.CanGetSystemExtension
      VB: ZeroFramework.CanGetSystemExtension
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: CanGetSystemExtension
      path: ''
      startLine: 1272
    syntax:
      content:
        CSharp: public static class CanGetSystemExtension
        VB: Public Module CanGetSystemExtension
    inheritance:
    - System.Object
    items:
    - isExtensionMethod: true
      id: ZeroFramework.CanGetSystemExtension.GetSystem``1(ZeroFramework.ICanGetSystem)
      commentId: M:ZeroFramework.CanGetSystemExtension.GetSystem``1(ZeroFramework.ICanGetSystem)
      language: CSharp
      name:
        CSharp: GetSystem<T>(ICanGetSystem)
        VB: GetSystem(Of T)(ICanGetSystem)
      nameWithType:
        CSharp: CanGetSystemExtension.GetSystem<T>(ICanGetSystem)
        VB: CanGetSystemExtension.GetSystem(Of T)(ICanGetSystem)
      qualifiedName:
        CSharp: ZeroFramework.CanGetSystemExtension.GetSystem<T>(ZeroFramework.ICanGetSystem)
        VB: ZeroFramework.CanGetSystemExtension.GetSystem(Of T)(ZeroFramework.ICanGetSystem)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetSystem
        path: ''
        startLine: 1274
      syntax:
        content:
          CSharp: 'public static T GetSystem<T>(this ICanGetSystem self) where T : class, ISystem'
          VB: Public Shared Function GetSystem(Of T As {Class, ISystem})(self As ICanGetSystem) As T
        parameters:
        - id: self
          type: ZeroFramework.ICanGetSystem
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.CanGetSystemExtension.GetSystem*
  - id: ZeroFramework.ICanGetUtility
    commentId: T:ZeroFramework.ICanGetUtility
    language: CSharp
    name:
      CSharp: ICanGetUtility
      VB: ICanGetUtility
    nameWithType:
      CSharp: ICanGetUtility
      VB: ICanGetUtility
    qualifiedName:
      CSharp: ZeroFramework.ICanGetUtility
      VB: ZeroFramework.ICanGetUtility
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ICanGetUtility
      path: ''
      startLine: 1278
    syntax:
      content:
        CSharp: 'public interface ICanGetUtility : IBelongToArchitecture'
        VB: Public Interface ICanGetUtility Inherits IBelongToArchitecture
    inheritedMembers:
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    items: []
  - id: ZeroFramework.CanGetUtilityExtension
    commentId: T:ZeroFramework.CanGetUtilityExtension
    language: CSharp
    name:
      CSharp: CanGetUtilityExtension
      VB: CanGetUtilityExtension
    nameWithType:
      CSharp: CanGetUtilityExtension
      VB: CanGetUtilityExtension
    qualifiedName:
      CSharp: ZeroFramework.CanGetUtilityExtension
      VB: ZeroFramework.CanGetUtilityExtension
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: CanGetUtilityExtension
      path: ''
      startLine: 1281
    syntax:
      content:
        CSharp: public static class CanGetUtilityExtension
        VB: Public Module CanGetUtilityExtension
    inheritance:
    - System.Object
    items:
    - isExtensionMethod: true
      id: ZeroFramework.CanGetUtilityExtension.GetUtility``1(ZeroFramework.ICanGetUtility)
      commentId: M:ZeroFramework.CanGetUtilityExtension.GetUtility``1(ZeroFramework.ICanGetUtility)
      language: CSharp
      name:
        CSharp: GetUtility<T>(ICanGetUtility)
        VB: GetUtility(Of T)(ICanGetUtility)
      nameWithType:
        CSharp: CanGetUtilityExtension.GetUtility<T>(ICanGetUtility)
        VB: CanGetUtilityExtension.GetUtility(Of T)(ICanGetUtility)
      qualifiedName:
        CSharp: ZeroFramework.CanGetUtilityExtension.GetUtility<T>(ZeroFramework.ICanGetUtility)
        VB: ZeroFramework.CanGetUtilityExtension.GetUtility(Of T)(ZeroFramework.ICanGetUtility)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetUtility
        path: ''
        startLine: 1283
      syntax:
        content:
          CSharp: 'public static T GetUtility<T>(this ICanGetUtility self) where T : class, IUtility'
          VB: Public Shared Function GetUtility(Of T As {Class, IUtility})(self As ICanGetUtility) As T
        parameters:
        - id: self
          type: ZeroFramework.ICanGetUtility
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.CanGetUtilityExtension.GetUtility*
  - id: ZeroFramework.ICanRegisterEvent
    commentId: T:ZeroFramework.ICanRegisterEvent
    language: CSharp
    name:
      CSharp: ICanRegisterEvent
      VB: ICanRegisterEvent
    nameWithType:
      CSharp: ICanRegisterEvent
      VB: ICanRegisterEvent
    qualifiedName:
      CSharp: ZeroFramework.ICanRegisterEvent
      VB: ZeroFramework.ICanRegisterEvent
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ICanRegisterEvent
      path: ''
      startLine: 1287
    syntax:
      content:
        CSharp: 'public interface ICanRegisterEvent : IBelongToArchitecture'
        VB: Public Interface ICanRegisterEvent Inherits IBelongToArchitecture
    inheritedMembers:
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    items: []
  - id: ZeroFramework.CanRegisterEventExtension
    commentId: T:ZeroFramework.CanRegisterEventExtension
    language: CSharp
    name:
      CSharp: CanRegisterEventExtension
      VB: CanRegisterEventExtension
    nameWithType:
      CSharp: CanRegisterEventExtension
      VB: CanRegisterEventExtension
    qualifiedName:
      CSharp: ZeroFramework.CanRegisterEventExtension
      VB: ZeroFramework.CanRegisterEventExtension
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: CanRegisterEventExtension
      path: ''
      startLine: 1290
    syntax:
      content:
        CSharp: public static class CanRegisterEventExtension
        VB: Public Module CanRegisterEventExtension
    inheritance:
    - System.Object
    items:
    - isExtensionMethod: true
      id: ZeroFramework.CanRegisterEventExtension.RegisterEvent``1(ZeroFramework.ICanRegisterEvent,Action{``0})
      commentId: M:ZeroFramework.CanRegisterEventExtension.RegisterEvent``1(ZeroFramework.ICanRegisterEvent,Action{``0})
      language: CSharp
      name:
        CSharp: RegisterEvent<T>(ICanRegisterEvent, Action<T>)
        VB: RegisterEvent(Of T)(ICanRegisterEvent, Action(Of T))
      nameWithType:
        CSharp: CanRegisterEventExtension.RegisterEvent<T>(ICanRegisterEvent, Action<T>)
        VB: CanRegisterEventExtension.RegisterEvent(Of T)(ICanRegisterEvent, Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.CanRegisterEventExtension.RegisterEvent<T>(ZeroFramework.ICanRegisterEvent, Action<T>)
        VB: ZeroFramework.CanRegisterEventExtension.RegisterEvent(Of T)(ZeroFramework.ICanRegisterEvent, Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterEvent
        path: ''
        startLine: 1292
      syntax:
        content:
          CSharp: public static IUnRegister RegisterEvent<T>(this ICanRegisterEvent self, Action<T> onEvent)
          VB: Public Shared Function RegisterEvent(Of T)(self As ICanRegisterEvent, onEvent As Action(Of T)) As IUnRegister
        parameters:
        - id: self
          type: ZeroFramework.ICanRegisterEvent
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.CanRegisterEventExtension.RegisterEvent*
    - isExtensionMethod: true
      id: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent``1(ZeroFramework.ICanRegisterEvent,Action{``0})
      commentId: M:ZeroFramework.CanRegisterEventExtension.UnRegisterEvent``1(ZeroFramework.ICanRegisterEvent,Action{``0})
      language: CSharp
      name:
        CSharp: UnRegisterEvent<T>(ICanRegisterEvent, Action<T>)
        VB: UnRegisterEvent(Of T)(ICanRegisterEvent, Action(Of T))
      nameWithType:
        CSharp: CanRegisterEventExtension.UnRegisterEvent<T>(ICanRegisterEvent, Action<T>)
        VB: CanRegisterEventExtension.UnRegisterEvent(Of T)(ICanRegisterEvent, Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent<T>(ZeroFramework.ICanRegisterEvent, Action<T>)
        VB: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent(Of T)(ZeroFramework.ICanRegisterEvent, Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterEvent
        path: ''
        startLine: 1295
      syntax:
        content:
          CSharp: public static void UnRegisterEvent<T>(this ICanRegisterEvent self, Action<T> onEvent)
          VB: Public Shared Sub UnRegisterEvent(Of T)(self As ICanRegisterEvent, onEvent As Action(Of T))
        parameters:
        - id: self
          type: ZeroFramework.ICanRegisterEvent
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
      overload: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent*
    - isExtensionMethod: true
      id: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent``1(ZeroFramework.ICanRegisterEvent)
      commentId: M:ZeroFramework.CanRegisterEventExtension.UnRegisterEvent``1(ZeroFramework.ICanRegisterEvent)
      language: CSharp
      name:
        CSharp: UnRegisterEvent<T>(ICanRegisterEvent)
        VB: UnRegisterEvent(Of T)(ICanRegisterEvent)
      nameWithType:
        CSharp: CanRegisterEventExtension.UnRegisterEvent<T>(ICanRegisterEvent)
        VB: CanRegisterEventExtension.UnRegisterEvent(Of T)(ICanRegisterEvent)
      qualifiedName:
        CSharp: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent<T>(ZeroFramework.ICanRegisterEvent)
        VB: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent(Of T)(ZeroFramework.ICanRegisterEvent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterEvent
        path: ''
        startLine: 1298
      syntax:
        content:
          CSharp: public static void UnRegisterEvent<T>(this ICanRegisterEvent self)
          VB: Public Shared Sub UnRegisterEvent(Of T)(self As ICanRegisterEvent)
        parameters:
        - id: self
          type: ZeroFramework.ICanRegisterEvent
        typeParameters:
        - id: T
      overload: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent*
  - id: ZeroFramework.ICanSendEvent
    commentId: T:ZeroFramework.ICanSendEvent
    language: CSharp
    name:
      CSharp: ICanSendEvent
      VB: ICanSendEvent
    nameWithType:
      CSharp: ICanSendEvent
      VB: ICanSendEvent
    qualifiedName:
      CSharp: ZeroFramework.ICanSendEvent
      VB: ZeroFramework.ICanSendEvent
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ICanSendEvent
      path: ''
      startLine: 1302
    syntax:
      content:
        CSharp: 'public interface ICanSendEvent : IBelongToArchitecture'
        VB: Public Interface ICanSendEvent Inherits IBelongToArchitecture
    inheritedMembers:
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    items: []
  - id: ZeroFramework.CanSendEventExtension
    commentId: T:ZeroFramework.CanSendEventExtension
    language: CSharp
    name:
      CSharp: CanSendEventExtension
      VB: CanSendEventExtension
    nameWithType:
      CSharp: CanSendEventExtension
      VB: CanSendEventExtension
    qualifiedName:
      CSharp: ZeroFramework.CanSendEventExtension
      VB: ZeroFramework.CanSendEventExtension
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: CanSendEventExtension
      path: ''
      startLine: 1305
    syntax:
      content:
        CSharp: public static class CanSendEventExtension
        VB: Public Module CanSendEventExtension
    inheritance:
    - System.Object
    items:
    - isExtensionMethod: true
      id: ZeroFramework.CanSendEventExtension.SendEvent``1(ZeroFramework.ICanSendEvent)
      commentId: M:ZeroFramework.CanSendEventExtension.SendEvent``1(ZeroFramework.ICanSendEvent)
      language: CSharp
      name:
        CSharp: SendEvent<T>(ICanSendEvent)
        VB: SendEvent(Of T)(ICanSendEvent)
      nameWithType:
        CSharp: CanSendEventExtension.SendEvent<T>(ICanSendEvent)
        VB: CanSendEventExtension.SendEvent(Of T)(ICanSendEvent)
      qualifiedName:
        CSharp: ZeroFramework.CanSendEventExtension.SendEvent<T>(ZeroFramework.ICanSendEvent)
        VB: ZeroFramework.CanSendEventExtension.SendEvent(Of T)(ZeroFramework.ICanSendEvent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendEvent
        path: ''
        startLine: 1307
      syntax:
        content:
          CSharp: 'public static void SendEvent<T>(this ICanSendEvent self) where T : new()'
          VB: Public Shared Sub SendEvent(Of T As New)(self As ICanSendEvent)
        parameters:
        - id: self
          type: ZeroFramework.ICanSendEvent
        typeParameters:
        - id: T
      overload: ZeroFramework.CanSendEventExtension.SendEvent*
    - isExtensionMethod: true
      id: ZeroFramework.CanSendEventExtension.SendEvent``1(ZeroFramework.ICanSendEvent,``0)
      commentId: M:ZeroFramework.CanSendEventExtension.SendEvent``1(ZeroFramework.ICanSendEvent,``0)
      language: CSharp
      name:
        CSharp: SendEvent<T>(ICanSendEvent, T)
        VB: SendEvent(Of T)(ICanSendEvent, T)
      nameWithType:
        CSharp: CanSendEventExtension.SendEvent<T>(ICanSendEvent, T)
        VB: CanSendEventExtension.SendEvent(Of T)(ICanSendEvent, T)
      qualifiedName:
        CSharp: ZeroFramework.CanSendEventExtension.SendEvent<T>(ZeroFramework.ICanSendEvent, T)
        VB: ZeroFramework.CanSendEventExtension.SendEvent(Of T)(ZeroFramework.ICanSendEvent, T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendEvent
        path: ''
        startLine: 1310
      syntax:
        content:
          CSharp: public static void SendEvent<T>(this ICanSendEvent self, T e)
          VB: Public Shared Sub SendEvent(Of T)(self As ICanSendEvent, e As T)
        parameters:
        - id: self
          type: ZeroFramework.ICanSendEvent
        - id: e
          type: '{T}'
        typeParameters:
        - id: T
      overload: ZeroFramework.CanSendEventExtension.SendEvent*
  - id: ZeroFramework.ICanSendCommand
    commentId: T:ZeroFramework.ICanSendCommand
    language: CSharp
    name:
      CSharp: ICanSendCommand
      VB: ICanSendCommand
    nameWithType:
      CSharp: ICanSendCommand
      VB: ICanSendCommand
    qualifiedName:
      CSharp: ZeroFramework.ICanSendCommand
      VB: ZeroFramework.ICanSendCommand
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ICanSendCommand
      path: ''
      startLine: 1313
    syntax:
      content:
        CSharp: 'public interface ICanSendCommand : IBelongToArchitecture'
        VB: Public Interface ICanSendCommand Inherits IBelongToArchitecture
    inheritedMembers:
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    items: []
  - id: ZeroFramework.CanSendCommandExtension
    commentId: T:ZeroFramework.CanSendCommandExtension
    language: CSharp
    name:
      CSharp: CanSendCommandExtension
      VB: CanSendCommandExtension
    nameWithType:
      CSharp: CanSendCommandExtension
      VB: CanSendCommandExtension
    qualifiedName:
      CSharp: ZeroFramework.CanSendCommandExtension
      VB: ZeroFramework.CanSendCommandExtension
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: CanSendCommandExtension
      path: ''
      startLine: 1316
    syntax:
      content:
        CSharp: public static class CanSendCommandExtension
        VB: Public Module CanSendCommandExtension
    inheritance:
    - System.Object
    items:
    - isExtensionMethod: true
      id: ZeroFramework.CanSendCommandExtension.SendCommand``1(ZeroFramework.ICanSendCommand)
      commentId: M:ZeroFramework.CanSendCommandExtension.SendCommand``1(ZeroFramework.ICanSendCommand)
      language: CSharp
      name:
        CSharp: SendCommand<T>(ICanSendCommand)
        VB: SendCommand(Of T)(ICanSendCommand)
      nameWithType:
        CSharp: CanSendCommandExtension.SendCommand<T>(ICanSendCommand)
        VB: CanSendCommandExtension.SendCommand(Of T)(ICanSendCommand)
      qualifiedName:
        CSharp: ZeroFramework.CanSendCommandExtension.SendCommand<T>(ZeroFramework.ICanSendCommand)
        VB: ZeroFramework.CanSendCommandExtension.SendCommand(Of T)(ZeroFramework.ICanSendCommand)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendCommand
        path: ''
        startLine: 1318
      syntax:
        content:
          CSharp: 'public static void SendCommand<T>(this ICanSendCommand self) where T : ICommand, new()'
          VB: Public Shared Sub SendCommand(Of T As {ICommand, New})(self As ICanSendCommand)
        parameters:
        - id: self
          type: ZeroFramework.ICanSendCommand
        typeParameters:
        - id: T
      overload: ZeroFramework.CanSendCommandExtension.SendCommand*
    - isExtensionMethod: true
      id: ZeroFramework.CanSendCommandExtension.SendCommand``1(ZeroFramework.ICanSendCommand,``0)
      commentId: M:ZeroFramework.CanSendCommandExtension.SendCommand``1(ZeroFramework.ICanSendCommand,``0)
      language: CSharp
      name:
        CSharp: SendCommand<T>(ICanSendCommand, T)
        VB: SendCommand(Of T)(ICanSendCommand, T)
      nameWithType:
        CSharp: CanSendCommandExtension.SendCommand<T>(ICanSendCommand, T)
        VB: CanSendCommandExtension.SendCommand(Of T)(ICanSendCommand, T)
      qualifiedName:
        CSharp: ZeroFramework.CanSendCommandExtension.SendCommand<T>(ZeroFramework.ICanSendCommand, T)
        VB: ZeroFramework.CanSendCommandExtension.SendCommand(Of T)(ZeroFramework.ICanSendCommand, T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendCommand
        path: ''
        startLine: 1321
      syntax:
        content:
          CSharp: 'public static void SendCommand<T>(this ICanSendCommand self, T command) where T : ICommand'
          VB: Public Shared Sub SendCommand(Of T As ICommand)(self As ICanSendCommand, command As T)
        parameters:
        - id: self
          type: ZeroFramework.ICanSendCommand
        - id: command
          type: '{T}'
        typeParameters:
        - id: T
      overload: ZeroFramework.CanSendCommandExtension.SendCommand*
    - isExtensionMethod: true
      id: ZeroFramework.CanSendCommandExtension.SendCommand``1(ZeroFramework.ICanSendCommand,ZeroFramework.ICommand{``0})
      commentId: M:ZeroFramework.CanSendCommandExtension.SendCommand``1(ZeroFramework.ICanSendCommand,ZeroFramework.ICommand{``0})
      language: CSharp
      name:
        CSharp: SendCommand<TResult>(ICanSendCommand, ICommand<TResult>)
        VB: SendCommand(Of TResult)(ICanSendCommand, ICommand(Of TResult))
      nameWithType:
        CSharp: CanSendCommandExtension.SendCommand<TResult>(ICanSendCommand, ICommand<TResult>)
        VB: CanSendCommandExtension.SendCommand(Of TResult)(ICanSendCommand, ICommand(Of TResult))
      qualifiedName:
        CSharp: ZeroFramework.CanSendCommandExtension.SendCommand<TResult>(ZeroFramework.ICanSendCommand, ZeroFramework.ICommand<TResult>)
        VB: ZeroFramework.CanSendCommandExtension.SendCommand(Of TResult)(ZeroFramework.ICanSendCommand, ZeroFramework.ICommand(Of TResult))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendCommand
        path: ''
        startLine: 1324
      syntax:
        content:
          CSharp: public static TResult SendCommand<TResult>(this ICanSendCommand self, ICommand<TResult> command)
          VB: Public Shared Function SendCommand(Of TResult)(self As ICanSendCommand, command As ICommand(Of TResult)) As TResult
        parameters:
        - id: self
          type: ZeroFramework.ICanSendCommand
        - id: command
          type: ZeroFramework.ICommand{{TResult}}
        typeParameters:
        - id: TResult
        return:
          type: '{TResult}'
      overload: ZeroFramework.CanSendCommandExtension.SendCommand*
  - id: ZeroFramework.ICanSendQuery
    commentId: T:ZeroFramework.ICanSendQuery
    language: CSharp
    name:
      CSharp: ICanSendQuery
      VB: ICanSendQuery
    nameWithType:
      CSharp: ICanSendQuery
      VB: ICanSendQuery
    qualifiedName:
      CSharp: ZeroFramework.ICanSendQuery
      VB: ZeroFramework.ICanSendQuery
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ICanSendQuery
      path: ''
      startLine: 1328
    syntax:
      content:
        CSharp: 'public interface ICanSendQuery : IBelongToArchitecture'
        VB: Public Interface ICanSendQuery Inherits IBelongToArchitecture
    inheritedMembers:
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    items: []
  - id: ZeroFramework.CanSendQueryExtension
    commentId: T:ZeroFramework.CanSendQueryExtension
    language: CSharp
    name:
      CSharp: CanSendQueryExtension
      VB: CanSendQueryExtension
    nameWithType:
      CSharp: CanSendQueryExtension
      VB: CanSendQueryExtension
    qualifiedName:
      CSharp: ZeroFramework.CanSendQueryExtension
      VB: ZeroFramework.CanSendQueryExtension
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: CanSendQueryExtension
      path: ''
      startLine: 1331
    syntax:
      content:
        CSharp: public static class CanSendQueryExtension
        VB: Public Module CanSendQueryExtension
    inheritance:
    - System.Object
    items:
    - isExtensionMethod: true
      id: ZeroFramework.CanSendQueryExtension.SendQuery``1(ZeroFramework.ICanSendQuery,ZeroFramework.IQuery{``0})
      commentId: M:ZeroFramework.CanSendQueryExtension.SendQuery``1(ZeroFramework.ICanSendQuery,ZeroFramework.IQuery{``0})
      language: CSharp
      name:
        CSharp: SendQuery<TResult>(ICanSendQuery, IQuery<TResult>)
        VB: SendQuery(Of TResult)(ICanSendQuery, IQuery(Of TResult))
      nameWithType:
        CSharp: CanSendQueryExtension.SendQuery<TResult>(ICanSendQuery, IQuery<TResult>)
        VB: CanSendQueryExtension.SendQuery(Of TResult)(ICanSendQuery, IQuery(Of TResult))
      qualifiedName:
        CSharp: ZeroFramework.CanSendQueryExtension.SendQuery<TResult>(ZeroFramework.ICanSendQuery, ZeroFramework.IQuery<TResult>)
        VB: ZeroFramework.CanSendQueryExtension.SendQuery(Of TResult)(ZeroFramework.ICanSendQuery, ZeroFramework.IQuery(Of TResult))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SendQuery
        path: ''
        startLine: 1333
      syntax:
        content:
          CSharp: public static TResult SendQuery<TResult>(this ICanSendQuery self, IQuery<TResult> query)
          VB: Public Shared Function SendQuery(Of TResult)(self As ICanSendQuery, query As IQuery(Of TResult)) As TResult
        parameters:
        - id: self
          type: ZeroFramework.ICanSendQuery
        - id: query
          type: ZeroFramework.IQuery{{TResult}}
        typeParameters:
        - id: TResult
        return:
          type: '{TResult}'
      overload: ZeroFramework.CanSendQueryExtension.SendQuery*
  - id: ZeroFramework.ICanInit
    commentId: T:ZeroFramework.ICanInit
    language: CSharp
    name:
      CSharp: ICanInit
      VB: ICanInit
    nameWithType:
      CSharp: ICanInit
      VB: ICanInit
    qualifiedName:
      CSharp: ZeroFramework.ICanInit
      VB: ZeroFramework.ICanInit
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ICanInit
      path: ''
      startLine: 1337
    syntax:
      content:
        CSharp: public interface ICanInit
        VB: Public Interface ICanInit
    items:
    - id: ZeroFramework.ICanInit.Initialized
      commentId: P:ZeroFramework.ICanInit.Initialized
      language: CSharp
      name:
        CSharp: Initialized
        VB: Initialized
      nameWithType:
        CSharp: ICanInit.Initialized
        VB: ICanInit.Initialized
      qualifiedName:
        CSharp: ZeroFramework.ICanInit.Initialized
        VB: ZeroFramework.ICanInit.Initialized
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Initialized
        path: ''
        startLine: 1339
      syntax:
        content:
          CSharp: bool Initialized { get; set; }
          VB: Property Initialized As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: ZeroFramework.ICanInit.Initialized*
    - id: ZeroFramework.ICanInit.Init
      commentId: M:ZeroFramework.ICanInit.Init
      language: CSharp
      name:
        CSharp: Init()
        VB: Init()
      nameWithType:
        CSharp: ICanInit.Init()
        VB: ICanInit.Init()
      qualifiedName:
        CSharp: ZeroFramework.ICanInit.Init()
        VB: ZeroFramework.ICanInit.Init()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Init
        path: ''
        startLine: 1340
      syntax:
        content:
          CSharp: void Init()
          VB: Sub Init()
      overload: ZeroFramework.ICanInit.Init*
    - id: ZeroFramework.ICanInit.Deinit
      commentId: M:ZeroFramework.ICanInit.Deinit
      language: CSharp
      name:
        CSharp: Deinit()
        VB: Deinit()
      nameWithType:
        CSharp: ICanInit.Deinit()
        VB: ICanInit.Deinit()
      qualifiedName:
        CSharp: ZeroFramework.ICanInit.Deinit()
        VB: ZeroFramework.ICanInit.Deinit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Deinit
        path: ''
        startLine: 1341
      syntax:
        content:
          CSharp: void Deinit()
          VB: Sub Deinit()
      overload: ZeroFramework.ICanInit.Deinit*
  - id: ZeroFramework.ISystem
    commentId: T:ZeroFramework.ISystem
    language: CSharp
    name:
      CSharp: ISystem
      VB: ISystem
    nameWithType:
      CSharp: ISystem
      VB: ISystem
    qualifiedName:
      CSharp: ZeroFramework.ISystem
      VB: ZeroFramework.ISystem
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ISystem
      path: ''
      startLine: 1358
    syntax:
      content:
        CSharp: 'public interface ISystem : ICanSetArchitecture, ICanGetModel, ICanGetUtility, ICanRegisterEvent, ICanSendEvent, ICanGetSystem, IBelongToArchitecture, ICanInit'
        VB: Public Interface ISystem Inherits ICanSetArchitecture, ICanGetModel, ICanGetUtility, ICanRegisterEvent, ICanSendEvent, ICanGetSystem, IBelongToArchitecture, ICanInit
    inheritedMembers:
    - ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    - ZeroFramework.ICanInit.Initialized
    - ZeroFramework.ICanInit.Init
    - ZeroFramework.ICanInit.Deinit
    items: []
  - id: ZeroFramework.AbstractSystem
    commentId: T:ZeroFramework.AbstractSystem
    language: CSharp
    name:
      CSharp: AbstractSystem
      VB: AbstractSystem
    nameWithType:
      CSharp: AbstractSystem
      VB: AbstractSystem
    qualifiedName:
      CSharp: ZeroFramework.AbstractSystem
      VB: ZeroFramework.AbstractSystem
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: AbstractSystem
      path: ''
      startLine: 1362
    syntax:
      content:
        CSharp: 'public abstract class AbstractSystem : ISystem, ICanSetArchitecture, ICanGetModel, ICanGetUtility, ICanRegisterEvent, ICanSendEvent, ICanGetSystem, IBelongToArchitecture, ICanInit'
        VB: Public MustInherit Class AbstractSystem Implements ISystem, ICanSetArchitecture, ICanGetModel, ICanGetUtility, ICanRegisterEvent, ICanSendEvent, ICanGetSystem, IBelongToArchitecture, ICanInit
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.ISystem
    - ZeroFramework.ICanSetArchitecture
    - ZeroFramework.ICanGetModel
    - ZeroFramework.ICanGetUtility
    - ZeroFramework.ICanRegisterEvent
    - ZeroFramework.ICanSendEvent
    - ZeroFramework.ICanGetSystem
    - ZeroFramework.IBelongToArchitecture
    - ZeroFramework.ICanInit
    items:
    - isEii: true
      id: ZeroFramework.AbstractSystem.ZeroFramework#IBelongToArchitecture#GetArchitecture
      commentId: M:ZeroFramework.AbstractSystem.ZeroFramework#IBelongToArchitecture#GetArchitecture
      language: CSharp
      name:
        CSharp: IBelongToArchitecture.GetArchitecture()
        VB: ''
      nameWithType:
        CSharp: AbstractSystem.IBelongToArchitecture.GetArchitecture()
        VB: ''
      qualifiedName:
        CSharp: ZeroFramework.AbstractSystem.ZeroFramework.IBelongToArchitecture.GetArchitecture()
        VB: ''
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ZeroFramework.IBelongToArchitecture.GetArchitecture
        path: ''
        startLine: 1366
      syntax:
        content:
          CSharp: IArchitecture IBelongToArchitecture.GetArchitecture()
        return:
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.AbstractSystem.ZeroFramework#IBelongToArchitecture#GetArchitecture*
      implements:
      - ZeroFramework.IBelongToArchitecture.GetArchitecture
    - isEii: true
      id: ZeroFramework.AbstractSystem.ZeroFramework#ICanSetArchitecture#SetArchitecture(ZeroFramework.IArchitecture)
      commentId: M:ZeroFramework.AbstractSystem.ZeroFramework#ICanSetArchitecture#SetArchitecture(ZeroFramework.IArchitecture)
      language: CSharp
      name:
        CSharp: ICanSetArchitecture.SetArchitecture(IArchitecture)
        VB: ''
      nameWithType:
        CSharp: AbstractSystem.ICanSetArchitecture.SetArchitecture(IArchitecture)
        VB: ''
      qualifiedName:
        CSharp: ZeroFramework.AbstractSystem.ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
        VB: ''
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ZeroFramework.ICanSetArchitecture.SetArchitecture
        path: ''
        startLine: 1368
      syntax:
        content:
          CSharp: void ICanSetArchitecture.SetArchitecture(IArchitecture architecture)
        parameters:
        - id: architecture
          type: ZeroFramework.IArchitecture
      overload: ZeroFramework.AbstractSystem.ZeroFramework#ICanSetArchitecture#SetArchitecture*
      implements:
      - ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
    - id: ZeroFramework.AbstractSystem.Initialized
      commentId: P:ZeroFramework.AbstractSystem.Initialized
      language: CSharp
      name:
        CSharp: Initialized
        VB: Initialized
      nameWithType:
        CSharp: AbstractSystem.Initialized
        VB: AbstractSystem.Initialized
      qualifiedName:
        CSharp: ZeroFramework.AbstractSystem.Initialized
        VB: ZeroFramework.AbstractSystem.Initialized
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Initialized
        path: ''
        startLine: 1370
      syntax:
        content:
          CSharp: public bool Initialized { get; set; }
          VB: Public Property Initialized As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: ZeroFramework.AbstractSystem.Initialized*
      implements:
      - ZeroFramework.ICanInit.Initialized
    - isEii: true
      id: ZeroFramework.AbstractSystem.ZeroFramework#ICanInit#Init
      commentId: M:ZeroFramework.AbstractSystem.ZeroFramework#ICanInit#Init
      language: CSharp
      name:
        CSharp: ICanInit.Init()
        VB: ''
      nameWithType:
        CSharp: AbstractSystem.ICanInit.Init()
        VB: ''
      qualifiedName:
        CSharp: ZeroFramework.AbstractSystem.ZeroFramework.ICanInit.Init()
        VB: ''
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ZeroFramework.ICanInit.Init
        path: ''
        startLine: 1371
      syntax:
        content:
          CSharp: void ICanInit.Init()
      overload: ZeroFramework.AbstractSystem.ZeroFramework#ICanInit#Init*
      implements:
      - ZeroFramework.ICanInit.Init
    - id: ZeroFramework.AbstractSystem.Deinit
      commentId: M:ZeroFramework.AbstractSystem.Deinit
      language: CSharp
      name:
        CSharp: Deinit()
        VB: Deinit()
      nameWithType:
        CSharp: AbstractSystem.Deinit()
        VB: AbstractSystem.Deinit()
      qualifiedName:
        CSharp: ZeroFramework.AbstractSystem.Deinit()
        VB: ZeroFramework.AbstractSystem.Deinit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Deinit
        path: ''
        startLine: 1373
      syntax:
        content:
          CSharp: public void Deinit()
          VB: Public Sub Deinit()
      overload: ZeroFramework.AbstractSystem.Deinit*
      implements:
      - ZeroFramework.ICanInit.Deinit
    - id: ZeroFramework.AbstractSystem.OnDeinit
      commentId: M:ZeroFramework.AbstractSystem.OnDeinit
      language: CSharp
      name:
        CSharp: OnDeinit()
        VB: OnDeinit()
      nameWithType:
        CSharp: AbstractSystem.OnDeinit()
        VB: AbstractSystem.OnDeinit()
      qualifiedName:
        CSharp: ZeroFramework.AbstractSystem.OnDeinit()
        VB: ZeroFramework.AbstractSystem.OnDeinit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: OnDeinit
        path: ''
        startLine: 1375
      syntax:
        content:
          CSharp: protected virtual void OnDeinit()
          VB: Protected Overridable Sub OnDeinit()
      overload: ZeroFramework.AbstractSystem.OnDeinit*
    - id: ZeroFramework.AbstractSystem.OnInit
      commentId: M:ZeroFramework.AbstractSystem.OnInit
      language: CSharp
      name:
        CSharp: OnInit()
        VB: OnInit()
      nameWithType:
        CSharp: AbstractSystem.OnInit()
        VB: AbstractSystem.OnInit()
      qualifiedName:
        CSharp: ZeroFramework.AbstractSystem.OnInit()
        VB: ZeroFramework.AbstractSystem.OnInit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: OnInit
        path: ''
        startLine: 1376
      syntax:
        content:
          CSharp: protected abstract void OnInit()
          VB: Protected MustOverride Sub OnInit()
      overload: ZeroFramework.AbstractSystem.OnInit*
  - id: ZeroFramework.IUtility
    commentId: T:ZeroFramework.IUtility
    language: CSharp
    name:
      CSharp: IUtility
      VB: IUtility
    nameWithType:
      CSharp: IUtility
      VB: IUtility
    qualifiedName:
      CSharp: ZeroFramework.IUtility
      VB: ZeroFramework.IUtility
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IUtility
      path: ''
      startLine: 1393
    syntax:
      content:
        CSharp: public interface IUtility
        VB: Public Interface IUtility
    items: []
  - id: ZeroFramework.BindableProperty`1
    commentId: T:ZeroFramework.BindableProperty`1
    language: CSharp
    name:
      CSharp: BindableProperty<T>
      VB: BindableProperty(Of T)
    nameWithType:
      CSharp: BindableProperty<T>
      VB: BindableProperty(Of T)
    qualifiedName:
      CSharp: ZeroFramework.BindableProperty<T>
      VB: ZeroFramework.BindableProperty(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: BindableProperty
      path: ''
      startLine: 1412
    syntax:
      content:
        CSharp: 'public class BindableProperty<T> : IBindableProperty<T>'
        VB: Public Class BindableProperty(Of T) Implements IBindableProperty(Of T)
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.IBindableProperty{{T}}
    items:
    - id: ZeroFramework.BindableProperty`1.#ctor(`0)
      commentId: M:ZeroFramework.BindableProperty`1.#ctor(`0)
      language: CSharp
      name:
        CSharp: BindableProperty(T)
        VB: New(T)
      nameWithType:
        CSharp: BindableProperty<T>.BindableProperty(T)
        VB: BindableProperty(Of T).New(T)
      qualifiedName:
        CSharp: ZeroFramework.BindableProperty<T>.BindableProperty(T)
        VB: ZeroFramework.BindableProperty(Of T).New(T)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: .ctor
        path: ''
        startLine: 1419
      syntax:
        content:
          CSharp: public BindableProperty(T defaultValue = default)
          VB: Public Sub New(defaultValue As T = Nothing)
        parameters:
        - id: defaultValue
          type: '{T}'
      overload: ZeroFramework.BindableProperty`1.#ctor*
    - id: ZeroFramework.BindableProperty`1.GetValue
      commentId: M:ZeroFramework.BindableProperty`1.GetValue
      language: CSharp
      name:
        CSharp: GetValue()
        VB: GetValue()
      nameWithType:
        CSharp: BindableProperty<T>.GetValue()
        VB: BindableProperty(Of T).GetValue()
      qualifiedName:
        CSharp: ZeroFramework.BindableProperty<T>.GetValue()
        VB: ZeroFramework.BindableProperty(Of T).GetValue()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetValue
        path: ''
        startLine: 1421
      syntax:
        content:
          CSharp: protected virtual T GetValue()
          VB: Protected Overridable Function GetValue() As T
        return:
          type: '{T}'
      overload: ZeroFramework.BindableProperty`1.GetValue*
    - id: ZeroFramework.BindableProperty`1.SetValue(`0)
      commentId: M:ZeroFramework.BindableProperty`1.SetValue(`0)
      language: CSharp
      name:
        CSharp: SetValue(T)
        VB: SetValue(T)
      nameWithType:
        CSharp: BindableProperty<T>.SetValue(T)
        VB: BindableProperty(Of T).SetValue(T)
      qualifiedName:
        CSharp: ZeroFramework.BindableProperty<T>.SetValue(T)
        VB: ZeroFramework.BindableProperty(Of T).SetValue(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SetValue
        path: ''
        startLine: 1423
      syntax:
        content:
          CSharp: protected virtual void SetValue(T newValue)
          VB: Protected Overridable Sub SetValue(newValue As T)
        parameters:
        - id: newValue
          type: '{T}'
      overload: ZeroFramework.BindableProperty`1.SetValue*
    - id: ZeroFramework.BindableProperty`1.Comparer
      commentId: P:ZeroFramework.BindableProperty`1.Comparer
      language: CSharp
      name:
        CSharp: Comparer
        VB: Comparer
      nameWithType:
        CSharp: BindableProperty<T>.Comparer
        VB: BindableProperty(Of T).Comparer
      qualifiedName:
        CSharp: ZeroFramework.BindableProperty<T>.Comparer
        VB: ZeroFramework.BindableProperty(Of T).Comparer
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Comparer
        path: ''
        startLine: 1425
      syntax:
        content:
          CSharp: public static Func<T, T, bool> Comparer { get; set; }
          VB: Public Shared Property Comparer As Func(Of T, T, Boolean)
        parameters: []
        return:
          type: Global.Func{{T},{T},System.Boolean}
      overload: ZeroFramework.BindableProperty`1.Comparer*
    - id: ZeroFramework.BindableProperty`1.WithComparer(Func{`0,`0,System.Boolean})
      commentId: M:ZeroFramework.BindableProperty`1.WithComparer(Func{`0,`0,System.Boolean})
      language: CSharp
      name:
        CSharp: WithComparer(Func<T, T, bool>)
        VB: WithComparer(Func(Of T, T, Boolean))
      nameWithType:
        CSharp: BindableProperty<T>.WithComparer(Func<T, T, bool>)
        VB: BindableProperty(Of T).WithComparer(Func(Of T, T, Boolean))
      qualifiedName:
        CSharp: ZeroFramework.BindableProperty<T>.WithComparer(Func<T, T, bool>)
        VB: ZeroFramework.BindableProperty(Of T).WithComparer(Func(Of T, T, Boolean))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: WithComparer
        path: ''
        startLine: 1427
      syntax:
        content:
          CSharp: public BindableProperty<T> WithComparer(Func<T, T, bool> comparer)
          VB: Public Function WithComparer(comparer As Func(Of T, T, Boolean)) As BindableProperty(Of T)
        parameters:
        - id: comparer
          type: Global.Func{{T},{T},System.Boolean}
        return:
          type: ZeroFramework.BindableProperty`1
      overload: ZeroFramework.BindableProperty`1.WithComparer*
      implements:
      - ZeroFramework.IBindableProperty{{T}}.WithComparer(Func{{T},{T},System.Boolean})
    - id: ZeroFramework.BindableProperty`1.Value
      commentId: P:ZeroFramework.BindableProperty`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: BindableProperty<T>.Value
        VB: BindableProperty(Of T).Value
      qualifiedName:
        CSharp: ZeroFramework.BindableProperty<T>.Value
        VB: ZeroFramework.BindableProperty(Of T).Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Value
        path: ''
        startLine: 1433
      syntax:
        content:
          CSharp: public T Value { get; set; }
          VB: Public Property Value As T
        parameters: []
        return:
          type: '{T}'
      overload: ZeroFramework.BindableProperty`1.Value*
      implements:
      - ZeroFramework.IBindableProperty{{T}}.Value
    - id: ZeroFramework.BindableProperty`1.SetValueWithoutEvent(`0)
      commentId: M:ZeroFramework.BindableProperty`1.SetValueWithoutEvent(`0)
      language: CSharp
      name:
        CSharp: SetValueWithoutEvent(T)
        VB: SetValueWithoutEvent(T)
      nameWithType:
        CSharp: BindableProperty<T>.SetValueWithoutEvent(T)
        VB: BindableProperty(Of T).SetValueWithoutEvent(T)
      qualifiedName:
        CSharp: ZeroFramework.BindableProperty<T>.SetValueWithoutEvent(T)
        VB: ZeroFramework.BindableProperty(Of T).SetValueWithoutEvent(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SetValueWithoutEvent
        path: ''
        startLine: 1446
      syntax:
        content:
          CSharp: public void SetValueWithoutEvent(T newValue)
          VB: Public Sub SetValueWithoutEvent(newValue As T)
        parameters:
        - id: newValue
          type: '{T}'
      overload: ZeroFramework.BindableProperty`1.SetValueWithoutEvent*
      implements:
      - ZeroFramework.IBindableProperty{{T}}.SetValueWithoutEvent({T})
    - id: ZeroFramework.BindableProperty`1.Register(Action{`0,`0})
      commentId: M:ZeroFramework.BindableProperty`1.Register(Action{`0,`0})
      language: CSharp
      name:
        CSharp: Register(Action<T, T>)
        VB: Register(Action(Of T, T))
      nameWithType:
        CSharp: BindableProperty<T>.Register(Action<T, T>)
        VB: BindableProperty(Of T).Register(Action(Of T, T))
      qualifiedName:
        CSharp: ZeroFramework.BindableProperty<T>.Register(Action<T, T>)
        VB: ZeroFramework.BindableProperty(Of T).Register(Action(Of T, T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 1448
      syntax:
        content:
          CSharp: public IUnRegister Register(Action<T, T> onValueChanged)
          VB: Public Function Register(onValueChanged As Action(Of T, T)) As IUnRegister
        parameters:
        - id: onValueChanged
          type: Global.Action{{T},{T}}
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.BindableProperty`1.Register*
      implements:
      - ZeroFramework.IBindableProperty{{T}}.Register(Action{{T},{T}})
    - id: ZeroFramework.BindableProperty`1.RegisterWithInitValue(Action{`0,`0})
      commentId: M:ZeroFramework.BindableProperty`1.RegisterWithInitValue(Action{`0,`0})
      language: CSharp
      name:
        CSharp: RegisterWithInitValue(Action<T, T>)
        VB: RegisterWithInitValue(Action(Of T, T))
      nameWithType:
        CSharp: BindableProperty<T>.RegisterWithInitValue(Action<T, T>)
        VB: BindableProperty(Of T).RegisterWithInitValue(Action(Of T, T))
      qualifiedName:
        CSharp: ZeroFramework.BindableProperty<T>.RegisterWithInitValue(Action<T, T>)
        VB: ZeroFramework.BindableProperty(Of T).RegisterWithInitValue(Action(Of T, T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterWithInitValue
        path: ''
        startLine: 1454
      syntax:
        content:
          CSharp: public IUnRegister RegisterWithInitValue(Action<T, T> onValueChanged)
          VB: Public Function RegisterWithInitValue(onValueChanged As Action(Of T, T)) As IUnRegister
        parameters:
        - id: onValueChanged
          type: Global.Action{{T},{T}}
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.BindableProperty`1.RegisterWithInitValue*
      implements:
      - ZeroFramework.IBindableProperty{{T}}.RegisterWithInitValue(Action{{T},{T}})
    - id: ZeroFramework.BindableProperty`1.UnRegister(Action{`0,`0})
      commentId: M:ZeroFramework.BindableProperty`1.UnRegister(Action{`0,`0})
      language: CSharp
      name:
        CSharp: UnRegister(Action<T, T>)
        VB: UnRegister(Action(Of T, T))
      nameWithType:
        CSharp: BindableProperty<T>.UnRegister(Action<T, T>)
        VB: BindableProperty(Of T).UnRegister(Action(Of T, T))
      qualifiedName:
        CSharp: ZeroFramework.BindableProperty<T>.UnRegister(Action<T, T>)
        VB: ZeroFramework.BindableProperty(Of T).UnRegister(Action(Of T, T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1460
      syntax:
        content:
          CSharp: public void UnRegister(Action<T, T> onValueChanged)
          VB: Public Sub UnRegister(onValueChanged As Action(Of T, T))
        parameters:
        - id: onValueChanged
          type: Global.Action{{T},{T}}
      overload: ZeroFramework.BindableProperty`1.UnRegister*
      implements:
      - ZeroFramework.IBindableProperty{{T}}.UnRegister(Action{{T},{T}})
    - id: ZeroFramework.BindableProperty`1.Clear
      commentId: M:ZeroFramework.BindableProperty`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: BindableProperty<T>.Clear()
        VB: BindableProperty(Of T).Clear()
      qualifiedName:
        CSharp: ZeroFramework.BindableProperty<T>.Clear()
        VB: ZeroFramework.BindableProperty(Of T).Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 1462
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: ZeroFramework.BindableProperty`1.Clear*
      implements:
      - ZeroFramework.IBindableProperty{{T}}.Clear
    - id: ZeroFramework.BindableProperty`1.ToString
      commentId: M:ZeroFramework.BindableProperty`1.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: BindableProperty<T>.ToString()
        VB: BindableProperty(Of T).ToString()
      qualifiedName:
        CSharp: ZeroFramework.BindableProperty<T>.ToString()
        VB: ZeroFramework.BindableProperty(Of T).ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ToString
        path: ''
        startLine: 1467
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString() As String
        return:
          type: System.String
      overload: ZeroFramework.BindableProperty`1.ToString*
      overridden: System.Object.ToString
  - id: ZeroFramework.BindablePropertyUnRegister`1
    commentId: T:ZeroFramework.BindablePropertyUnRegister`1
    language: CSharp
    name:
      CSharp: BindablePropertyUnRegister<T>
      VB: BindablePropertyUnRegister(Of T)
    nameWithType:
      CSharp: BindablePropertyUnRegister<T>
      VB: BindablePropertyUnRegister(Of T)
    qualifiedName:
      CSharp: ZeroFramework.BindablePropertyUnRegister<T>
      VB: ZeroFramework.BindablePropertyUnRegister(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: BindablePropertyUnRegister
      path: ''
      startLine: 1470
    syntax:
      content:
        CSharp: 'public class BindablePropertyUnRegister<T> : IUnRegister'
        VB: Public Class BindablePropertyUnRegister(Of T) Implements IUnRegister
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.IUnRegister
    items:
    - id: ZeroFramework.BindablePropertyUnRegister`1.BindableProperty
      commentId: P:ZeroFramework.BindablePropertyUnRegister`1.BindableProperty
      language: CSharp
      name:
        CSharp: BindableProperty
        VB: BindableProperty
      nameWithType:
        CSharp: BindablePropertyUnRegister<T>.BindableProperty
        VB: BindablePropertyUnRegister(Of T).BindableProperty
      qualifiedName:
        CSharp: ZeroFramework.BindablePropertyUnRegister<T>.BindableProperty
        VB: ZeroFramework.BindablePropertyUnRegister(Of T).BindableProperty
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: BindableProperty
        path: ''
        startLine: 1472
      syntax:
        content:
          CSharp: public BindableProperty<T> BindableProperty { get; set; }
          VB: Public Property BindableProperty As BindableProperty(Of T)
        parameters: []
        return:
          type: ZeroFramework.BindableProperty{{T}}
      overload: ZeroFramework.BindablePropertyUnRegister`1.BindableProperty*
    - id: ZeroFramework.BindablePropertyUnRegister`1.OnValueChanged
      commentId: P:ZeroFramework.BindablePropertyUnRegister`1.OnValueChanged
      language: CSharp
      name:
        CSharp: OnValueChanged
        VB: OnValueChanged
      nameWithType:
        CSharp: BindablePropertyUnRegister<T>.OnValueChanged
        VB: BindablePropertyUnRegister(Of T).OnValueChanged
      qualifiedName:
        CSharp: ZeroFramework.BindablePropertyUnRegister<T>.OnValueChanged
        VB: ZeroFramework.BindablePropertyUnRegister(Of T).OnValueChanged
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: OnValueChanged
        path: ''
        startLine: 1474
      syntax:
        content:
          CSharp: public Action<T, T> OnValueChanged { get; set; }
          VB: Public Property OnValueChanged As Action(Of T, T)
        parameters: []
        return:
          type: Global.Action{{T},{T}}
      overload: ZeroFramework.BindablePropertyUnRegister`1.OnValueChanged*
    - id: ZeroFramework.BindablePropertyUnRegister`1.#ctor(ZeroFramework.BindableProperty{`0},Action{`0,`0})
      commentId: M:ZeroFramework.BindablePropertyUnRegister`1.#ctor(ZeroFramework.BindableProperty{`0},Action{`0,`0})
      language: CSharp
      name:
        CSharp: BindablePropertyUnRegister(BindableProperty<T>, Action<T, T>)
        VB: New(BindableProperty(Of T), Action(Of T, T))
      nameWithType:
        CSharp: BindablePropertyUnRegister<T>.BindablePropertyUnRegister(BindableProperty<T>, Action<T, T>)
        VB: BindablePropertyUnRegister(Of T).New(BindableProperty(Of T), Action(Of T, T))
      qualifiedName:
        CSharp: ZeroFramework.BindablePropertyUnRegister<T>.BindablePropertyUnRegister(ZeroFramework.BindableProperty<T>, Action<T, T>)
        VB: ZeroFramework.BindablePropertyUnRegister(Of T).New(ZeroFramework.BindableProperty(Of T), Action(Of T, T))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: .ctor
        path: ''
        startLine: 1476
      syntax:
        content:
          CSharp: public BindablePropertyUnRegister(BindableProperty<T> bindableProperty, Action<T, T> onValueChanged)
          VB: Public Sub New(bindableProperty As BindableProperty(Of T), onValueChanged As Action(Of T, T))
        parameters:
        - id: bindableProperty
          type: ZeroFramework.BindableProperty{{T}}
        - id: onValueChanged
          type: Global.Action{{T},{T}}
      overload: ZeroFramework.BindablePropertyUnRegister`1.#ctor*
    - id: ZeroFramework.BindablePropertyUnRegister`1.UnRegister
      commentId: M:ZeroFramework.BindablePropertyUnRegister`1.UnRegister
      language: CSharp
      name:
        CSharp: UnRegister()
        VB: UnRegister()
      nameWithType:
        CSharp: BindablePropertyUnRegister<T>.UnRegister()
        VB: BindablePropertyUnRegister(Of T).UnRegister()
      qualifiedName:
        CSharp: ZeroFramework.BindablePropertyUnRegister<T>.UnRegister()
        VB: ZeroFramework.BindablePropertyUnRegister(Of T).UnRegister()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1482
      syntax:
        content:
          CSharp: public void UnRegister()
          VB: Public Sub UnRegister()
      overload: ZeroFramework.BindablePropertyUnRegister`1.UnRegister*
      implements:
      - ZeroFramework.IUnRegister.UnRegister
  - id: ZeroFramework.IBindableProperty`1
    commentId: T:ZeroFramework.IBindableProperty`1
    language: CSharp
    name:
      CSharp: IBindableProperty<T>
      VB: IBindableProperty(Of T)
    nameWithType:
      CSharp: IBindableProperty<T>
      VB: IBindableProperty(Of T)
    qualifiedName:
      CSharp: ZeroFramework.IBindableProperty<T>
      VB: ZeroFramework.IBindableProperty(Of T)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IBindableProperty
      path: ''
      startLine: 1532
    syntax:
      content:
        CSharp: public interface IBindableProperty<T>
        VB: Public Interface IBindableProperty(Of T)
      typeParameters:
      - id: T
    items:
    - id: ZeroFramework.IBindableProperty`1.WithComparer(Func{`0,`0,System.Boolean})
      commentId: M:ZeroFramework.IBindableProperty`1.WithComparer(Func{`0,`0,System.Boolean})
      language: CSharp
      name:
        CSharp: WithComparer(Func<T, T, bool>)
        VB: WithComparer(Func(Of T, T, Boolean))
      nameWithType:
        CSharp: IBindableProperty<T>.WithComparer(Func<T, T, bool>)
        VB: IBindableProperty(Of T).WithComparer(Func(Of T, T, Boolean))
      qualifiedName:
        CSharp: ZeroFramework.IBindableProperty<T>.WithComparer(Func<T, T, bool>)
        VB: ZeroFramework.IBindableProperty(Of T).WithComparer(Func(Of T, T, Boolean))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: WithComparer
        path: ''
        startLine: 1534
      syntax:
        content:
          CSharp: BindableProperty<T> WithComparer(Func<T, T, bool> comparer)
          VB: Function WithComparer(comparer As Func(Of T, T, Boolean)) As BindableProperty(Of T)
        parameters:
        - id: comparer
          type: Global.Func{{T},{T},System.Boolean}
        return:
          type: ZeroFramework.BindableProperty{{T}}
      overload: ZeroFramework.IBindableProperty`1.WithComparer*
    - id: ZeroFramework.IBindableProperty`1.Value
      commentId: P:ZeroFramework.IBindableProperty`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: IBindableProperty<T>.Value
        VB: IBindableProperty(Of T).Value
      qualifiedName:
        CSharp: ZeroFramework.IBindableProperty<T>.Value
        VB: ZeroFramework.IBindableProperty(Of T).Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Value
        path: ''
        startLine: 1535
      syntax:
        content:
          CSharp: T Value { get; set; }
          VB: Property Value As T
        parameters: []
        return:
          type: '{T}'
      overload: ZeroFramework.IBindableProperty`1.Value*
    - id: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent(`0)
      commentId: M:ZeroFramework.IBindableProperty`1.SetValueWithoutEvent(`0)
      language: CSharp
      name:
        CSharp: SetValueWithoutEvent(T)
        VB: SetValueWithoutEvent(T)
      nameWithType:
        CSharp: IBindableProperty<T>.SetValueWithoutEvent(T)
        VB: IBindableProperty(Of T).SetValueWithoutEvent(T)
      qualifiedName:
        CSharp: ZeroFramework.IBindableProperty<T>.SetValueWithoutEvent(T)
        VB: ZeroFramework.IBindableProperty(Of T).SetValueWithoutEvent(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: SetValueWithoutEvent
        path: ''
        startLine: 1536
      syntax:
        content:
          CSharp: void SetValueWithoutEvent(T newValue)
          VB: Sub SetValueWithoutEvent(newValue As T)
        parameters:
        - id: newValue
          type: '{T}'
      overload: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent*
    - id: ZeroFramework.IBindableProperty`1.Register(Action{`0,`0})
      commentId: M:ZeroFramework.IBindableProperty`1.Register(Action{`0,`0})
      language: CSharp
      name:
        CSharp: Register(Action<T, T>)
        VB: Register(Action(Of T, T))
      nameWithType:
        CSharp: IBindableProperty<T>.Register(Action<T, T>)
        VB: IBindableProperty(Of T).Register(Action(Of T, T))
      qualifiedName:
        CSharp: ZeroFramework.IBindableProperty<T>.Register(Action<T, T>)
        VB: ZeroFramework.IBindableProperty(Of T).Register(Action(Of T, T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 1537
      syntax:
        content:
          CSharp: IUnRegister Register(Action<T, T> onValueChanged)
          VB: Function Register(onValueChanged As Action(Of T, T)) As IUnRegister
        parameters:
        - id: onValueChanged
          type: Global.Action{{T},{T}}
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.IBindableProperty`1.Register*
    - id: ZeroFramework.IBindableProperty`1.RegisterWithInitValue(Action{`0,`0})
      commentId: M:ZeroFramework.IBindableProperty`1.RegisterWithInitValue(Action{`0,`0})
      language: CSharp
      name:
        CSharp: RegisterWithInitValue(Action<T, T>)
        VB: RegisterWithInitValue(Action(Of T, T))
      nameWithType:
        CSharp: IBindableProperty<T>.RegisterWithInitValue(Action<T, T>)
        VB: IBindableProperty(Of T).RegisterWithInitValue(Action(Of T, T))
      qualifiedName:
        CSharp: ZeroFramework.IBindableProperty<T>.RegisterWithInitValue(Action<T, T>)
        VB: ZeroFramework.IBindableProperty(Of T).RegisterWithInitValue(Action(Of T, T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RegisterWithInitValue
        path: ''
        startLine: 1538
      syntax:
        content:
          CSharp: IUnRegister RegisterWithInitValue(Action<T, T> action)
          VB: Function RegisterWithInitValue(action As Action(Of T, T)) As IUnRegister
        parameters:
        - id: action
          type: Global.Action{{T},{T}}
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.IBindableProperty`1.RegisterWithInitValue*
    - id: ZeroFramework.IBindableProperty`1.UnRegister(Action{`0,`0})
      commentId: M:ZeroFramework.IBindableProperty`1.UnRegister(Action{`0,`0})
      language: CSharp
      name:
        CSharp: UnRegister(Action<T, T>)
        VB: UnRegister(Action(Of T, T))
      nameWithType:
        CSharp: IBindableProperty<T>.UnRegister(Action<T, T>)
        VB: IBindableProperty(Of T).UnRegister(Action(Of T, T))
      qualifiedName:
        CSharp: ZeroFramework.IBindableProperty<T>.UnRegister(Action<T, T>)
        VB: ZeroFramework.IBindableProperty(Of T).UnRegister(Action(Of T, T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1539
      syntax:
        content:
          CSharp: void UnRegister(Action<T, T> onValueChanged)
          VB: Sub UnRegister(onValueChanged As Action(Of T, T))
        parameters:
        - id: onValueChanged
          type: Global.Action{{T},{T}}
      overload: ZeroFramework.IBindableProperty`1.UnRegister*
    - id: ZeroFramework.IBindableProperty`1.Clear
      commentId: M:ZeroFramework.IBindableProperty`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: IBindableProperty<T>.Clear()
        VB: IBindableProperty(Of T).Clear()
      qualifiedName:
        CSharp: ZeroFramework.IBindableProperty<T>.Clear()
        VB: ZeroFramework.IBindableProperty(Of T).Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 1540
      syntax:
        content:
          CSharp: void Clear()
          VB: Sub Clear()
      overload: ZeroFramework.IBindableProperty`1.Clear*
  - id: ZeroFramework.EasyEvent
    commentId: T:ZeroFramework.EasyEvent
    language: CSharp
    name:
      CSharp: EasyEvent
      VB: EasyEvent
    nameWithType:
      CSharp: EasyEvent
      VB: EasyEvent
    qualifiedName:
      CSharp: ZeroFramework.EasyEvent
      VB: ZeroFramework.EasyEvent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: EasyEvent
      path: ''
      startLine: 1559
    syntax:
      content:
        CSharp: 'public class EasyEvent : IEasyEvent, IEasyEventCommon'
        VB: Public Class EasyEvent Implements IEasyEvent, IEasyEventCommon
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.IEasyEvent
    - ZeroFramework.IEasyEventCommon
    items:
    - id: ZeroFramework.EasyEvent.Register(Action)
      commentId: M:ZeroFramework.EasyEvent.Register(Action)
      language: CSharp
      name:
        CSharp: Register(Action)
        VB: Register(Action)
      nameWithType:
        CSharp: EasyEvent.Register(Action)
        VB: EasyEvent.Register(Action)
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent.Register(Action)
        VB: ZeroFramework.EasyEvent.Register(Action)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 1563
      syntax:
        content:
          CSharp: public IUnRegister Register(Action onEvent)
          VB: Public Function Register(onEvent As Action) As IUnRegister
        parameters:
        - id: onEvent
          type: Global.Action
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.EasyEvent.Register*
      implements:
      - ZeroFramework.IEasyEvent.Register(Action)
    - id: ZeroFramework.EasyEvent.UnRegister(Action)
      commentId: M:ZeroFramework.EasyEvent.UnRegister(Action)
      language: CSharp
      name:
        CSharp: UnRegister(Action)
        VB: UnRegister(Action)
      nameWithType:
        CSharp: EasyEvent.UnRegister(Action)
        VB: EasyEvent.UnRegister(Action)
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent.UnRegister(Action)
        VB: ZeroFramework.EasyEvent.UnRegister(Action)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1569
      syntax:
        content:
          CSharp: public void UnRegister(Action onEvent)
          VB: Public Sub UnRegister(onEvent As Action)
        parameters:
        - id: onEvent
          type: Global.Action
      overload: ZeroFramework.EasyEvent.UnRegister*
      implements:
      - ZeroFramework.IEasyEvent.UnRegister(Action)
    - id: ZeroFramework.EasyEvent.Trigger
      commentId: M:ZeroFramework.EasyEvent.Trigger
      language: CSharp
      name:
        CSharp: Trigger()
        VB: Trigger()
      nameWithType:
        CSharp: EasyEvent.Trigger()
        VB: EasyEvent.Trigger()
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent.Trigger()
        VB: ZeroFramework.EasyEvent.Trigger()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Trigger
        path: ''
        startLine: 1571
      syntax:
        content:
          CSharp: public void Trigger()
          VB: Public Sub Trigger()
      overload: ZeroFramework.EasyEvent.Trigger*
      implements:
      - ZeroFramework.IEasyEvent.Trigger
    - id: ZeroFramework.EasyEvent.Clear
      commentId: M:ZeroFramework.EasyEvent.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: EasyEvent.Clear()
        VB: EasyEvent.Clear()
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent.Clear()
        VB: ZeroFramework.EasyEvent.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 1573
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: ZeroFramework.EasyEvent.Clear*
      implements:
      - ZeroFramework.IEasyEventCommon.Clear
    - id: ZeroFramework.EasyEvent.GetInvocationList
      commentId: M:ZeroFramework.EasyEvent.GetInvocationList
      language: CSharp
      name:
        CSharp: GetInvocationList()
        VB: GetInvocationList()
      nameWithType:
        CSharp: EasyEvent.GetInvocationList()
        VB: EasyEvent.GetInvocationList()
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent.GetInvocationList()
        VB: ZeroFramework.EasyEvent.GetInvocationList()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetInvocationList
        path: ''
        startLine: 1578
      syntax:
        content:
          CSharp: public int GetInvocationList()
          VB: Public Function GetInvocationList() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.EasyEvent.GetInvocationList*
      implements:
      - ZeroFramework.IEasyEventCommon.GetInvocationList
  - id: ZeroFramework.EasyEvent`1
    commentId: T:ZeroFramework.EasyEvent`1
    language: CSharp
    name:
      CSharp: EasyEvent<T>
      VB: EasyEvent(Of T)
    nameWithType:
      CSharp: EasyEvent<T>
      VB: EasyEvent(Of T)
    qualifiedName:
      CSharp: ZeroFramework.EasyEvent<T>
      VB: ZeroFramework.EasyEvent(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: EasyEvent
      path: ''
      startLine: 1583
    syntax:
      content:
        CSharp: 'public class EasyEvent<T> : IEasyEvent<T>, IEasyEventCommon'
        VB: Public Class EasyEvent(Of T) Implements IEasyEvent(Of T), IEasyEventCommon
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.IEasyEvent{{T}}
    - ZeroFramework.IEasyEventCommon
    items:
    - id: ZeroFramework.EasyEvent`1.Register(Action{`0})
      commentId: M:ZeroFramework.EasyEvent`1.Register(Action{`0})
      language: CSharp
      name:
        CSharp: Register(Action<T>)
        VB: Register(Action(Of T))
      nameWithType:
        CSharp: EasyEvent<T>.Register(Action<T>)
        VB: EasyEvent(Of T).Register(Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent<T>.Register(Action<T>)
        VB: ZeroFramework.EasyEvent(Of T).Register(Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 1587
      syntax:
        content:
          CSharp: public IUnRegister Register(Action<T> onEvent)
          VB: Public Function Register(onEvent As Action(Of T)) As IUnRegister
        parameters:
        - id: onEvent
          type: Global.Action{{T}}
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.EasyEvent`1.Register*
      implements:
      - ZeroFramework.IEasyEvent{{T}}.Register(Action{{T}})
    - id: ZeroFramework.EasyEvent`1.UnRegister(Action{`0})
      commentId: M:ZeroFramework.EasyEvent`1.UnRegister(Action{`0})
      language: CSharp
      name:
        CSharp: UnRegister(Action<T>)
        VB: UnRegister(Action(Of T))
      nameWithType:
        CSharp: EasyEvent<T>.UnRegister(Action<T>)
        VB: EasyEvent(Of T).UnRegister(Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent<T>.UnRegister(Action<T>)
        VB: ZeroFramework.EasyEvent(Of T).UnRegister(Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1593
      syntax:
        content:
          CSharp: public void UnRegister(Action<T> onEvent)
          VB: Public Sub UnRegister(onEvent As Action(Of T))
        parameters:
        - id: onEvent
          type: Global.Action{{T}}
      overload: ZeroFramework.EasyEvent`1.UnRegister*
      implements:
      - ZeroFramework.IEasyEvent{{T}}.UnRegister(Action{{T}})
    - id: ZeroFramework.EasyEvent`1.Trigger(`0)
      commentId: M:ZeroFramework.EasyEvent`1.Trigger(`0)
      language: CSharp
      name:
        CSharp: Trigger(T)
        VB: Trigger(T)
      nameWithType:
        CSharp: EasyEvent<T>.Trigger(T)
        VB: EasyEvent(Of T).Trigger(T)
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent<T>.Trigger(T)
        VB: ZeroFramework.EasyEvent(Of T).Trigger(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Trigger
        path: ''
        startLine: 1595
      syntax:
        content:
          CSharp: public void Trigger(T t)
          VB: Public Sub Trigger(t As T)
        parameters:
        - id: t
          type: '{T}'
      overload: ZeroFramework.EasyEvent`1.Trigger*
      implements:
      - ZeroFramework.IEasyEvent{{T}}.Trigger({T})
    - id: ZeroFramework.EasyEvent`1.Clear
      commentId: M:ZeroFramework.EasyEvent`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: EasyEvent<T>.Clear()
        VB: EasyEvent(Of T).Clear()
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent<T>.Clear()
        VB: ZeroFramework.EasyEvent(Of T).Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 1597
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: ZeroFramework.EasyEvent`1.Clear*
      implements:
      - ZeroFramework.IEasyEventCommon.Clear
    - id: ZeroFramework.EasyEvent`1.GetInvocationList
      commentId: M:ZeroFramework.EasyEvent`1.GetInvocationList
      language: CSharp
      name:
        CSharp: GetInvocationList()
        VB: GetInvocationList()
      nameWithType:
        CSharp: EasyEvent<T>.GetInvocationList()
        VB: EasyEvent(Of T).GetInvocationList()
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent<T>.GetInvocationList()
        VB: ZeroFramework.EasyEvent(Of T).GetInvocationList()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetInvocationList
        path: ''
        startLine: 1602
      syntax:
        content:
          CSharp: public int GetInvocationList()
          VB: Public Function GetInvocationList() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.EasyEvent`1.GetInvocationList*
      implements:
      - ZeroFramework.IEasyEventCommon.GetInvocationList
  - id: ZeroFramework.EasyEvent`2
    commentId: T:ZeroFramework.EasyEvent`2
    language: CSharp
    name:
      CSharp: EasyEvent<T, TR>
      VB: EasyEvent(Of T, TR)
    nameWithType:
      CSharp: EasyEvent<T, TR>
      VB: EasyEvent(Of T, TR)
    qualifiedName:
      CSharp: ZeroFramework.EasyEvent<T, TR>
      VB: ZeroFramework.EasyEvent(Of T, TR)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: EasyEvent
      path: ''
      startLine: 1608
    syntax:
      content:
        CSharp: 'public class EasyEvent<T, TR> : IEasyEvent<T, TR>, IEasyEventCommon'
        VB: Public Class EasyEvent(Of T, TR) Implements IEasyEvent(Of T, TR), IEasyEventCommon
      typeParameters:
      - id: T
      - id: TR
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.IEasyEvent{{T},{TR}}
    - ZeroFramework.IEasyEventCommon
    items:
    - id: ZeroFramework.EasyEvent`2.Register(Func{`0,`1})
      commentId: M:ZeroFramework.EasyEvent`2.Register(Func{`0,`1})
      language: CSharp
      name:
        CSharp: Register(Func<T, TR>)
        VB: Register(Func(Of T, TR))
      nameWithType:
        CSharp: EasyEvent<T, TR>.Register(Func<T, TR>)
        VB: EasyEvent(Of T, TR).Register(Func(Of T, TR))
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent<T, TR>.Register(Func<T, TR>)
        VB: ZeroFramework.EasyEvent(Of T, TR).Register(Func(Of T, TR))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 1612
      syntax:
        content:
          CSharp: public IUnRegister Register(Func<T, TR> onEvent)
          VB: Public Function Register(onEvent As Func(Of T, TR)) As IUnRegister
        parameters:
        - id: onEvent
          type: Global.Func{{T},{TR}}
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.EasyEvent`2.Register*
      implements:
      - ZeroFramework.IEasyEvent{{T},{TR}}.Register(Func{{T},{TR}})
    - id: ZeroFramework.EasyEvent`2.UnRegister(Func{`0,`1})
      commentId: M:ZeroFramework.EasyEvent`2.UnRegister(Func{`0,`1})
      language: CSharp
      name:
        CSharp: UnRegister(Func<T, TR>)
        VB: UnRegister(Func(Of T, TR))
      nameWithType:
        CSharp: EasyEvent<T, TR>.UnRegister(Func<T, TR>)
        VB: EasyEvent(Of T, TR).UnRegister(Func(Of T, TR))
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent<T, TR>.UnRegister(Func<T, TR>)
        VB: ZeroFramework.EasyEvent(Of T, TR).UnRegister(Func(Of T, TR))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1618
      syntax:
        content:
          CSharp: public void UnRegister(Func<T, TR> onEvent)
          VB: Public Sub UnRegister(onEvent As Func(Of T, TR))
        parameters:
        - id: onEvent
          type: Global.Func{{T},{TR}}
      overload: ZeroFramework.EasyEvent`2.UnRegister*
      implements:
      - ZeroFramework.IEasyEvent{{T},{TR}}.UnRegister(Func{{T},{TR}})
    - id: ZeroFramework.EasyEvent`2.Trigger(`0)
      commentId: M:ZeroFramework.EasyEvent`2.Trigger(`0)
      language: CSharp
      name:
        CSharp: Trigger(T)
        VB: Trigger(T)
      nameWithType:
        CSharp: EasyEvent<T, TR>.Trigger(T)
        VB: EasyEvent(Of T, TR).Trigger(T)
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent<T, TR>.Trigger(T)
        VB: ZeroFramework.EasyEvent(Of T, TR).Trigger(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Trigger
        path: ''
        startLine: 1620
      syntax:
        content:
          CSharp: public TR Trigger(T t)
          VB: Public Function Trigger(t As T) As TR
        parameters:
        - id: t
          type: '{T}'
        return:
          type: '{TR}'
      overload: ZeroFramework.EasyEvent`2.Trigger*
      implements:
      - ZeroFramework.IEasyEvent{{T},{TR}}.Trigger({T})
    - id: ZeroFramework.EasyEvent`2.Clear
      commentId: M:ZeroFramework.EasyEvent`2.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: EasyEvent<T, TR>.Clear()
        VB: EasyEvent(Of T, TR).Clear()
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent<T, TR>.Clear()
        VB: ZeroFramework.EasyEvent(Of T, TR).Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 1629
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: ZeroFramework.EasyEvent`2.Clear*
      implements:
      - ZeroFramework.IEasyEventCommon.Clear
    - id: ZeroFramework.EasyEvent`2.GetInvocationList
      commentId: M:ZeroFramework.EasyEvent`2.GetInvocationList
      language: CSharp
      name:
        CSharp: GetInvocationList()
        VB: GetInvocationList()
      nameWithType:
        CSharp: EasyEvent<T, TR>.GetInvocationList()
        VB: EasyEvent(Of T, TR).GetInvocationList()
      qualifiedName:
        CSharp: ZeroFramework.EasyEvent<T, TR>.GetInvocationList()
        VB: ZeroFramework.EasyEvent(Of T, TR).GetInvocationList()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetInvocationList
        path: ''
        startLine: 1634
      syntax:
        content:
          CSharp: public int GetInvocationList()
          VB: Public Function GetInvocationList() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.EasyEvent`2.GetInvocationList*
      implements:
      - ZeroFramework.IEasyEventCommon.GetInvocationList
  - id: ZeroFramework.UnRegisterHandler
    commentId: T:ZeroFramework.UnRegisterHandler
    language: CSharp
    name:
      CSharp: UnRegisterHandler
      VB: UnRegisterHandler
    nameWithType:
      CSharp: UnRegisterHandler
      VB: UnRegisterHandler
    qualifiedName:
      CSharp: ZeroFramework.UnRegisterHandler
      VB: ZeroFramework.UnRegisterHandler
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: UnRegisterHandler
      path: ''
      startLine: 1655
    syntax:
      content:
        CSharp: 'public struct UnRegisterHandler : IUnRegister'
        VB: Public Structure UnRegisterHandler Implements IUnRegister
    implements:
    - ZeroFramework.IUnRegister
    items:
    - id: ZeroFramework.UnRegisterHandler.#ctor(Action)
      commentId: M:ZeroFramework.UnRegisterHandler.#ctor(Action)
      language: CSharp
      name:
        CSharp: UnRegisterHandler(Action)
        VB: New(Action)
      nameWithType:
        CSharp: UnRegisterHandler.UnRegisterHandler(Action)
        VB: UnRegisterHandler.New(Action)
      qualifiedName:
        CSharp: ZeroFramework.UnRegisterHandler.UnRegisterHandler(Action)
        VB: ZeroFramework.UnRegisterHandler.New(Action)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: .ctor
        path: ''
        startLine: 1658
      syntax:
        content:
          CSharp: public UnRegisterHandler(Action onUnRegister)
          VB: Public Sub New(onUnRegister As Action)
        parameters:
        - id: onUnRegister
          type: Global.Action
      overload: ZeroFramework.UnRegisterHandler.#ctor*
    - id: ZeroFramework.UnRegisterHandler.UnRegister
      commentId: M:ZeroFramework.UnRegisterHandler.UnRegister
      language: CSharp
      name:
        CSharp: UnRegister()
        VB: UnRegister()
      nameWithType:
        CSharp: UnRegisterHandler.UnRegister()
        VB: UnRegisterHandler.UnRegister()
      qualifiedName:
        CSharp: ZeroFramework.UnRegisterHandler.UnRegister()
        VB: ZeroFramework.UnRegisterHandler.UnRegister()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1660
      syntax:
        content:
          CSharp: public void UnRegister()
          VB: Public Sub UnRegister()
      overload: ZeroFramework.UnRegisterHandler.UnRegister*
      implements:
      - ZeroFramework.IUnRegister.UnRegister
  - id: ZeroFramework.UnRegisterTrigger
    commentId: T:ZeroFramework.UnRegisterTrigger
    language: CSharp
    name:
      CSharp: UnRegisterTrigger
      VB: UnRegisterTrigger
    nameWithType:
      CSharp: UnRegisterTrigger
      VB: UnRegisterTrigger
    qualifiedName:
      CSharp: ZeroFramework.UnRegisterTrigger
      VB: ZeroFramework.UnRegisterTrigger
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: UnRegisterTrigger
      path: ''
      startLine: 1667
    syntax:
      content:
        CSharp: 'public abstract class UnRegisterTrigger : MonoBehaviour'
        VB: Public MustInherit Class UnRegisterTrigger Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister)
      commentId: M:ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister)
      language: CSharp
      name:
        CSharp: AddUnRegister(IUnRegister)
        VB: AddUnRegister(IUnRegister)
      nameWithType:
        CSharp: UnRegisterTrigger.AddUnRegister(IUnRegister)
        VB: UnRegisterTrigger.AddUnRegister(IUnRegister)
      qualifiedName:
        CSharp: ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister)
        VB: ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: AddUnRegister
        path: ''
        startLine: 1670
      syntax:
        content:
          CSharp: public void AddUnRegister(IUnRegister unRegister)
          VB: Public Sub AddUnRegister(unRegister As IUnRegister)
        parameters:
        - id: unRegister
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.UnRegisterTrigger.AddUnRegister*
    - id: ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister)
      commentId: M:ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister)
      language: CSharp
      name:
        CSharp: RemoveUnRegister(IUnRegister)
        VB: RemoveUnRegister(IUnRegister)
      nameWithType:
        CSharp: UnRegisterTrigger.RemoveUnRegister(IUnRegister)
        VB: UnRegisterTrigger.RemoveUnRegister(IUnRegister)
      qualifiedName:
        CSharp: ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister)
        VB: ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: RemoveUnRegister
        path: ''
        startLine: 1672
      syntax:
        content:
          CSharp: public void RemoveUnRegister(IUnRegister unRegister)
          VB: Public Sub RemoveUnRegister(unRegister As IUnRegister)
        parameters:
        - id: unRegister
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.UnRegisterTrigger.RemoveUnRegister*
    - id: ZeroFramework.UnRegisterTrigger.UnRegister
      commentId: M:ZeroFramework.UnRegisterTrigger.UnRegister
      language: CSharp
      name:
        CSharp: UnRegister()
        VB: UnRegister()
      nameWithType:
        CSharp: UnRegisterTrigger.UnRegister()
        VB: UnRegisterTrigger.UnRegister()
      qualifiedName:
        CSharp: ZeroFramework.UnRegisterTrigger.UnRegister()
        VB: ZeroFramework.UnRegisterTrigger.UnRegister()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1674
      syntax:
        content:
          CSharp: public void UnRegister()
          VB: Public Sub UnRegister()
      overload: ZeroFramework.UnRegisterTrigger.UnRegister*
  - id: ZeroFramework.UnRegisterOnDestroyTrigger
    commentId: T:ZeroFramework.UnRegisterOnDestroyTrigger
    language: CSharp
    name:
      CSharp: UnRegisterOnDestroyTrigger
      VB: UnRegisterOnDestroyTrigger
    nameWithType:
      CSharp: UnRegisterOnDestroyTrigger
      VB: UnRegisterOnDestroyTrigger
    qualifiedName:
      CSharp: ZeroFramework.UnRegisterOnDestroyTrigger
      VB: ZeroFramework.UnRegisterOnDestroyTrigger
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: UnRegisterOnDestroyTrigger
      path: ''
      startLine: 1686
    syntax:
      content:
        CSharp: 'public class UnRegisterOnDestroyTrigger : UnRegisterTrigger'
        VB: Public Class UnRegisterOnDestroyTrigger Inherits UnRegisterTrigger
    inheritance:
    - System.Object
    - ZeroFramework.UnRegisterTrigger
    inheritedMembers:
    - ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister)
    - ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister)
    - ZeroFramework.UnRegisterTrigger.UnRegister
    items: []
  - id: ZeroFramework.UnRegisterOnDisableTrigger
    commentId: T:ZeroFramework.UnRegisterOnDisableTrigger
    language: CSharp
    name:
      CSharp: UnRegisterOnDisableTrigger
      VB: UnRegisterOnDisableTrigger
    nameWithType:
      CSharp: UnRegisterOnDisableTrigger
      VB: UnRegisterOnDisableTrigger
    qualifiedName:
      CSharp: ZeroFramework.UnRegisterOnDisableTrigger
      VB: ZeroFramework.UnRegisterOnDisableTrigger
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: UnRegisterOnDisableTrigger
      path: ''
      startLine: 1694
    syntax:
      content:
        CSharp: 'public class UnRegisterOnDisableTrigger : UnRegisterTrigger'
        VB: Public Class UnRegisterOnDisableTrigger Inherits UnRegisterTrigger
    inheritance:
    - System.Object
    - ZeroFramework.UnRegisterTrigger
    inheritedMembers:
    - ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister)
    - ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister)
    - ZeroFramework.UnRegisterTrigger.UnRegister
    items: []
  - id: ZeroFramework.UnRegisterExtension
    commentId: T:ZeroFramework.UnRegisterExtension
    language: CSharp
    name:
      CSharp: UnRegisterExtension
      VB: UnRegisterExtension
    nameWithType:
      CSharp: UnRegisterExtension
      VB: UnRegisterExtension
    qualifiedName:
      CSharp: ZeroFramework.UnRegisterExtension
      VB: ZeroFramework.UnRegisterExtension
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: UnRegisterExtension
      path: ''
      startLine: 1702
    syntax:
      content:
        CSharp: public static class UnRegisterExtension
        VB: Public Module UnRegisterExtension
    inheritance:
    - System.Object
    items:
    - isExtensionMethod: true
      id: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed(ZeroFramework.IUnRegister,UnityEngine.GameObject)
      commentId: M:ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed(ZeroFramework.IUnRegister,UnityEngine.GameObject)
      language: CSharp
      name:
        CSharp: UnRegisterWhenGameObjectDestroyed(IUnRegister, GameObject)
        VB: UnRegisterWhenGameObjectDestroyed(IUnRegister, GameObject)
      nameWithType:
        CSharp: UnRegisterExtension.UnRegisterWhenGameObjectDestroyed(IUnRegister, UnityEngine.GameObject)
        VB: UnRegisterExtension.UnRegisterWhenGameObjectDestroyed(IUnRegister, UnityEngine.GameObject)
      qualifiedName:
        CSharp: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed(ZeroFramework.IUnRegister, UnityEngine.GameObject)
        VB: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed(ZeroFramework.IUnRegister, UnityEngine.GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterWhenGameObjectDestroyed
        path: ''
        startLine: 1704
      syntax:
        content:
          CSharp: public static IUnRegister UnRegisterWhenGameObjectDestroyed(this IUnRegister unRegister, UnityEngine.GameObject gameObject)
          VB: Public Shared Function UnRegisterWhenGameObjectDestroyed(unRegister As IUnRegister, gameObject As UnityEngine.GameObject) As IUnRegister
        parameters:
        - id: unRegister
          type: ZeroFramework.IUnRegister
        - id: gameObject
          type: Global.UnityEngine.GameObject
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed*
    - isExtensionMethod: true
      id: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed``1(ZeroFramework.IUnRegister,``0)
      commentId: M:ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed``1(ZeroFramework.IUnRegister,``0)
      language: CSharp
      name:
        CSharp: UnRegisterWhenGameObjectDestroyed<T>(IUnRegister, T)
        VB: UnRegisterWhenGameObjectDestroyed(Of T)(IUnRegister, T)
      nameWithType:
        CSharp: UnRegisterExtension.UnRegisterWhenGameObjectDestroyed<T>(IUnRegister, T)
        VB: UnRegisterExtension.UnRegisterWhenGameObjectDestroyed(Of T)(IUnRegister, T)
      qualifiedName:
        CSharp: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed<T>(ZeroFramework.IUnRegister, T)
        VB: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed(Of T)(ZeroFramework.IUnRegister, T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterWhenGameObjectDestroyed
        path: ''
        startLine: 1719
      syntax:
        content:
          CSharp: 'public static IUnRegister UnRegisterWhenGameObjectDestroyed<T>(this IUnRegister self, T component) where T : UnityEngine.Component'
          VB: Public Shared Function UnRegisterWhenGameObjectDestroyed(Of T As UnityEngine.Component)(self As IUnRegister, component As T) As IUnRegister
        parameters:
        - id: self
          type: ZeroFramework.IUnRegister
        - id: component
          type: '{T}'
        typeParameters:
        - id: T
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed*
    - isExtensionMethod: true
      id: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled(ZeroFramework.IUnRegister,UnityEngine.GameObject)
      commentId: M:ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled(ZeroFramework.IUnRegister,UnityEngine.GameObject)
      language: CSharp
      name:
        CSharp: UnRegisterWhenDisabled(IUnRegister, GameObject)
        VB: UnRegisterWhenDisabled(IUnRegister, GameObject)
      nameWithType:
        CSharp: UnRegisterExtension.UnRegisterWhenDisabled(IUnRegister, UnityEngine.GameObject)
        VB: UnRegisterExtension.UnRegisterWhenDisabled(IUnRegister, UnityEngine.GameObject)
      qualifiedName:
        CSharp: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled(ZeroFramework.IUnRegister, UnityEngine.GameObject)
        VB: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled(ZeroFramework.IUnRegister, UnityEngine.GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterWhenDisabled
        path: ''
        startLine: 1723
      syntax:
        content:
          CSharp: public static IUnRegister UnRegisterWhenDisabled(this IUnRegister unRegister, UnityEngine.GameObject gameObject)
          VB: Public Shared Function UnRegisterWhenDisabled(unRegister As IUnRegister, gameObject As UnityEngine.GameObject) As IUnRegister
        parameters:
        - id: unRegister
          type: ZeroFramework.IUnRegister
        - id: gameObject
          type: Global.UnityEngine.GameObject
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled*
    - isExtensionMethod: true
      id: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled``1(ZeroFramework.IUnRegister,``0)
      commentId: M:ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled``1(ZeroFramework.IUnRegister,``0)
      language: CSharp
      name:
        CSharp: UnRegisterWhenDisabled<T>(IUnRegister, T)
        VB: UnRegisterWhenDisabled(Of T)(IUnRegister, T)
      nameWithType:
        CSharp: UnRegisterExtension.UnRegisterWhenDisabled<T>(IUnRegister, T)
        VB: UnRegisterExtension.UnRegisterWhenDisabled(Of T)(IUnRegister, T)
      qualifiedName:
        CSharp: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled<T>(ZeroFramework.IUnRegister, T)
        VB: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled(Of T)(ZeroFramework.IUnRegister, T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegisterWhenDisabled
        path: ''
        startLine: 1738
      syntax:
        content:
          CSharp: 'public static IUnRegister UnRegisterWhenDisabled<T>(this IUnRegister self, T component) where T : UnityEngine.Component'
          VB: Public Shared Function UnRegisterWhenDisabled(Of T As UnityEngine.Component)(self As IUnRegister, component As T) As IUnRegister
        parameters:
        - id: self
          type: ZeroFramework.IUnRegister
        - id: component
          type: '{T}'
        typeParameters:
        - id: T
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled*
  - id: ZeroFramework.IEasyEventCommon
    commentId: T:ZeroFramework.IEasyEventCommon
    language: CSharp
    name:
      CSharp: IEasyEventCommon
      VB: IEasyEventCommon
    nameWithType:
      CSharp: IEasyEventCommon
      VB: IEasyEventCommon
    qualifiedName:
      CSharp: ZeroFramework.IEasyEventCommon
      VB: ZeroFramework.IEasyEventCommon
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IEasyEventCommon
      path: ''
      startLine: 1758
    syntax:
      content:
        CSharp: public interface IEasyEventCommon
        VB: Public Interface IEasyEventCommon
    items:
    - id: ZeroFramework.IEasyEventCommon.Clear
      commentId: M:ZeroFramework.IEasyEventCommon.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: IEasyEventCommon.Clear()
        VB: IEasyEventCommon.Clear()
      qualifiedName:
        CSharp: ZeroFramework.IEasyEventCommon.Clear()
        VB: ZeroFramework.IEasyEventCommon.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 1760
      syntax:
        content:
          CSharp: void Clear()
          VB: Sub Clear()
      overload: ZeroFramework.IEasyEventCommon.Clear*
    - id: ZeroFramework.IEasyEventCommon.GetInvocationList
      commentId: M:ZeroFramework.IEasyEventCommon.GetInvocationList
      language: CSharp
      name:
        CSharp: GetInvocationList()
        VB: GetInvocationList()
      nameWithType:
        CSharp: IEasyEventCommon.GetInvocationList()
        VB: IEasyEventCommon.GetInvocationList()
      qualifiedName:
        CSharp: ZeroFramework.IEasyEventCommon.GetInvocationList()
        VB: ZeroFramework.IEasyEventCommon.GetInvocationList()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetInvocationList
        path: ''
        startLine: 1762
      syntax:
        content:
          CSharp: int GetInvocationList()
          VB: Function GetInvocationList() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.IEasyEventCommon.GetInvocationList*
  - id: ZeroFramework.IEasyEvent
    commentId: T:ZeroFramework.IEasyEvent
    language: CSharp
    name:
      CSharp: IEasyEvent
      VB: IEasyEvent
    nameWithType:
      CSharp: IEasyEvent
      VB: IEasyEvent
    qualifiedName:
      CSharp: ZeroFramework.IEasyEvent
      VB: ZeroFramework.IEasyEvent
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IEasyEvent
      path: ''
      startLine: 1765
    syntax:
      content:
        CSharp: 'public interface IEasyEvent : IEasyEventCommon'
        VB: Public Interface IEasyEvent Inherits IEasyEventCommon
    inheritedMembers:
    - ZeroFramework.IEasyEventCommon.Clear
    - ZeroFramework.IEasyEventCommon.GetInvocationList
    items:
    - id: ZeroFramework.IEasyEvent.Register(Action)
      commentId: M:ZeroFramework.IEasyEvent.Register(Action)
      language: CSharp
      name:
        CSharp: Register(Action)
        VB: Register(Action)
      nameWithType:
        CSharp: IEasyEvent.Register(Action)
        VB: IEasyEvent.Register(Action)
      qualifiedName:
        CSharp: ZeroFramework.IEasyEvent.Register(Action)
        VB: ZeroFramework.IEasyEvent.Register(Action)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 1767
      syntax:
        content:
          CSharp: IUnRegister Register(Action onEvent)
          VB: Function Register(onEvent As Action) As IUnRegister
        parameters:
        - id: onEvent
          type: Global.Action
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.IEasyEvent.Register*
    - id: ZeroFramework.IEasyEvent.UnRegister(Action)
      commentId: M:ZeroFramework.IEasyEvent.UnRegister(Action)
      language: CSharp
      name:
        CSharp: UnRegister(Action)
        VB: UnRegister(Action)
      nameWithType:
        CSharp: IEasyEvent.UnRegister(Action)
        VB: IEasyEvent.UnRegister(Action)
      qualifiedName:
        CSharp: ZeroFramework.IEasyEvent.UnRegister(Action)
        VB: ZeroFramework.IEasyEvent.UnRegister(Action)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1769
      syntax:
        content:
          CSharp: void UnRegister(Action onEvent)
          VB: Sub UnRegister(onEvent As Action)
        parameters:
        - id: onEvent
          type: Global.Action
      overload: ZeroFramework.IEasyEvent.UnRegister*
    - id: ZeroFramework.IEasyEvent.Trigger
      commentId: M:ZeroFramework.IEasyEvent.Trigger
      language: CSharp
      name:
        CSharp: Trigger()
        VB: Trigger()
      nameWithType:
        CSharp: IEasyEvent.Trigger()
        VB: IEasyEvent.Trigger()
      qualifiedName:
        CSharp: ZeroFramework.IEasyEvent.Trigger()
        VB: ZeroFramework.IEasyEvent.Trigger()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Trigger
        path: ''
        startLine: 1771
      syntax:
        content:
          CSharp: void Trigger()
          VB: Sub Trigger()
      overload: ZeroFramework.IEasyEvent.Trigger*
  - id: ZeroFramework.IEasyEvent`1
    commentId: T:ZeroFramework.IEasyEvent`1
    language: CSharp
    name:
      CSharp: IEasyEvent<T>
      VB: IEasyEvent(Of T)
    nameWithType:
      CSharp: IEasyEvent<T>
      VB: IEasyEvent(Of T)
    qualifiedName:
      CSharp: ZeroFramework.IEasyEvent<T>
      VB: ZeroFramework.IEasyEvent(Of T)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IEasyEvent
      path: ''
      startLine: 1774
    syntax:
      content:
        CSharp: 'public interface IEasyEvent<T> : IEasyEventCommon'
        VB: Public Interface IEasyEvent(Of T) Inherits IEasyEventCommon
      typeParameters:
      - id: T
    inheritedMembers:
    - ZeroFramework.IEasyEventCommon.Clear
    - ZeroFramework.IEasyEventCommon.GetInvocationList
    items:
    - id: ZeroFramework.IEasyEvent`1.Register(Action{`0})
      commentId: M:ZeroFramework.IEasyEvent`1.Register(Action{`0})
      language: CSharp
      name:
        CSharp: Register(Action<T>)
        VB: Register(Action(Of T))
      nameWithType:
        CSharp: IEasyEvent<T>.Register(Action<T>)
        VB: IEasyEvent(Of T).Register(Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.IEasyEvent<T>.Register(Action<T>)
        VB: ZeroFramework.IEasyEvent(Of T).Register(Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 1776
      syntax:
        content:
          CSharp: IUnRegister Register(Action<T> onEvent)
          VB: Function Register(onEvent As Action(Of T)) As IUnRegister
        parameters:
        - id: onEvent
          type: Global.Action{{T}}
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.IEasyEvent`1.Register*
    - id: ZeroFramework.IEasyEvent`1.UnRegister(Action{`0})
      commentId: M:ZeroFramework.IEasyEvent`1.UnRegister(Action{`0})
      language: CSharp
      name:
        CSharp: UnRegister(Action<T>)
        VB: UnRegister(Action(Of T))
      nameWithType:
        CSharp: IEasyEvent<T>.UnRegister(Action<T>)
        VB: IEasyEvent(Of T).UnRegister(Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.IEasyEvent<T>.UnRegister(Action<T>)
        VB: ZeroFramework.IEasyEvent(Of T).UnRegister(Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1778
      syntax:
        content:
          CSharp: void UnRegister(Action<T> onEvent)
          VB: Sub UnRegister(onEvent As Action(Of T))
        parameters:
        - id: onEvent
          type: Global.Action{{T}}
      overload: ZeroFramework.IEasyEvent`1.UnRegister*
    - id: ZeroFramework.IEasyEvent`1.Trigger(`0)
      commentId: M:ZeroFramework.IEasyEvent`1.Trigger(`0)
      language: CSharp
      name:
        CSharp: Trigger(T)
        VB: Trigger(T)
      nameWithType:
        CSharp: IEasyEvent<T>.Trigger(T)
        VB: IEasyEvent(Of T).Trigger(T)
      qualifiedName:
        CSharp: ZeroFramework.IEasyEvent<T>.Trigger(T)
        VB: ZeroFramework.IEasyEvent(Of T).Trigger(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Trigger
        path: ''
        startLine: 1780
      syntax:
        content:
          CSharp: void Trigger(T param)
          VB: Sub Trigger(param As T)
        parameters:
        - id: param
          type: '{T}'
      overload: ZeroFramework.IEasyEvent`1.Trigger*
  - id: ZeroFramework.IEasyEvent`2
    commentId: T:ZeroFramework.IEasyEvent`2
    language: CSharp
    name:
      CSharp: IEasyEvent<T, TR>
      VB: IEasyEvent(Of T, TR)
    nameWithType:
      CSharp: IEasyEvent<T, TR>
      VB: IEasyEvent(Of T, TR)
    qualifiedName:
      CSharp: ZeroFramework.IEasyEvent<T, TR>
      VB: ZeroFramework.IEasyEvent(Of T, TR)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IEasyEvent
      path: ''
      startLine: 1783
    syntax:
      content:
        CSharp: 'public interface IEasyEvent<T, TR> : IEasyEventCommon'
        VB: Public Interface IEasyEvent(Of T, TR) Inherits IEasyEventCommon
      typeParameters:
      - id: T
      - id: TR
    inheritedMembers:
    - ZeroFramework.IEasyEventCommon.Clear
    - ZeroFramework.IEasyEventCommon.GetInvocationList
    items:
    - id: ZeroFramework.IEasyEvent`2.Register(Func{`0,`1})
      commentId: M:ZeroFramework.IEasyEvent`2.Register(Func{`0,`1})
      language: CSharp
      name:
        CSharp: Register(Func<T, TR>)
        VB: Register(Func(Of T, TR))
      nameWithType:
        CSharp: IEasyEvent<T, TR>.Register(Func<T, TR>)
        VB: IEasyEvent(Of T, TR).Register(Func(Of T, TR))
      qualifiedName:
        CSharp: ZeroFramework.IEasyEvent<T, TR>.Register(Func<T, TR>)
        VB: ZeroFramework.IEasyEvent(Of T, TR).Register(Func(Of T, TR))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 1785
      syntax:
        content:
          CSharp: IUnRegister Register(Func<T, TR> onEvent)
          VB: Function Register(onEvent As Func(Of T, TR)) As IUnRegister
        parameters:
        - id: onEvent
          type: Global.Func{{T},{TR}}
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.IEasyEvent`2.Register*
    - id: ZeroFramework.IEasyEvent`2.UnRegister(Func{`0,`1})
      commentId: M:ZeroFramework.IEasyEvent`2.UnRegister(Func{`0,`1})
      language: CSharp
      name:
        CSharp: UnRegister(Func<T, TR>)
        VB: UnRegister(Func(Of T, TR))
      nameWithType:
        CSharp: IEasyEvent<T, TR>.UnRegister(Func<T, TR>)
        VB: IEasyEvent(Of T, TR).UnRegister(Func(Of T, TR))
      qualifiedName:
        CSharp: ZeroFramework.IEasyEvent<T, TR>.UnRegister(Func<T, TR>)
        VB: ZeroFramework.IEasyEvent(Of T, TR).UnRegister(Func(Of T, TR))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1787
      syntax:
        content:
          CSharp: void UnRegister(Func<T, TR> onEvent)
          VB: Sub UnRegister(onEvent As Func(Of T, TR))
        parameters:
        - id: onEvent
          type: Global.Func{{T},{TR}}
      overload: ZeroFramework.IEasyEvent`2.UnRegister*
    - id: ZeroFramework.IEasyEvent`2.Trigger(`0)
      commentId: M:ZeroFramework.IEasyEvent`2.Trigger(`0)
      language: CSharp
      name:
        CSharp: Trigger(T)
        VB: Trigger(T)
      nameWithType:
        CSharp: IEasyEvent<T, TR>.Trigger(T)
        VB: IEasyEvent(Of T, TR).Trigger(T)
      qualifiedName:
        CSharp: ZeroFramework.IEasyEvent<T, TR>.Trigger(T)
        VB: ZeroFramework.IEasyEvent(Of T, TR).Trigger(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Trigger
        path: ''
        startLine: 1789
      syntax:
        content:
          CSharp: TR Trigger(T param)
          VB: Function Trigger(param As T) As TR
        parameters:
        - id: param
          type: '{T}'
        return:
          type: '{TR}'
      overload: ZeroFramework.IEasyEvent`2.Trigger*
  - id: ZeroFramework.IUnRegister
    commentId: T:ZeroFramework.IUnRegister
    language: CSharp
    name:
      CSharp: IUnRegister
      VB: IUnRegister
    nameWithType:
      CSharp: IUnRegister
      VB: IUnRegister
    qualifiedName:
      CSharp: ZeroFramework.IUnRegister
      VB: ZeroFramework.IUnRegister
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: IUnRegister
      path: ''
      startLine: 1803
    syntax:
      content:
        CSharp: public interface IUnRegister
        VB: Public Interface IUnRegister
    items:
    - id: ZeroFramework.IUnRegister.UnRegister
      commentId: M:ZeroFramework.IUnRegister.UnRegister
      language: CSharp
      name:
        CSharp: UnRegister()
        VB: UnRegister()
      nameWithType:
        CSharp: IUnRegister.UnRegister()
        VB: IUnRegister.UnRegister()
      qualifiedName:
        CSharp: ZeroFramework.IUnRegister.UnRegister()
        VB: ZeroFramework.IUnRegister.UnRegister()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1805
      syntax:
        content:
          CSharp: void UnRegister()
          VB: Sub UnRegister()
      overload: ZeroFramework.IUnRegister.UnRegister*
  - id: ZeroFramework.CommonEventKit`1
    commentId: T:ZeroFramework.CommonEventKit`1
    language: CSharp
    name:
      CSharp: CommonEventKit<TKey>
      VB: CommonEventKit(Of TKey)
    nameWithType:
      CSharp: CommonEventKit<TKey>
      VB: CommonEventKit(Of TKey)
    qualifiedName:
      CSharp: ZeroFramework.CommonEventKit<TKey>
      VB: ZeroFramework.CommonEventKit(Of TKey)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: CommonEventKit
      path: ''
      startLine: 1820
    syntax:
      content:
        CSharp: 'public class CommonEventKit<TKey> : ICommonEventKit<TKey>, IUtility'
        VB: Public Class CommonEventKit(Of TKey) Implements ICommonEventKit(Of TKey), IUtility
      typeParameters:
      - id: TKey
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.ICommonEventKit{{TKey}}
    - ZeroFramework.IUtility
    items:
    - id: ZeroFramework.CommonEventKit`1.Register``1(`0,Action{``0})
      commentId: M:ZeroFramework.CommonEventKit`1.Register``1(`0,Action{``0})
      language: CSharp
      name:
        CSharp: Register<T>(TKey, Action<T>)
        VB: Register(Of T)(TKey, Action(Of T))
      nameWithType:
        CSharp: CommonEventKit<TKey>.Register<T>(TKey, Action<T>)
        VB: CommonEventKit(Of TKey).Register(Of T)(TKey, Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.CommonEventKit<TKey>.Register<T>(TKey, Action<T>)
        VB: ZeroFramework.CommonEventKit(Of TKey).Register(Of T)(TKey, Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 1824
      syntax:
        content:
          CSharp: public IUnRegister Register<T>(TKey key, Action<T> onEvent)
          VB: Public Function Register(Of T)(key As TKey, onEvent As Action(Of T)) As IUnRegister
        parameters:
        - id: key
          type: '{TKey}'
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.CommonEventKit`1.Register*
      implements:
      - ZeroFramework.ICommonEventKit{{TKey}}.Register``1({TKey},Action{{T}})
    - id: ZeroFramework.CommonEventKit`1.UnRegister``1(`0,Action{``0})
      commentId: M:ZeroFramework.CommonEventKit`1.UnRegister``1(`0,Action{``0})
      language: CSharp
      name:
        CSharp: UnRegister<T>(TKey, Action<T>)
        VB: UnRegister(Of T)(TKey, Action(Of T))
      nameWithType:
        CSharp: CommonEventKit<TKey>.UnRegister<T>(TKey, Action<T>)
        VB: CommonEventKit(Of TKey).UnRegister(Of T)(TKey, Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.CommonEventKit<TKey>.UnRegister<T>(TKey, Action<T>)
        VB: ZeroFramework.CommonEventKit(Of TKey).UnRegister(Of T)(TKey, Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1843
      syntax:
        content:
          CSharp: public void UnRegister<T>(TKey key, Action<T> onEvent)
          VB: Public Sub UnRegister(Of T)(key As TKey, onEvent As Action(Of T))
        parameters:
        - id: key
          type: '{TKey}'
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
      overload: ZeroFramework.CommonEventKit`1.UnRegister*
      implements:
      - ZeroFramework.ICommonEventKit{{TKey}}.UnRegister``1({TKey},Action{{T}})
    - id: ZeroFramework.CommonEventKit`1.UnRegister(`0)
      commentId: M:ZeroFramework.CommonEventKit`1.UnRegister(`0)
      language: CSharp
      name:
        CSharp: UnRegister(TKey)
        VB: UnRegister(TKey)
      nameWithType:
        CSharp: CommonEventKit<TKey>.UnRegister(TKey)
        VB: CommonEventKit(Of TKey).UnRegister(TKey)
      qualifiedName:
        CSharp: ZeroFramework.CommonEventKit<TKey>.UnRegister(TKey)
        VB: ZeroFramework.CommonEventKit(Of TKey).UnRegister(TKey)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1859
      syntax:
        content:
          CSharp: public void UnRegister(TKey key)
          VB: Public Sub UnRegister(key As TKey)
        parameters:
        - id: key
          type: '{TKey}'
      overload: ZeroFramework.CommonEventKit`1.UnRegister*
      implements:
      - ZeroFramework.ICommonEventKit{{TKey}}.UnRegister({TKey})
    - id: ZeroFramework.CommonEventKit`1.Send``1(`0)
      commentId: M:ZeroFramework.CommonEventKit`1.Send``1(`0)
      language: CSharp
      name:
        CSharp: Send<T>(TKey)
        VB: Send(Of T)(TKey)
      nameWithType:
        CSharp: CommonEventKit<TKey>.Send<T>(TKey)
        VB: CommonEventKit(Of TKey).Send(Of T)(TKey)
      qualifiedName:
        CSharp: ZeroFramework.CommonEventKit<TKey>.Send<T>(TKey)
        VB: ZeroFramework.CommonEventKit(Of TKey).Send(Of T)(TKey)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Send
        path: ''
        startLine: 1868
      syntax:
        content:
          CSharp: 'public void Send<T>(TKey key) where T : new()'
          VB: Public Sub Send(Of T As New)(key As TKey)
        parameters:
        - id: key
          type: '{TKey}'
        typeParameters:
        - id: T
      overload: ZeroFramework.CommonEventKit`1.Send*
      implements:
      - ZeroFramework.ICommonEventKit{{TKey}}.Send``1({TKey})
    - id: ZeroFramework.CommonEventKit`1.Send``1(`0,``0)
      commentId: M:ZeroFramework.CommonEventKit`1.Send``1(`0,``0)
      language: CSharp
      name:
        CSharp: Send<T>(TKey, T)
        VB: Send(Of T)(TKey, T)
      nameWithType:
        CSharp: CommonEventKit<TKey>.Send<T>(TKey, T)
        VB: CommonEventKit(Of TKey).Send(Of T)(TKey, T)
      qualifiedName:
        CSharp: ZeroFramework.CommonEventKit<TKey>.Send<T>(TKey, T)
        VB: ZeroFramework.CommonEventKit(Of TKey).Send(Of T)(TKey, T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Send
        path: ''
        startLine: 1879
      syntax:
        content:
          CSharp: public void Send<T>(TKey key, T e)
          VB: Public Sub Send(Of T)(key As TKey, e As T)
        parameters:
        - id: key
          type: '{TKey}'
        - id: e
          type: '{T}'
        typeParameters:
        - id: T
      overload: ZeroFramework.CommonEventKit`1.Send*
      implements:
      - ZeroFramework.ICommonEventKit{{TKey}}.Send``1({TKey},{T})
    - id: ZeroFramework.CommonEventKit`1.Clear
      commentId: M:ZeroFramework.CommonEventKit`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: CommonEventKit<TKey>.Clear()
        VB: CommonEventKit(Of TKey).Clear()
      qualifiedName:
        CSharp: ZeroFramework.CommonEventKit<TKey>.Clear()
        VB: ZeroFramework.CommonEventKit(Of TKey).Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 1890
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: ZeroFramework.CommonEventKit`1.Clear*
      implements:
      - ZeroFramework.ICommonEventKit{{TKey}}.Clear
  - id: ZeroFramework.TypeEventKit
    commentId: T:ZeroFramework.TypeEventKit
    language: CSharp
    name:
      CSharp: TypeEventKit
      VB: TypeEventKit
    nameWithType:
      CSharp: TypeEventKit
      VB: TypeEventKit
    qualifiedName:
      CSharp: ZeroFramework.TypeEventKit
      VB: ZeroFramework.TypeEventKit
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: TypeEventKit
      path: ''
      startLine: 1912
    syntax:
      content:
        CSharp: 'public class TypeEventKit : ITypeEventKit, IUtility'
        VB: Public Class TypeEventKit Implements ITypeEventKit, IUtility
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.ITypeEventKit
    - ZeroFramework.IUtility
    items:
    - id: ZeroFramework.TypeEventKit.Register``1(Action{``0})
      commentId: M:ZeroFramework.TypeEventKit.Register``1(Action{``0})
      language: CSharp
      name:
        CSharp: Register<T>(Action<T>)
        VB: Register(Of T)(Action(Of T))
      nameWithType:
        CSharp: TypeEventKit.Register<T>(Action<T>)
        VB: TypeEventKit.Register(Of T)(Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.TypeEventKit.Register<T>(Action<T>)
        VB: ZeroFramework.TypeEventKit.Register(Of T)(Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 1916
      syntax:
        content:
          CSharp: public IUnRegister Register<T>(Action<T> onEvent)
          VB: Public Function Register(Of T)(onEvent As Action(Of T)) As IUnRegister
        parameters:
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.TypeEventKit.Register*
      implements:
      - ZeroFramework.ITypeEventKit.Register``1(Action{{T}})
    - id: ZeroFramework.TypeEventKit.UnRegister``1(Action{``0})
      commentId: M:ZeroFramework.TypeEventKit.UnRegister``1(Action{``0})
      language: CSharp
      name:
        CSharp: UnRegister<T>(Action<T>)
        VB: UnRegister(Of T)(Action(Of T))
      nameWithType:
        CSharp: TypeEventKit.UnRegister<T>(Action<T>)
        VB: TypeEventKit.UnRegister(Of T)(Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.TypeEventKit.UnRegister<T>(Action<T>)
        VB: ZeroFramework.TypeEventKit.UnRegister(Of T)(Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1936
      syntax:
        content:
          CSharp: public void UnRegister<T>(Action<T> onEvent)
          VB: Public Sub UnRegister(Of T)(onEvent As Action(Of T))
        parameters:
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
      overload: ZeroFramework.TypeEventKit.UnRegister*
      implements:
      - ZeroFramework.ITypeEventKit.UnRegister``1(Action{{T}})
    - id: ZeroFramework.TypeEventKit.UnRegister``1
      commentId: M:ZeroFramework.TypeEventKit.UnRegister``1
      language: CSharp
      name:
        CSharp: UnRegister<T>()
        VB: UnRegister(Of T)()
      nameWithType:
        CSharp: TypeEventKit.UnRegister<T>()
        VB: TypeEventKit.UnRegister(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.TypeEventKit.UnRegister<T>()
        VB: ZeroFramework.TypeEventKit.UnRegister(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 1953
      syntax:
        content:
          CSharp: public void UnRegister<T>()
          VB: Public Sub UnRegister(Of T)()
        typeParameters:
        - id: T
      overload: ZeroFramework.TypeEventKit.UnRegister*
      implements:
      - ZeroFramework.ITypeEventKit.UnRegister``1
    - id: ZeroFramework.TypeEventKit.Send``1
      commentId: M:ZeroFramework.TypeEventKit.Send``1
      language: CSharp
      name:
        CSharp: Send<T>()
        VB: Send(Of T)()
      nameWithType:
        CSharp: TypeEventKit.Send<T>()
        VB: TypeEventKit.Send(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.TypeEventKit.Send<T>()
        VB: ZeroFramework.TypeEventKit.Send(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Send
        path: ''
        startLine: 1963
      syntax:
        content:
          CSharp: 'public void Send<T>() where T : new()'
          VB: Public Sub Send(Of T As New)()
        typeParameters:
        - id: T
      overload: ZeroFramework.TypeEventKit.Send*
      implements:
      - ZeroFramework.ITypeEventKit.Send``1
    - id: ZeroFramework.TypeEventKit.Send``1(``0)
      commentId: M:ZeroFramework.TypeEventKit.Send``1(``0)
      language: CSharp
      name:
        CSharp: Send<T>(T)
        VB: Send(Of T)(T)
      nameWithType:
        CSharp: TypeEventKit.Send<T>(T)
        VB: TypeEventKit.Send(Of T)(T)
      qualifiedName:
        CSharp: ZeroFramework.TypeEventKit.Send<T>(T)
        VB: ZeroFramework.TypeEventKit.Send(Of T)(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Send
        path: ''
        startLine: 1975
      syntax:
        content:
          CSharp: public void Send<T>(T e)
          VB: Public Sub Send(Of T)(e As T)
        parameters:
        - id: e
          type: '{T}'
        typeParameters:
        - id: T
      overload: ZeroFramework.TypeEventKit.Send*
      implements:
      - ZeroFramework.ITypeEventKit.Send``1({T})
    - id: ZeroFramework.TypeEventKit.Clear
      commentId: M:ZeroFramework.TypeEventKit.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: TypeEventKit.Clear()
        VB: TypeEventKit.Clear()
      qualifiedName:
        CSharp: ZeroFramework.TypeEventKit.Clear()
        VB: ZeroFramework.TypeEventKit.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 1987
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: ZeroFramework.TypeEventKit.Clear*
      implements:
      - ZeroFramework.ITypeEventKit.Clear
  - id: ZeroFramework.TypeNameEventKit
    commentId: T:ZeroFramework.TypeNameEventKit
    language: CSharp
    name:
      CSharp: TypeNameEventKit
      VB: TypeNameEventKit
    nameWithType:
      CSharp: TypeNameEventKit
      VB: TypeNameEventKit
    qualifiedName:
      CSharp: ZeroFramework.TypeNameEventKit
      VB: ZeroFramework.TypeNameEventKit
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: TypeNameEventKit
      path: ''
      startLine: 2007
    syntax:
      content:
        CSharp: public class TypeNameEventKit
        VB: Public Class TypeNameEventKit
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.TypeNameEventKit.Register``1(Action{``0})
      commentId: M:ZeroFramework.TypeNameEventKit.Register``1(Action{``0})
      language: CSharp
      name:
        CSharp: Register<T>(Action<T>)
        VB: Register(Of T)(Action(Of T))
      nameWithType:
        CSharp: TypeNameEventKit.Register<T>(Action<T>)
        VB: TypeNameEventKit.Register(Of T)(Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.TypeNameEventKit.Register<T>(Action<T>)
        VB: ZeroFramework.TypeNameEventKit.Register(Of T)(Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 2011
      syntax:
        content:
          CSharp: public IUnRegister Register<T>(Action<T> onEvent)
          VB: Public Function Register(Of T)(onEvent As Action(Of T)) As IUnRegister
        parameters:
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.TypeNameEventKit.Register*
    - id: ZeroFramework.TypeNameEventKit.UnRegister``1(Action{``0})
      commentId: M:ZeroFramework.TypeNameEventKit.UnRegister``1(Action{``0})
      language: CSharp
      name:
        CSharp: UnRegister<T>(Action<T>)
        VB: UnRegister(Of T)(Action(Of T))
      nameWithType:
        CSharp: TypeNameEventKit.UnRegister<T>(Action<T>)
        VB: TypeNameEventKit.UnRegister(Of T)(Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.TypeNameEventKit.UnRegister<T>(Action<T>)
        VB: ZeroFramework.TypeNameEventKit.UnRegister(Of T)(Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 2031
      syntax:
        content:
          CSharp: public void UnRegister<T>(Action<T> onEvent)
          VB: Public Sub UnRegister(Of T)(onEvent As Action(Of T))
        parameters:
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
      overload: ZeroFramework.TypeNameEventKit.UnRegister*
    - id: ZeroFramework.TypeNameEventKit.UnRegister``1
      commentId: M:ZeroFramework.TypeNameEventKit.UnRegister``1
      language: CSharp
      name:
        CSharp: UnRegister<T>()
        VB: UnRegister(Of T)()
      nameWithType:
        CSharp: TypeNameEventKit.UnRegister<T>()
        VB: TypeNameEventKit.UnRegister(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.TypeNameEventKit.UnRegister<T>()
        VB: ZeroFramework.TypeNameEventKit.UnRegister(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 2048
      syntax:
        content:
          CSharp: public void UnRegister<T>()
          VB: Public Sub UnRegister(Of T)()
        typeParameters:
        - id: T
      overload: ZeroFramework.TypeNameEventKit.UnRegister*
    - id: ZeroFramework.TypeNameEventKit.Send``1
      commentId: M:ZeroFramework.TypeNameEventKit.Send``1
      language: CSharp
      name:
        CSharp: Send<T>()
        VB: Send(Of T)()
      nameWithType:
        CSharp: TypeNameEventKit.Send<T>()
        VB: TypeNameEventKit.Send(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.TypeNameEventKit.Send<T>()
        VB: ZeroFramework.TypeNameEventKit.Send(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Send
        path: ''
        startLine: 2058
      syntax:
        content:
          CSharp: 'public void Send<T>() where T : new()'
          VB: Public Sub Send(Of T As New)()
        typeParameters:
        - id: T
      overload: ZeroFramework.TypeNameEventKit.Send*
    - id: ZeroFramework.TypeNameEventKit.Send``1(``0)
      commentId: M:ZeroFramework.TypeNameEventKit.Send``1(``0)
      language: CSharp
      name:
        CSharp: Send<T>(T)
        VB: Send(Of T)(T)
      nameWithType:
        CSharp: TypeNameEventKit.Send<T>(T)
        VB: TypeNameEventKit.Send(Of T)(T)
      qualifiedName:
        CSharp: ZeroFramework.TypeNameEventKit.Send<T>(T)
        VB: ZeroFramework.TypeNameEventKit.Send(Of T)(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Send
        path: ''
        startLine: 2070
      syntax:
        content:
          CSharp: public void Send<T>(T e)
          VB: Public Sub Send(Of T)(e As T)
        parameters:
        - id: e
          type: '{T}'
        typeParameters:
        - id: T
      overload: ZeroFramework.TypeNameEventKit.Send*
    - id: ZeroFramework.TypeNameEventKit.Clear
      commentId: M:ZeroFramework.TypeNameEventKit.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: TypeNameEventKit.Clear()
        VB: TypeNameEventKit.Clear()
      qualifiedName:
        CSharp: ZeroFramework.TypeNameEventKit.Clear()
        VB: ZeroFramework.TypeNameEventKit.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 2082
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: ZeroFramework.TypeNameEventKit.Clear*
  - id: ZeroFramework.ICommonEventKit`1
    commentId: T:ZeroFramework.ICommonEventKit`1
    language: CSharp
    name:
      CSharp: ICommonEventKit<TKey>
      VB: ICommonEventKit(Of TKey)
    nameWithType:
      CSharp: ICommonEventKit<TKey>
      VB: ICommonEventKit(Of TKey)
    qualifiedName:
      CSharp: ZeroFramework.ICommonEventKit<TKey>
      VB: ZeroFramework.ICommonEventKit(Of TKey)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ICommonEventKit
      path: ''
      startLine: 2101
    syntax:
      content:
        CSharp: 'public interface ICommonEventKit<TKey> : IUtility'
        VB: Public Interface ICommonEventKit(Of TKey) Inherits IUtility
      typeParameters:
      - id: TKey
    items:
    - id: ZeroFramework.ICommonEventKit`1.Register``1(`0,Action{``0})
      commentId: M:ZeroFramework.ICommonEventKit`1.Register``1(`0,Action{``0})
      language: CSharp
      name:
        CSharp: Register<T>(TKey, Action<T>)
        VB: Register(Of T)(TKey, Action(Of T))
      nameWithType:
        CSharp: ICommonEventKit<TKey>.Register<T>(TKey, Action<T>)
        VB: ICommonEventKit(Of TKey).Register(Of T)(TKey, Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.ICommonEventKit<TKey>.Register<T>(TKey, Action<T>)
        VB: ZeroFramework.ICommonEventKit(Of TKey).Register(Of T)(TKey, Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 2103
      syntax:
        content:
          CSharp: IUnRegister Register<T>(TKey key, Action<T> onEvent)
          VB: Function Register(Of T)(key As TKey, onEvent As Action(Of T)) As IUnRegister
        parameters:
        - id: key
          type: '{TKey}'
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.ICommonEventKit`1.Register*
    - id: ZeroFramework.ICommonEventKit`1.UnRegister``1(`0,Action{``0})
      commentId: M:ZeroFramework.ICommonEventKit`1.UnRegister``1(`0,Action{``0})
      language: CSharp
      name:
        CSharp: UnRegister<T>(TKey, Action<T>)
        VB: UnRegister(Of T)(TKey, Action(Of T))
      nameWithType:
        CSharp: ICommonEventKit<TKey>.UnRegister<T>(TKey, Action<T>)
        VB: ICommonEventKit(Of TKey).UnRegister(Of T)(TKey, Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.ICommonEventKit<TKey>.UnRegister<T>(TKey, Action<T>)
        VB: ZeroFramework.ICommonEventKit(Of TKey).UnRegister(Of T)(TKey, Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 2105
      syntax:
        content:
          CSharp: void UnRegister<T>(TKey key, Action<T> onEvent)
          VB: Sub UnRegister(Of T)(key As TKey, onEvent As Action(Of T))
        parameters:
        - id: key
          type: '{TKey}'
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
      overload: ZeroFramework.ICommonEventKit`1.UnRegister*
    - id: ZeroFramework.ICommonEventKit`1.UnRegister(`0)
      commentId: M:ZeroFramework.ICommonEventKit`1.UnRegister(`0)
      language: CSharp
      name:
        CSharp: UnRegister(TKey)
        VB: UnRegister(TKey)
      nameWithType:
        CSharp: ICommonEventKit<TKey>.UnRegister(TKey)
        VB: ICommonEventKit(Of TKey).UnRegister(TKey)
      qualifiedName:
        CSharp: ZeroFramework.ICommonEventKit<TKey>.UnRegister(TKey)
        VB: ZeroFramework.ICommonEventKit(Of TKey).UnRegister(TKey)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 2107
      syntax:
        content:
          CSharp: void UnRegister(TKey key)
          VB: Sub UnRegister(key As TKey)
        parameters:
        - id: key
          type: '{TKey}'
      overload: ZeroFramework.ICommonEventKit`1.UnRegister*
    - id: ZeroFramework.ICommonEventKit`1.Send``1(`0)
      commentId: M:ZeroFramework.ICommonEventKit`1.Send``1(`0)
      language: CSharp
      name:
        CSharp: Send<T>(TKey)
        VB: Send(Of T)(TKey)
      nameWithType:
        CSharp: ICommonEventKit<TKey>.Send<T>(TKey)
        VB: ICommonEventKit(Of TKey).Send(Of T)(TKey)
      qualifiedName:
        CSharp: ZeroFramework.ICommonEventKit<TKey>.Send<T>(TKey)
        VB: ZeroFramework.ICommonEventKit(Of TKey).Send(Of T)(TKey)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Send
        path: ''
        startLine: 2109
      syntax:
        content:
          CSharp: 'void Send<T>(TKey key) where T : new()'
          VB: Sub Send(Of T As New)(key As TKey)
        parameters:
        - id: key
          type: '{TKey}'
        typeParameters:
        - id: T
      overload: ZeroFramework.ICommonEventKit`1.Send*
    - id: ZeroFramework.ICommonEventKit`1.Send``1(`0,``0)
      commentId: M:ZeroFramework.ICommonEventKit`1.Send``1(`0,``0)
      language: CSharp
      name:
        CSharp: Send<T>(TKey, T)
        VB: Send(Of T)(TKey, T)
      nameWithType:
        CSharp: ICommonEventKit<TKey>.Send<T>(TKey, T)
        VB: ICommonEventKit(Of TKey).Send(Of T)(TKey, T)
      qualifiedName:
        CSharp: ZeroFramework.ICommonEventKit<TKey>.Send<T>(TKey, T)
        VB: ZeroFramework.ICommonEventKit(Of TKey).Send(Of T)(TKey, T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Send
        path: ''
        startLine: 2111
      syntax:
        content:
          CSharp: void Send<T>(TKey key, T e)
          VB: Sub Send(Of T)(key As TKey, e As T)
        parameters:
        - id: key
          type: '{TKey}'
        - id: e
          type: '{T}'
        typeParameters:
        - id: T
      overload: ZeroFramework.ICommonEventKit`1.Send*
    - id: ZeroFramework.ICommonEventKit`1.Clear
      commentId: M:ZeroFramework.ICommonEventKit`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: ICommonEventKit<TKey>.Clear()
        VB: ICommonEventKit(Of TKey).Clear()
      qualifiedName:
        CSharp: ZeroFramework.ICommonEventKit<TKey>.Clear()
        VB: ZeroFramework.ICommonEventKit(Of TKey).Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 2113
      syntax:
        content:
          CSharp: void Clear()
          VB: Sub Clear()
      overload: ZeroFramework.ICommonEventKit`1.Clear*
  - id: ZeroFramework.ITypeEventKit
    commentId: T:ZeroFramework.ITypeEventKit
    language: CSharp
    name:
      CSharp: ITypeEventKit
      VB: ITypeEventKit
    nameWithType:
      CSharp: ITypeEventKit
      VB: ITypeEventKit
    qualifiedName:
      CSharp: ZeroFramework.ITypeEventKit
      VB: ZeroFramework.ITypeEventKit
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ITypeEventKit
      path: ''
      startLine: 2128
    syntax:
      content:
        CSharp: 'public interface ITypeEventKit : IUtility'
        VB: Public Interface ITypeEventKit Inherits IUtility
    items:
    - id: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
      commentId: M:ZeroFramework.ITypeEventKit.Register``1(Action{``0})
      language: CSharp
      name:
        CSharp: Register<T>(Action<T>)
        VB: Register(Of T)(Action(Of T))
      nameWithType:
        CSharp: ITypeEventKit.Register<T>(Action<T>)
        VB: ITypeEventKit.Register(Of T)(Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.ITypeEventKit.Register<T>(Action<T>)
        VB: ZeroFramework.ITypeEventKit.Register(Of T)(Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Register
        path: ''
        startLine: 2130
      syntax:
        content:
          CSharp: IUnRegister Register<T>(Action<T> onEvent)
          VB: Function Register(Of T)(onEvent As Action(Of T)) As IUnRegister
        parameters:
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
        return:
          type: ZeroFramework.IUnRegister
      overload: ZeroFramework.ITypeEventKit.Register*
    - id: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
      commentId: M:ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
      language: CSharp
      name:
        CSharp: UnRegister<T>(Action<T>)
        VB: UnRegister(Of T)(Action(Of T))
      nameWithType:
        CSharp: ITypeEventKit.UnRegister<T>(Action<T>)
        VB: ITypeEventKit.UnRegister(Of T)(Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.ITypeEventKit.UnRegister<T>(Action<T>)
        VB: ZeroFramework.ITypeEventKit.UnRegister(Of T)(Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 2132
      syntax:
        content:
          CSharp: void UnRegister<T>(Action<T> onEvent)
          VB: Sub UnRegister(Of T)(onEvent As Action(Of T))
        parameters:
        - id: onEvent
          type: Global.Action{{T}}
        typeParameters:
        - id: T
      overload: ZeroFramework.ITypeEventKit.UnRegister*
    - id: ZeroFramework.ITypeEventKit.UnRegister``1
      commentId: M:ZeroFramework.ITypeEventKit.UnRegister``1
      language: CSharp
      name:
        CSharp: UnRegister<T>()
        VB: UnRegister(Of T)()
      nameWithType:
        CSharp: ITypeEventKit.UnRegister<T>()
        VB: ITypeEventKit.UnRegister(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.ITypeEventKit.UnRegister<T>()
        VB: ZeroFramework.ITypeEventKit.UnRegister(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: UnRegister
        path: ''
        startLine: 2134
      syntax:
        content:
          CSharp: void UnRegister<T>()
          VB: Sub UnRegister(Of T)()
        typeParameters:
        - id: T
      overload: ZeroFramework.ITypeEventKit.UnRegister*
    - id: ZeroFramework.ITypeEventKit.Send``1
      commentId: M:ZeroFramework.ITypeEventKit.Send``1
      language: CSharp
      name:
        CSharp: Send<T>()
        VB: Send(Of T)()
      nameWithType:
        CSharp: ITypeEventKit.Send<T>()
        VB: ITypeEventKit.Send(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.ITypeEventKit.Send<T>()
        VB: ZeroFramework.ITypeEventKit.Send(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Send
        path: ''
        startLine: 2136
      syntax:
        content:
          CSharp: 'void Send<T>() where T : new()'
          VB: Sub Send(Of T As New)()
        typeParameters:
        - id: T
      overload: ZeroFramework.ITypeEventKit.Send*
    - id: ZeroFramework.ITypeEventKit.Send``1(``0)
      commentId: M:ZeroFramework.ITypeEventKit.Send``1(``0)
      language: CSharp
      name:
        CSharp: Send<T>(T)
        VB: Send(Of T)(T)
      nameWithType:
        CSharp: ITypeEventKit.Send<T>(T)
        VB: ITypeEventKit.Send(Of T)(T)
      qualifiedName:
        CSharp: ZeroFramework.ITypeEventKit.Send<T>(T)
        VB: ZeroFramework.ITypeEventKit.Send(Of T)(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Send
        path: ''
        startLine: 2138
      syntax:
        content:
          CSharp: void Send<T>(T e)
          VB: Sub Send(Of T)(e As T)
        parameters:
        - id: e
          type: '{T}'
        typeParameters:
        - id: T
      overload: ZeroFramework.ITypeEventKit.Send*
    - id: ZeroFramework.ITypeEventKit.Clear
      commentId: M:ZeroFramework.ITypeEventKit.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: ITypeEventKit.Clear()
        VB: ITypeEventKit.Clear()
      qualifiedName:
        CSharp: ZeroFramework.ITypeEventKit.Clear()
        VB: ZeroFramework.ITypeEventKit.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Clear
        path: ''
        startLine: 2140
      syntax:
        content:
          CSharp: void Clear()
          VB: Sub Clear()
      overload: ZeroFramework.ITypeEventKit.Clear*
  - id: ZeroFramework.Singleton`1
    commentId: T:ZeroFramework.Singleton`1
    language: CSharp
    name:
      CSharp: Singleton<T>
      VB: Singleton(Of T)
    nameWithType:
      CSharp: Singleton<T>
      VB: Singleton(Of T)
    qualifiedName:
      CSharp: ZeroFramework.Singleton<T>
      VB: ZeroFramework.Singleton(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: Singleton
      path: ''
      startLine: 2156
    syntax:
      content:
        CSharp: 'public abstract class Singleton<T> : ISingleton where T : Singleton<T>'
        VB: Public MustInherit Class Singleton(Of T As Singleton(Of T)) Implements ISingleton
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.ISingleton
    items:
    - id: ZeroFramework.Singleton`1.mInstance
      commentId: F:ZeroFramework.Singleton`1.mInstance
      language: CSharp
      name:
        CSharp: mInstance
        VB: mInstance
      nameWithType:
        CSharp: Singleton<T>.mInstance
        VB: Singleton(Of T).mInstance
      qualifiedName:
        CSharp: ZeroFramework.Singleton<T>.mInstance
        VB: ZeroFramework.Singleton(Of T).mInstance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: mInstance
        path: ''
        startLine: 2161
      summary: "\n静态实例\n"
      example: []
      syntax:
        content:
          CSharp: protected static T mInstance
          VB: Protected Shared mInstance As T
        return:
          type: '{T}'
    - id: ZeroFramework.Singleton`1.Instance
      commentId: P:ZeroFramework.Singleton`1.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: Singleton<T>.Instance
        VB: Singleton(Of T).Instance
      qualifiedName:
        CSharp: ZeroFramework.Singleton<T>.Instance
        VB: ZeroFramework.Singleton(Of T).Instance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Instance
        path: ''
        startLine: 2172
      summary: "\n静态属性\n"
      example: []
      syntax:
        content:
          CSharp: public static T Instance { get; }
          VB: Public Shared ReadOnly Property Instance As T
        parameters: []
        return:
          type: '{T}'
      overload: ZeroFramework.Singleton`1.Instance*
    - id: ZeroFramework.Singleton`1.ID
      commentId: F:ZeroFramework.Singleton`1.ID
      language: CSharp
      name:
        CSharp: ID
        VB: ID
      nameWithType:
        CSharp: Singleton<T>.ID
        VB: Singleton(Of T).ID
      qualifiedName:
        CSharp: ZeroFramework.Singleton<T>.ID
        VB: ZeroFramework.Singleton(Of T).ID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ID
        path: ''
        startLine: 2189
      syntax:
        content:
          CSharp: public int ID
          VB: Public ID As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Singleton`1.Dispose
      commentId: M:ZeroFramework.Singleton`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: Singleton<T>.Dispose()
        VB: Singleton(Of T).Dispose()
      qualifiedName:
        CSharp: ZeroFramework.Singleton<T>.Dispose()
        VB: ZeroFramework.Singleton(Of T).Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Dispose
        path: ''
        startLine: 2194
      summary: "\n资源释放\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void Dispose()
          VB: Public Overridable Sub Dispose()
      overload: ZeroFramework.Singleton`1.Dispose*
    - id: ZeroFramework.Singleton`1.OnSingletonInit
      commentId: M:ZeroFramework.Singleton`1.OnSingletonInit
      language: CSharp
      name:
        CSharp: OnSingletonInit()
        VB: OnSingletonInit()
      nameWithType:
        CSharp: Singleton<T>.OnSingletonInit()
        VB: Singleton(Of T).OnSingletonInit()
      qualifiedName:
        CSharp: ZeroFramework.Singleton<T>.OnSingletonInit()
        VB: ZeroFramework.Singleton(Of T).OnSingletonInit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: OnSingletonInit
        path: ''
        startLine: 2202
      summary: "\n单例初始化方法\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void OnSingletonInit()
          VB: Public Overridable Sub OnSingletonInit()
      overload: ZeroFramework.Singleton`1.OnSingletonInit*
      implements:
      - ZeroFramework.ISingleton.OnSingletonInit
    - id: ZeroFramework.Singleton`1.ResetID
      commentId: M:ZeroFramework.Singleton`1.ResetID
      language: CSharp
      name:
        CSharp: ResetID()
        VB: ResetID()
      nameWithType:
        CSharp: Singleton<T>.ResetID()
        VB: Singleton(Of T).ResetID()
      qualifiedName:
        CSharp: ZeroFramework.Singleton<T>.ResetID()
        VB: ZeroFramework.Singleton(Of T).ResetID()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ResetID
        path: ''
        startLine: 2208
      syntax:
        content:
          CSharp: public virtual void ResetID()
          VB: Public Overridable Sub ResetID()
      overload: ZeroFramework.Singleton`1.ResetID*
      implements:
      - ZeroFramework.ISingleton.ResetID
    - id: ZeroFramework.Singleton`1.GetID
      commentId: M:ZeroFramework.Singleton`1.GetID
      language: CSharp
      name:
        CSharp: GetID()
        VB: GetID()
      nameWithType:
        CSharp: Singleton<T>.GetID()
        VB: Singleton(Of T).GetID()
      qualifiedName:
        CSharp: ZeroFramework.Singleton<T>.GetID()
        VB: ZeroFramework.Singleton(Of T).GetID()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetID
        path: ''
        startLine: 2214
      syntax:
        content:
          CSharp: public virtual int GetID()
          VB: Public Overridable Function GetID() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.Singleton`1.GetID*
      implements:
      - ZeroFramework.ISingleton.GetID
  - id: ZeroFramework.SingletonMono`1
    commentId: T:ZeroFramework.SingletonMono`1
    language: CSharp
    name:
      CSharp: SingletonMono<T>
      VB: SingletonMono(Of T)
    nameWithType:
      CSharp: SingletonMono<T>
      VB: SingletonMono(Of T)
    qualifiedName:
      CSharp: ZeroFramework.SingletonMono<T>
      VB: ZeroFramework.SingletonMono(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: SingletonMono
      path: ''
      startLine: 2234
    syntax:
      content:
        CSharp: 'public abstract class SingletonMono<T> : MonoBehaviour, ISingleton where T : SingletonMono<T>'
        VB: Public MustInherit Class SingletonMono(Of T As SingletonMono(Of T)) Inherits MonoBehaviour Implements ISingleton
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.ISingleton
    items:
    - id: ZeroFramework.SingletonMono`1.mInstance
      commentId: F:ZeroFramework.SingletonMono`1.mInstance
      language: CSharp
      name:
        CSharp: mInstance
        VB: mInstance
      nameWithType:
        CSharp: SingletonMono<T>.mInstance
        VB: SingletonMono(Of T).mInstance
      qualifiedName:
        CSharp: ZeroFramework.SingletonMono<T>.mInstance
        VB: ZeroFramework.SingletonMono(Of T).mInstance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: mInstance
        path: ''
        startLine: 2239
      summary: "\n静态实例\n"
      example: []
      syntax:
        content:
          CSharp: protected static T mInstance
          VB: Protected Shared mInstance As T
        return:
          type: '{T}'
    - id: ZeroFramework.SingletonMono`1.Instance
      commentId: P:ZeroFramework.SingletonMono`1.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: SingletonMono<T>.Instance
        VB: SingletonMono(Of T).Instance
      qualifiedName:
        CSharp: ZeroFramework.SingletonMono<T>.Instance
        VB: ZeroFramework.SingletonMono(Of T).Instance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Instance
        path: ''
        startLine: 2244
      summary: "\n静态属性：封装相关实例对象\n"
      example: []
      syntax:
        content:
          CSharp: public static T Instance { get; }
          VB: Public Shared ReadOnly Property Instance As T
        parameters: []
        return:
          type: '{T}'
      overload: ZeroFramework.SingletonMono`1.Instance*
    - id: ZeroFramework.SingletonMono`1.ID
      commentId: F:ZeroFramework.SingletonMono`1.ID
      language: CSharp
      name:
        CSharp: ID
        VB: ID
      nameWithType:
        CSharp: SingletonMono<T>.ID
        VB: SingletonMono(Of T).ID
      qualifiedName:
        CSharp: ZeroFramework.SingletonMono<T>.ID
        VB: ZeroFramework.SingletonMono(Of T).ID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ID
        path: ''
        startLine: 2258
      syntax:
        content:
          CSharp: public int ID
          VB: Public ID As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.SingletonMono`1.OnSingletonInit
      commentId: M:ZeroFramework.SingletonMono`1.OnSingletonInit
      language: CSharp
      name:
        CSharp: OnSingletonInit()
        VB: OnSingletonInit()
      nameWithType:
        CSharp: SingletonMono<T>.OnSingletonInit()
        VB: SingletonMono(Of T).OnSingletonInit()
      qualifiedName:
        CSharp: ZeroFramework.SingletonMono<T>.OnSingletonInit()
        VB: ZeroFramework.SingletonMono(Of T).OnSingletonInit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: OnSingletonInit
        path: ''
        startLine: 2263
      summary: "\n实现接口的单例初始化，只在创建的时候初始化一次\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void OnSingletonInit()
          VB: Public Overridable Sub OnSingletonInit()
      overload: ZeroFramework.SingletonMono`1.OnSingletonInit*
      implements:
      - ZeroFramework.ISingleton.OnSingletonInit
    - id: ZeroFramework.SingletonMono`1.Dispose
      commentId: M:ZeroFramework.SingletonMono`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: SingletonMono<T>.Dispose()
        VB: SingletonMono(Of T).Dispose()
      qualifiedName:
        CSharp: ZeroFramework.SingletonMono<T>.Dispose()
        VB: ZeroFramework.SingletonMono(Of T).Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: Dispose
        path: ''
        startLine: 2272
      summary: "\n资源释放\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void Dispose()
          VB: Public Overridable Sub Dispose()
      overload: ZeroFramework.SingletonMono`1.Dispose*
    - id: ZeroFramework.SingletonMono`1.OnApplicationQuit
      commentId: M:ZeroFramework.SingletonMono`1.OnApplicationQuit
      language: CSharp
      name:
        CSharp: OnApplicationQuit()
        VB: OnApplicationQuit()
      nameWithType:
        CSharp: SingletonMono<T>.OnApplicationQuit()
        VB: SingletonMono(Of T).OnApplicationQuit()
      qualifiedName:
        CSharp: ZeroFramework.SingletonMono<T>.OnApplicationQuit()
        VB: ZeroFramework.SingletonMono(Of T).OnApplicationQuit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: OnApplicationQuit
        path: ''
        startLine: 2282
      summary: "\n释放当前对象\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnApplicationQuit()
          VB: Protected Overridable Sub OnApplicationQuit()
      overload: ZeroFramework.SingletonMono`1.OnApplicationQuit*
    - id: ZeroFramework.SingletonMono`1.ResetID
      commentId: M:ZeroFramework.SingletonMono`1.ResetID
      language: CSharp
      name:
        CSharp: ResetID()
        VB: ResetID()
      nameWithType:
        CSharp: SingletonMono<T>.ResetID()
        VB: SingletonMono(Of T).ResetID()
      qualifiedName:
        CSharp: ZeroFramework.SingletonMono<T>.ResetID()
        VB: ZeroFramework.SingletonMono(Of T).ResetID()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ResetID
        path: ''
        startLine: 2290
      summary: "\n重置ID\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void ResetID()
          VB: Public Overridable Sub ResetID()
      overload: ZeroFramework.SingletonMono`1.ResetID*
      implements:
      - ZeroFramework.ISingleton.ResetID
    - id: ZeroFramework.SingletonMono`1.GetID
      commentId: M:ZeroFramework.SingletonMono`1.GetID
      language: CSharp
      name:
        CSharp: GetID()
        VB: GetID()
      nameWithType:
        CSharp: SingletonMono<T>.GetID()
        VB: SingletonMono(Of T).GetID()
      qualifiedName:
        CSharp: ZeroFramework.SingletonMono<T>.GetID()
        VB: ZeroFramework.SingletonMono(Of T).GetID()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetID
        path: ''
        startLine: 2300
      summary: "\n单例ID\n"
      example: []
      syntax:
        content:
          CSharp: public virtual int GetID()
          VB: Public Overridable Function GetID() As Integer
        return:
          type: System.Int32
          description: ''
      overload: ZeroFramework.SingletonMono`1.GetID*
      implements:
      - ZeroFramework.ISingleton.GetID
  - id: ZeroFramework.ISingleton
    commentId: T:ZeroFramework.ISingleton
    language: CSharp
    name:
      CSharp: ISingleton
      VB: ISingleton
    nameWithType:
      CSharp: ISingleton
      VB: ISingleton
    qualifiedName:
      CSharp: ZeroFramework.ISingleton
      VB: ZeroFramework.ISingleton
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: ISingleton
      path: ''
      startLine: 2316
    syntax:
      content:
        CSharp: public interface ISingleton
        VB: Public Interface ISingleton
    items:
    - id: ZeroFramework.ISingleton.OnSingletonInit
      commentId: M:ZeroFramework.ISingleton.OnSingletonInit
      language: CSharp
      name:
        CSharp: OnSingletonInit()
        VB: OnSingletonInit()
      nameWithType:
        CSharp: ISingleton.OnSingletonInit()
        VB: ISingleton.OnSingletonInit()
      qualifiedName:
        CSharp: ZeroFramework.ISingleton.OnSingletonInit()
        VB: ZeroFramework.ISingleton.OnSingletonInit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: OnSingletonInit
        path: ''
        startLine: 2318
      syntax:
        content:
          CSharp: void OnSingletonInit()
          VB: Sub OnSingletonInit()
      overload: ZeroFramework.ISingleton.OnSingletonInit*
    - id: ZeroFramework.ISingleton.GetID
      commentId: M:ZeroFramework.ISingleton.GetID
      language: CSharp
      name:
        CSharp: GetID()
        VB: GetID()
      nameWithType:
        CSharp: ISingleton.GetID()
        VB: ISingleton.GetID()
      qualifiedName:
        CSharp: ZeroFramework.ISingleton.GetID()
        VB: ZeroFramework.ISingleton.GetID()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: GetID
        path: ''
        startLine: 2320
      syntax:
        content:
          CSharp: int GetID()
          VB: Function GetID() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.ISingleton.GetID*
    - id: ZeroFramework.ISingleton.ResetID
      commentId: M:ZeroFramework.ISingleton.ResetID
      language: CSharp
      name:
        CSharp: ResetID()
        VB: ResetID()
      nameWithType:
        CSharp: ISingleton.ResetID()
        VB: ISingleton.ResetID()
      qualifiedName:
        CSharp: ZeroFramework.ISingleton.ResetID()
        VB: ZeroFramework.ISingleton.ResetID()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: ResetID
        path: ''
        startLine: 2322
      syntax:
        content:
          CSharp: void ResetID()
          VB: Sub ResetID()
      overload: ZeroFramework.ISingleton.ResetID*
  - id: ZeroFramework.MonoSingletonPathAttribute
    commentId: T:ZeroFramework.MonoSingletonPathAttribute
    language: CSharp
    name:
      CSharp: MonoSingletonPathAttribute
      VB: MonoSingletonPathAttribute
    nameWithType:
      CSharp: MonoSingletonPathAttribute
      VB: MonoSingletonPathAttribute
    qualifiedName:
      CSharp: ZeroFramework.MonoSingletonPathAttribute
      VB: ZeroFramework.MonoSingletonPathAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: MonoSingletonPathAttribute
      path: ''
      startLine: 2337
    syntax:
      content:
        CSharp: 'public class MonoSingletonPathAttribute : Attribute'
        VB: Public Class MonoSingletonPathAttribute Inherits Attribute
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.MonoSingletonPathAttribute.PathInHierarchy
      commentId: P:ZeroFramework.MonoSingletonPathAttribute.PathInHierarchy
      language: CSharp
      name:
        CSharp: PathInHierarchy
        VB: PathInHierarchy
      nameWithType:
        CSharp: MonoSingletonPathAttribute.PathInHierarchy
        VB: MonoSingletonPathAttribute.PathInHierarchy
      qualifiedName:
        CSharp: ZeroFramework.MonoSingletonPathAttribute.PathInHierarchy
        VB: ZeroFramework.MonoSingletonPathAttribute.PathInHierarchy
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: PathInHierarchy
        path: ''
        startLine: 2340
      syntax:
        content:
          CSharp: public string PathInHierarchy { get; }
          VB: Public Property PathInHierarchy As String
        parameters: []
        return:
          type: System.String
      overload: ZeroFramework.MonoSingletonPathAttribute.PathInHierarchy*
    - id: ZeroFramework.MonoSingletonPathAttribute.#ctor(System.String)
      commentId: M:ZeroFramework.MonoSingletonPathAttribute.#ctor(System.String)
      language: CSharp
      name:
        CSharp: MonoSingletonPathAttribute(string)
        VB: New(String)
      nameWithType:
        CSharp: MonoSingletonPathAttribute.MonoSingletonPathAttribute(string)
        VB: MonoSingletonPathAttribute.New(String)
      qualifiedName:
        CSharp: ZeroFramework.MonoSingletonPathAttribute.MonoSingletonPathAttribute(string)
        VB: ZeroFramework.MonoSingletonPathAttribute.New(String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: .ctor
        path: ''
        startLine: 2342
      syntax:
        content:
          CSharp: public MonoSingletonPathAttribute(string pathInHierarchy)
          VB: Public Sub New(pathInHierarchy As String)
        parameters:
        - id: pathInHierarchy
          type: System.String
      overload: ZeroFramework.MonoSingletonPathAttribute.#ctor*
  - id: ZeroFramework.SingletonCreator
    commentId: T:ZeroFramework.SingletonCreator
    language: CSharp
    name:
      CSharp: SingletonCreator
      VB: SingletonCreator
    nameWithType:
      CSharp: SingletonCreator
      VB: SingletonCreator
    qualifiedName:
      CSharp: ZeroFramework.SingletonCreator
      VB: ZeroFramework.SingletonCreator
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework
    source:
      id: SingletonCreator
      path: ''
      startLine: 2362
    syntax:
      content:
        CSharp: public static class SingletonCreator
        VB: Public Module SingletonCreator
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.SingletonCreator.CreateSingleton``1
      commentId: M:ZeroFramework.SingletonCreator.CreateSingleton``1
      language: CSharp
      name:
        CSharp: CreateSingleton<T>()
        VB: CreateSingleton(Of T)()
      nameWithType:
        CSharp: SingletonCreator.CreateSingleton<T>()
        VB: SingletonCreator.CreateSingleton(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.SingletonCreator.CreateSingleton<T>()
        VB: ZeroFramework.SingletonCreator.CreateSingleton(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: CreateSingleton
        path: ''
        startLine: 2392
      summary: "\n创建单例对象：Mono单例或非Mono单例\n"
      example: []
      syntax:
        content:
          CSharp: 'public static T CreateSingleton<T>() where T : class, ISingleton'
          VB: Public Shared Function CreateSingleton(Of T As {Class, ISingleton})() As T
        typeParameters:
        - id: T
          description: ''
        return:
          type: '{T}'
          description: ''
      overload: ZeroFramework.SingletonCreator.CreateSingleton*
    - id: ZeroFramework.SingletonCreator.CreateMonoSingleton``1
      commentId: M:ZeroFramework.SingletonCreator.CreateMonoSingleton``1
      language: CSharp
      name:
        CSharp: CreateMonoSingleton<T>()
        VB: CreateMonoSingleton(Of T)()
      nameWithType:
        CSharp: SingletonCreator.CreateMonoSingleton<T>()
        VB: SingletonCreator.CreateMonoSingleton(Of T)()
      qualifiedName:
        CSharp: ZeroFramework.SingletonCreator.CreateMonoSingleton<T>()
        VB: ZeroFramework.SingletonCreator.CreateMonoSingleton(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework
      source:
        id: CreateMonoSingleton
        path: ''
        startLine: 2414
      summary: "\n创建Mono单例\n"
      example: []
      syntax:
        content:
          CSharp: 'public static T CreateMonoSingleton<T>() where T : class, ISingleton'
          VB: Public Shared Function CreateMonoSingleton(Of T As {Class, ISingleton})() As T
        typeParameters:
        - id: T
          description: ''
        return:
          type: '{T}'
          description: ''
      overload: ZeroFramework.SingletonCreator.CreateMonoSingleton*
- id: ZeroFramework.Utility
  commentId: N:ZeroFramework.Utility
  language: CSharp
  name:
    CSharp: ZeroFramework.Utility
    VB: ZeroFramework.Utility
  nameWithType:
    CSharp: ZeroFramework.Utility
    VB: ZeroFramework.Utility
  qualifiedName:
    CSharp: ZeroFramework.Utility
    VB: ZeroFramework.Utility
  type: Namespace
  assemblies:
  - cs.temp.dll
  items:
  - id: ZeroFramework.Utility.ReadOnlyDrawer
    commentId: T:ZeroFramework.Utility.ReadOnlyDrawer
    language: CSharp
    name:
      CSharp: ReadOnlyDrawer
      VB: ReadOnlyDrawer
    nameWithType:
      CSharp: ReadOnlyDrawer
      VB: ReadOnlyDrawer
    qualifiedName:
      CSharp: ZeroFramework.Utility.ReadOnlyDrawer
      VB: ZeroFramework.Utility.ReadOnlyDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: ReadOnlyDrawer
      path: ''
      startLine: 2772
    syntax:
      content:
        CSharp: 'public class ReadOnlyDrawer : PropertyDrawer'
        VB: Public Class ReadOnlyDrawer Inherits PropertyDrawer
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.ReadOnlyDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      commentId: M:ZeroFramework.Utility.ReadOnlyDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: GetPropertyHeight(SerializedProperty, GUIContent)
        VB: GetPropertyHeight(SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ReadOnlyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: ReadOnlyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ReadOnlyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: ZeroFramework.Utility.ReadOnlyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetPropertyHeight
        path: ''
        startLine: 2775
      syntax:
        content:
          CSharp: public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
          VB: Public Overrides Function GetPropertyHeight([property] As SerializedProperty, label As GUIContent) As Single
        parameters:
        - id: property
          type: Global.SerializedProperty
        - id: label
          type: Global.GUIContent
        return:
          type: System.Single
      overload: ZeroFramework.Utility.ReadOnlyDrawer.GetPropertyHeight*
    - id: ZeroFramework.Utility.ReadOnlyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:ZeroFramework.Utility.ReadOnlyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ReadOnlyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: ReadOnlyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ReadOnlyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: ZeroFramework.Utility.ReadOnlyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: OnGUI
        path: ''
        startLine: 2780
      syntax:
        content:
          CSharp: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
          VB: Public Overrides Sub OnGUI(position As Rect, [property] As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: Global.Rect
        - id: property
          type: Global.SerializedProperty
        - id: label
          type: Global.GUIContent
      overload: ZeroFramework.Utility.ReadOnlyDrawer.OnGUI*
  - id: ZeroFramework.Utility.InspectorViewer
    commentId: T:ZeroFramework.Utility.InspectorViewer
    language: CSharp
    name:
      CSharp: InspectorViewer
      VB: InspectorViewer
    nameWithType:
      CSharp: InspectorViewer
      VB: InspectorViewer
    qualifiedName:
      CSharp: ZeroFramework.Utility.InspectorViewer
      VB: ZeroFramework.Utility.InspectorViewer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: InspectorViewer
      path: ''
      startLine: 2802
    syntax:
      content:
        CSharp: 'public class InspectorViewer : VisualElement'
        VB: Public Class InspectorViewer Inherits VisualElement
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.InspectorViewer.UpdateSelection(ZeroFramework.Utility.NodeTreeViewer,ZeroFramework.Utility.NodeView)
      commentId: M:ZeroFramework.Utility.InspectorViewer.UpdateSelection(ZeroFramework.Utility.NodeTreeViewer,ZeroFramework.Utility.NodeView)
      language: CSharp
      name:
        CSharp: UpdateSelection(NodeTreeViewer, NodeView)
        VB: UpdateSelection(NodeTreeViewer, NodeView)
      nameWithType:
        CSharp: InspectorViewer.UpdateSelection(NodeTreeViewer, NodeView)
        VB: InspectorViewer.UpdateSelection(NodeTreeViewer, NodeView)
      qualifiedName:
        CSharp: ZeroFramework.Utility.InspectorViewer.UpdateSelection(ZeroFramework.Utility.NodeTreeViewer, ZeroFramework.Utility.NodeView)
        VB: ZeroFramework.Utility.InspectorViewer.UpdateSelection(ZeroFramework.Utility.NodeTreeViewer, ZeroFramework.Utility.NodeView)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: UpdateSelection
        path: ''
        startLine: 2808
      syntax:
        content:
          CSharp: public void UpdateSelection(NodeTreeViewer nodeTreeViewer, NodeView nodeView)
          VB: Public Sub UpdateSelection(nodeTreeViewer As NodeTreeViewer, nodeView As NodeView)
        parameters:
        - id: nodeTreeViewer
          type: ZeroFramework.Utility.NodeTreeViewer
        - id: nodeView
          type: ZeroFramework.Utility.NodeView
      overload: ZeroFramework.Utility.InspectorViewer.UpdateSelection*
  - id: ZeroFramework.Utility.InspectorViewer.UxmlFactory
    commentId: T:ZeroFramework.Utility.InspectorViewer.UxmlFactory
    language: CSharp
    name:
      CSharp: InspectorViewer.UxmlFactory
      VB: InspectorViewer.UxmlFactory
    nameWithType:
      CSharp: InspectorViewer.UxmlFactory
      VB: InspectorViewer.UxmlFactory
    qualifiedName:
      CSharp: ZeroFramework.Utility.InspectorViewer.UxmlFactory
      VB: ZeroFramework.Utility.InspectorViewer.UxmlFactory
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: UxmlFactory
      path: ''
      startLine: 2804
    syntax:
      content:
        CSharp: 'public class InspectorViewer.UxmlFactory : InspectorViewer.UxmlFactory<InspectorViewer, VisualElement.UxmlTraits>'
        VB: Public Class InspectorViewer.UxmlFactory Inherits InspectorViewer.UxmlFactory(Of InspectorViewer, VisualElement.UxmlTraits)
    inheritance:
    - System.Object
    items: []
  - id: ZeroFramework.Utility.NodeEditor
    commentId: T:ZeroFramework.Utility.NodeEditor
    language: CSharp
    name:
      CSharp: NodeEditor
      VB: NodeEditor
    nameWithType:
      CSharp: NodeEditor
      VB: NodeEditor
    qualifiedName:
      CSharp: ZeroFramework.Utility.NodeEditor
      VB: ZeroFramework.Utility.NodeEditor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: NodeEditor
      path: ''
      startLine: 2843
    syntax:
      content:
        CSharp: 'public class NodeEditor : EditorWindow'
        VB: Public Class NodeEditor Inherits EditorWindow
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.NodeEditor.nodeTreeViewer
      commentId: F:ZeroFramework.Utility.NodeEditor.nodeTreeViewer
      language: CSharp
      name:
        CSharp: nodeTreeViewer
        VB: nodeTreeViewer
      nameWithType:
        CSharp: NodeEditor.nodeTreeViewer
        VB: NodeEditor.nodeTreeViewer
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeEditor.nodeTreeViewer
        VB: ZeroFramework.Utility.NodeEditor.nodeTreeViewer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: nodeTreeViewer
        path: ''
        startLine: 2845
      syntax:
        content:
          CSharp: public NodeTreeViewer nodeTreeViewer
          VB: Public nodeTreeViewer As NodeTreeViewer
        return:
          type: ZeroFramework.Utility.NodeTreeViewer
    - id: ZeroFramework.Utility.NodeEditor.inspectorViewer
      commentId: F:ZeroFramework.Utility.NodeEditor.inspectorViewer
      language: CSharp
      name:
        CSharp: inspectorViewer
        VB: inspectorViewer
      nameWithType:
        CSharp: NodeEditor.inspectorViewer
        VB: NodeEditor.inspectorViewer
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeEditor.inspectorViewer
        VB: ZeroFramework.Utility.NodeEditor.inspectorViewer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: inspectorViewer
        path: ''
        startLine: 2846
      syntax:
        content:
          CSharp: public InspectorViewer inspectorViewer
          VB: Public inspectorViewer As InspectorViewer
        return:
          type: ZeroFramework.Utility.InspectorViewer
    - id: ZeroFramework.Utility.NodeEditor.ShowExample
      commentId: M:ZeroFramework.Utility.NodeEditor.ShowExample
      language: CSharp
      name:
        CSharp: ShowExample()
        VB: ShowExample()
      nameWithType:
        CSharp: NodeEditor.ShowExample()
        VB: NodeEditor.ShowExample()
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeEditor.ShowExample()
        VB: ZeroFramework.Utility.NodeEditor.ShowExample()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ShowExample
        path: ''
        startLine: 2848
      syntax:
        content:
          CSharp: public static void ShowExample()
          VB: Public Shared Sub ShowExample()
      overload: ZeroFramework.Utility.NodeEditor.ShowExample*
    - id: ZeroFramework.Utility.NodeEditor.OnOpenAsset(System.Int32,System.Int32)
      commentId: M:ZeroFramework.Utility.NodeEditor.OnOpenAsset(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: OnOpenAsset(int, int)
        VB: OnOpenAsset(Integer, Integer)
      nameWithType:
        CSharp: NodeEditor.OnOpenAsset(int, int)
        VB: NodeEditor.OnOpenAsset(Integer, Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeEditor.OnOpenAsset(int, int)
        VB: ZeroFramework.Utility.NodeEditor.OnOpenAsset(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: OnOpenAsset
        path: ''
        startLine: 2855
      syntax:
        content:
          CSharp: public static bool OnOpenAsset(int instanceId, int line)
          VB: Public Shared Function OnOpenAsset(instanceId As Integer, line As Integer) As Boolean
        parameters:
        - id: instanceId
          type: System.Int32
        - id: line
          type: System.Int32
        return:
          type: System.Boolean
      overload: ZeroFramework.Utility.NodeEditor.OnOpenAsset*
    - id: ZeroFramework.Utility.NodeEditor.CreateGUI
      commentId: M:ZeroFramework.Utility.NodeEditor.CreateGUI
      language: CSharp
      name:
        CSharp: CreateGUI()
        VB: CreateGUI()
      nameWithType:
        CSharp: NodeEditor.CreateGUI()
        VB: NodeEditor.CreateGUI()
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeEditor.CreateGUI()
        VB: ZeroFramework.Utility.NodeEditor.CreateGUI()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: CreateGUI
        path: ''
        startLine: 2866
      syntax:
        content:
          CSharp: public void CreateGUI()
          VB: Public Sub CreateGUI()
      overload: ZeroFramework.Utility.NodeEditor.CreateGUI*
  - id: ZeroFramework.Utility.NodeEditorConstant
    commentId: T:ZeroFramework.Utility.NodeEditorConstant
    language: CSharp
    name:
      CSharp: NodeEditorConstant
      VB: NodeEditorConstant
    nameWithType:
      CSharp: NodeEditorConstant
      VB: NodeEditorConstant
    qualifiedName:
      CSharp: ZeroFramework.Utility.NodeEditorConstant
      VB: ZeroFramework.Utility.NodeEditorConstant
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: NodeEditorConstant
      path: ''
      startLine: 2923
    syntax:
      content:
        CSharp: public class NodeEditorConstant
        VB: Public Class NodeEditorConstant
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.NodeEditorConstant.NODE_EDITOR_UXML
      commentId: F:ZeroFramework.Utility.NodeEditorConstant.NODE_EDITOR_UXML
      language: CSharp
      name:
        CSharp: NODE_EDITOR_UXML
        VB: NODE_EDITOR_UXML
      nameWithType:
        CSharp: NodeEditorConstant.NODE_EDITOR_UXML
        VB: NodeEditorConstant.NODE_EDITOR_UXML
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeEditorConstant.NODE_EDITOR_UXML
        VB: ZeroFramework.Utility.NodeEditorConstant.NODE_EDITOR_UXML
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: NODE_EDITOR_UXML
        path: ''
        startLine: 2927
      syntax:
        content:
          CSharp: public static readonly string NODE_EDITOR_UXML
          VB: Public Shared ReadOnly NODE_EDITOR_UXML As String
        return:
          type: System.String
    - id: ZeroFramework.Utility.NodeEditorConstant.NODE_EDITOR_USS
      commentId: F:ZeroFramework.Utility.NodeEditorConstant.NODE_EDITOR_USS
      language: CSharp
      name:
        CSharp: NODE_EDITOR_USS
        VB: NODE_EDITOR_USS
      nameWithType:
        CSharp: NodeEditorConstant.NODE_EDITOR_USS
        VB: NodeEditorConstant.NODE_EDITOR_USS
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeEditorConstant.NODE_EDITOR_USS
        VB: ZeroFramework.Utility.NodeEditorConstant.NODE_EDITOR_USS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: NODE_EDITOR_USS
        path: ''
        startLine: 2928
      syntax:
        content:
          CSharp: public static readonly string NODE_EDITOR_USS
          VB: Public Shared ReadOnly NODE_EDITOR_USS As String
        return:
          type: System.String
    - id: ZeroFramework.Utility.NodeEditorConstant.NODE_TREE_VIEWER_USS
      commentId: F:ZeroFramework.Utility.NodeEditorConstant.NODE_TREE_VIEWER_USS
      language: CSharp
      name:
        CSharp: NODE_TREE_VIEWER_USS
        VB: NODE_TREE_VIEWER_USS
      nameWithType:
        CSharp: NodeEditorConstant.NODE_TREE_VIEWER_USS
        VB: NodeEditorConstant.NODE_TREE_VIEWER_USS
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeEditorConstant.NODE_TREE_VIEWER_USS
        VB: ZeroFramework.Utility.NodeEditorConstant.NODE_TREE_VIEWER_USS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: NODE_TREE_VIEWER_USS
        path: ''
        startLine: 2930
      syntax:
        content:
          CSharp: public static readonly string NODE_TREE_VIEWER_USS
          VB: Public Shared ReadOnly NODE_TREE_VIEWER_USS As String
        return:
          type: System.String
    - id: ZeroFramework.Utility.NodeEditorConstant.NODE_VIEW_UXML
      commentId: F:ZeroFramework.Utility.NodeEditorConstant.NODE_VIEW_UXML
      language: CSharp
      name:
        CSharp: NODE_VIEW_UXML
        VB: NODE_VIEW_UXML
      nameWithType:
        CSharp: NodeEditorConstant.NODE_VIEW_UXML
        VB: NodeEditorConstant.NODE_VIEW_UXML
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeEditorConstant.NODE_VIEW_UXML
        VB: ZeroFramework.Utility.NodeEditorConstant.NODE_VIEW_UXML
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: NODE_VIEW_UXML
        path: ''
        startLine: 2932
      syntax:
        content:
          CSharp: public static readonly string NODE_VIEW_UXML
          VB: Public Shared ReadOnly NODE_VIEW_UXML As String
        return:
          type: System.String
  - id: ZeroFramework.Utility.NodeTreeViewer
    commentId: T:ZeroFramework.Utility.NodeTreeViewer
    language: CSharp
    name:
      CSharp: NodeTreeViewer
      VB: NodeTreeViewer
    nameWithType:
      CSharp: NodeTreeViewer
      VB: NodeTreeViewer
    qualifiedName:
      CSharp: ZeroFramework.Utility.NodeTreeViewer
      VB: ZeroFramework.Utility.NodeTreeViewer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: NodeTreeViewer
      path: ''
      startLine: 2963
    syntax:
      content:
        CSharp: 'public class NodeTreeViewer : GraphView'
        VB: Public Class NodeTreeViewer Inherits GraphView
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.NodeTreeViewer.tree
      commentId: F:ZeroFramework.Utility.NodeTreeViewer.tree
      language: CSharp
      name:
        CSharp: tree
        VB: tree
      nameWithType:
        CSharp: NodeTreeViewer.tree
        VB: NodeTreeViewer.tree
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTreeViewer.tree
        VB: ZeroFramework.Utility.NodeTreeViewer.tree
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: tree
        path: ''
        startLine: 2967
      syntax:
        content:
          CSharp: public NodeTree tree
          VB: Public tree As NodeTree
        return:
          type: ZeroFramework.Utility.NodeTree
    - id: ZeroFramework.Utility.NodeTreeViewer.OnNodeSelected
      commentId: F:ZeroFramework.Utility.NodeTreeViewer.OnNodeSelected
      language: CSharp
      name:
        CSharp: OnNodeSelected
        VB: OnNodeSelected
      nameWithType:
        CSharp: NodeTreeViewer.OnNodeSelected
        VB: NodeTreeViewer.OnNodeSelected
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTreeViewer.OnNodeSelected
        VB: ZeroFramework.Utility.NodeTreeViewer.OnNodeSelected
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: OnNodeSelected
        path: ''
        startLine: 2968
      syntax:
        content:
          CSharp: public Action<NodeView> OnNodeSelected
          VB: Public OnNodeSelected As Action(Of NodeView)
        return:
          type: Global.Action{ZeroFramework.Utility.NodeView}
    - id: ZeroFramework.Utility.NodeTreeViewer.#ctor
      commentId: M:ZeroFramework.Utility.NodeTreeViewer.#ctor
      language: CSharp
      name:
        CSharp: NodeTreeViewer()
        VB: New()
      nameWithType:
        CSharp: NodeTreeViewer.NodeTreeViewer()
        VB: NodeTreeViewer.New()
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTreeViewer.NodeTreeViewer()
        VB: ZeroFramework.Utility.NodeTreeViewer.New()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 2971
      syntax:
        content:
          CSharp: public NodeTreeViewer()
          VB: Public Sub New()
      overload: ZeroFramework.Utility.NodeTreeViewer.#ctor*
    - id: ZeroFramework.Utility.NodeTreeViewer.BuildContextualMenu(ContextualMenuPopulateEvent)
      commentId: M:ZeroFramework.Utility.NodeTreeViewer.BuildContextualMenu(ContextualMenuPopulateEvent)
      language: CSharp
      name:
        CSharp: BuildContextualMenu(ContextualMenuPopulateEvent)
        VB: BuildContextualMenu(ContextualMenuPopulateEvent)
      nameWithType:
        CSharp: NodeTreeViewer.BuildContextualMenu(ContextualMenuPopulateEvent)
        VB: NodeTreeViewer.BuildContextualMenu(ContextualMenuPopulateEvent)
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTreeViewer.BuildContextualMenu(ContextualMenuPopulateEvent)
        VB: ZeroFramework.Utility.NodeTreeViewer.BuildContextualMenu(ContextualMenuPopulateEvent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: BuildContextualMenu
        path: ''
        startLine: 2993
      syntax:
        content:
          CSharp: public override void BuildContextualMenu(ContextualMenuPopulateEvent evt)
          VB: Public Overrides Sub BuildContextualMenu(evt As ContextualMenuPopulateEvent)
        parameters:
        - id: evt
          type: Global.ContextualMenuPopulateEvent
      overload: ZeroFramework.Utility.NodeTreeViewer.BuildContextualMenu*
    - id: ZeroFramework.Utility.NodeTreeViewer.PopulateView(ZeroFramework.Utility.NodeTree)
      commentId: M:ZeroFramework.Utility.NodeTreeViewer.PopulateView(ZeroFramework.Utility.NodeTree)
      language: CSharp
      name:
        CSharp: PopulateView(NodeTree)
        VB: PopulateView(NodeTree)
      nameWithType:
        CSharp: NodeTreeViewer.PopulateView(NodeTree)
        VB: NodeTreeViewer.PopulateView(NodeTree)
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTreeViewer.PopulateView(ZeroFramework.Utility.NodeTree)
        VB: ZeroFramework.Utility.NodeTreeViewer.PopulateView(ZeroFramework.Utility.NodeTree)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: PopulateView
        path: ''
        startLine: 3048
      syntax:
        content:
          CSharp: public void PopulateView(NodeTree tree)
          VB: Public Sub PopulateView(tree As NodeTree)
        parameters:
        - id: tree
          type: ZeroFramework.Utility.NodeTree
      overload: ZeroFramework.Utility.NodeTreeViewer.PopulateView*
    - id: ZeroFramework.Utility.NodeTreeViewer.GetCompatiblePorts(Port,NodeAdapter)
      commentId: M:ZeroFramework.Utility.NodeTreeViewer.GetCompatiblePorts(Port,NodeAdapter)
      language: CSharp
      name:
        CSharp: GetCompatiblePorts(Port, NodeAdapter)
        VB: GetCompatiblePorts(Port, NodeAdapter)
      nameWithType:
        CSharp: NodeTreeViewer.GetCompatiblePorts(Port, NodeAdapter)
        VB: NodeTreeViewer.GetCompatiblePorts(Port, NodeAdapter)
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTreeViewer.GetCompatiblePorts(Port, NodeAdapter)
        VB: ZeroFramework.Utility.NodeTreeViewer.GetCompatiblePorts(Port, NodeAdapter)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetCompatiblePorts
        path: ''
        startLine: 3113
      syntax:
        content:
          CSharp: public override List<Port> GetCompatiblePorts(Port startPort, NodeAdapter nodeAdapter)
          VB: Public Overrides Function GetCompatiblePorts(startPort As Port, nodeAdapter As NodeAdapter) As List(Of Port)
        parameters:
        - id: startPort
          type: Global.Port
        - id: nodeAdapter
          type: Global.NodeAdapter
        return:
          type: System.Collections.Generic.List{Port}
      overload: ZeroFramework.Utility.NodeTreeViewer.GetCompatiblePorts*
    - id: ZeroFramework.Utility.NodeTreeViewer.UpdateNodeStates
      commentId: M:ZeroFramework.Utility.NodeTreeViewer.UpdateNodeStates
      language: CSharp
      name:
        CSharp: UpdateNodeStates()
        VB: UpdateNodeStates()
      nameWithType:
        CSharp: NodeTreeViewer.UpdateNodeStates()
        VB: NodeTreeViewer.UpdateNodeStates()
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTreeViewer.UpdateNodeStates()
        VB: ZeroFramework.Utility.NodeTreeViewer.UpdateNodeStates()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: UpdateNodeStates
        path: ''
        startLine: 3121
      syntax:
        content:
          CSharp: public void UpdateNodeStates()
          VB: Public Sub UpdateNodeStates()
      overload: ZeroFramework.Utility.NodeTreeViewer.UpdateNodeStates*
  - id: ZeroFramework.Utility.NodeTreeViewer.UxmlFactory
    commentId: T:ZeroFramework.Utility.NodeTreeViewer.UxmlFactory
    language: CSharp
    name:
      CSharp: NodeTreeViewer.UxmlFactory
      VB: NodeTreeViewer.UxmlFactory
    nameWithType:
      CSharp: NodeTreeViewer.UxmlFactory
      VB: NodeTreeViewer.UxmlFactory
    qualifiedName:
      CSharp: ZeroFramework.Utility.NodeTreeViewer.UxmlFactory
      VB: ZeroFramework.Utility.NodeTreeViewer.UxmlFactory
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: UxmlFactory
      path: ''
      startLine: 2965
    syntax:
      content:
        CSharp: 'public class NodeTreeViewer.UxmlFactory : NodeTreeViewer.UxmlFactory<NodeTreeViewer, GraphView.UxmlTraits>'
        VB: Public Class NodeTreeViewer.UxmlFactory Inherits NodeTreeViewer.UxmlFactory(Of NodeTreeViewer, GraphView.UxmlTraits)
    inheritance:
    - System.Object
    items: []
  - id: ZeroFramework.Utility.NodeView
    commentId: T:ZeroFramework.Utility.NodeView
    language: CSharp
    name:
      CSharp: NodeView
      VB: NodeView
    nameWithType:
      CSharp: NodeView
      VB: NodeView
    qualifiedName:
      CSharp: ZeroFramework.Utility.NodeView
      VB: ZeroFramework.Utility.NodeView
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: NodeView
      path: ''
      startLine: 3150
    syntax:
      content:
        CSharp: 'public class NodeView : UnityEditor.Experimental.GraphView.Node'
        VB: Public Class NodeView Inherits UnityEditor.Experimental.GraphView.Node
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.NodeView.node
      commentId: F:ZeroFramework.Utility.NodeView.node
      language: CSharp
      name:
        CSharp: node
        VB: node
      nameWithType:
        CSharp: NodeView.node
        VB: NodeView.node
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeView.node
        VB: ZeroFramework.Utility.NodeView.node
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: node
        path: ''
        startLine: 3152
      syntax:
        content:
          CSharp: public Node node
          VB: Public node As Node
        return:
          type: ZeroFramework.Utility.Node
    - id: ZeroFramework.Utility.NodeView.input
      commentId: F:ZeroFramework.Utility.NodeView.input
      language: CSharp
      name:
        CSharp: input
        VB: input
      nameWithType:
        CSharp: NodeView.input
        VB: NodeView.input
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeView.input
        VB: ZeroFramework.Utility.NodeView.input
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: input
        path: ''
        startLine: 3153
      syntax:
        content:
          CSharp: public Port input
          VB: Public input As Port
        return:
          type: Global.Port
    - id: ZeroFramework.Utility.NodeView.output
      commentId: F:ZeroFramework.Utility.NodeView.output
      language: CSharp
      name:
        CSharp: output
        VB: output
      nameWithType:
        CSharp: NodeView.output
        VB: NodeView.output
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeView.output
        VB: ZeroFramework.Utility.NodeView.output
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: output
        path: ''
        startLine: 3154
      syntax:
        content:
          CSharp: public Port output
          VB: Public output As Port
        return:
          type: Global.Port
    - id: ZeroFramework.Utility.NodeView.OnNodeSelected
      commentId: F:ZeroFramework.Utility.NodeView.OnNodeSelected
      language: CSharp
      name:
        CSharp: OnNodeSelected
        VB: OnNodeSelected
      nameWithType:
        CSharp: NodeView.OnNodeSelected
        VB: NodeView.OnNodeSelected
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeView.OnNodeSelected
        VB: ZeroFramework.Utility.NodeView.OnNodeSelected
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: OnNodeSelected
        path: ''
        startLine: 3155
      syntax:
        content:
          CSharp: public Action<NodeView> OnNodeSelected
          VB: Public OnNodeSelected As Action(Of NodeView)
        return:
          type: Global.Action{ZeroFramework.Utility.NodeView}
    - id: ZeroFramework.Utility.NodeView.#ctor(ZeroFramework.Utility.Node)
      commentId: M:ZeroFramework.Utility.NodeView.#ctor(ZeroFramework.Utility.Node)
      language: CSharp
      name:
        CSharp: NodeView(Node)
        VB: New(Node)
      nameWithType:
        CSharp: NodeView.NodeView(Node)
        VB: NodeView.New(Node)
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeView.NodeView(ZeroFramework.Utility.Node)
        VB: ZeroFramework.Utility.NodeView.New(ZeroFramework.Utility.Node)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 3157
      syntax:
        content:
          CSharp: public NodeView(Node node)
          VB: Public Sub New(node As Node)
        parameters:
        - id: node
          type: ZeroFramework.Utility.Node
      overload: ZeroFramework.Utility.NodeView.#ctor*
    - id: ZeroFramework.Utility.NodeView.SetNodeStateStyle
      commentId: M:ZeroFramework.Utility.NodeView.SetNodeStateStyle
      language: CSharp
      name:
        CSharp: SetNodeStateStyle()
        VB: SetNodeStateStyle()
      nameWithType:
        CSharp: NodeView.SetNodeStateStyle()
        VB: NodeView.SetNodeStateStyle()
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeView.SetNodeStateStyle()
        VB: ZeroFramework.Utility.NodeView.SetNodeStateStyle()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: SetNodeStateStyle
        path: ''
        startLine: 3243
      syntax:
        content:
          CSharp: public void SetNodeStateStyle()
          VB: Public Sub SetNodeStateStyle()
      overload: ZeroFramework.Utility.NodeView.SetNodeStateStyle*
    - id: ZeroFramework.Utility.NodeView.OnSelected
      commentId: M:ZeroFramework.Utility.NodeView.OnSelected
      language: CSharp
      name:
        CSharp: OnSelected()
        VB: OnSelected()
      nameWithType:
        CSharp: NodeView.OnSelected()
        VB: NodeView.OnSelected()
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeView.OnSelected()
        VB: ZeroFramework.Utility.NodeView.OnSelected()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: OnSelected
        path: ''
        startLine: 3260
      syntax:
        content:
          CSharp: public override void OnSelected()
          VB: Public Overrides Sub OnSelected()
      overload: ZeroFramework.Utility.NodeView.OnSelected*
    - id: ZeroFramework.Utility.NodeView.OnUnselected
      commentId: M:ZeroFramework.Utility.NodeView.OnUnselected
      language: CSharp
      name:
        CSharp: OnUnselected()
        VB: OnUnselected()
      nameWithType:
        CSharp: NodeView.OnUnselected()
        VB: NodeView.OnUnselected()
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeView.OnUnselected()
        VB: ZeroFramework.Utility.NodeView.OnUnselected()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: OnUnselected
        path: ''
        startLine: 3266
      syntax:
        content:
          CSharp: public override void OnUnselected()
          VB: Public Overrides Sub OnUnselected()
      overload: ZeroFramework.Utility.NodeView.OnUnselected*
    - id: ZeroFramework.Utility.NodeView.SetPosition(Rect)
      commentId: M:ZeroFramework.Utility.NodeView.SetPosition(Rect)
      language: CSharp
      name:
        CSharp: SetPosition(Rect)
        VB: SetPosition(Rect)
      nameWithType:
        CSharp: NodeView.SetPosition(Rect)
        VB: NodeView.SetPosition(Rect)
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeView.SetPosition(Rect)
        VB: ZeroFramework.Utility.NodeView.SetPosition(Rect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: SetPosition
        path: ''
        startLine: 3273
      syntax:
        content:
          CSharp: public override void SetPosition(Rect newPos)
          VB: Public Overrides Sub SetPosition(newPos As Rect)
        parameters:
        - id: newPos
          type: Global.Rect
      overload: ZeroFramework.Utility.NodeView.SetPosition*
  - id: ZeroFramework.Utility.ZeroToolKits
    commentId: T:ZeroFramework.Utility.ZeroToolKits
    language: CSharp
    name:
      CSharp: ZeroToolKits
      VB: ZeroToolKits
    nameWithType:
      CSharp: ZeroToolKits
      VB: ZeroToolKits
    qualifiedName:
      CSharp: ZeroFramework.Utility.ZeroToolKits
      VB: ZeroFramework.Utility.ZeroToolKits
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: ZeroToolKits
      path: ''
      startLine: 3302
    syntax:
      content:
        CSharp: 'public class ZeroToolKits : Singleton<ZeroToolKits>, ISingleton, IUtility'
        VB: Public Class ZeroToolKits Inherits Singleton(Of ZeroToolKits) Implements ISingleton, IUtility
    inheritance:
    - System.Object
    - ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}
    implements:
    - ZeroFramework.ISingleton
    - ZeroFramework.IUtility
    inheritedMembers:
    - ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.mInstance
    - ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Instance
    - ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ID
    - ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Dispose
    - ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.OnSingletonInit
    - ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ResetID
    - ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.GetID
    items:
    - id: ZeroFramework.Utility.ZeroToolKits._G
      commentId: P:ZeroFramework.Utility.ZeroToolKits._G
      language: CSharp
      name:
        CSharp: _G
        VB: _G
      nameWithType:
        CSharp: ZeroToolKits._G
        VB: ZeroToolKits._G
      qualifiedName:
        CSharp: ZeroFramework.Utility.ZeroToolKits._G
        VB: ZeroFramework.Utility.ZeroToolKits._G
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: _G
        path: ''
        startLine: 3310
      syntax:
        content:
          CSharp: public IConfigKit _G { get; }
          VB: Public ReadOnly Property _G As IConfigKit
        parameters: []
        return:
          type: ZeroFramework.Utility.IConfigKit
      overload: ZeroFramework.Utility.ZeroToolKits._G*
    - id: ZeroFramework.Utility.ZeroToolKits.LogKit
      commentId: P:ZeroFramework.Utility.ZeroToolKits.LogKit
      language: CSharp
      name:
        CSharp: LogKit
        VB: LogKit
      nameWithType:
        CSharp: ZeroToolKits.LogKit
        VB: ZeroToolKits.LogKit
      qualifiedName:
        CSharp: ZeroFramework.Utility.ZeroToolKits.LogKit
        VB: ZeroFramework.Utility.ZeroToolKits.LogKit
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: LogKit
        path: ''
        startLine: 3326
      syntax:
        content:
          CSharp: public ILogKit LogKit { get; }
          VB: Public ReadOnly Property LogKit As ILogKit
        parameters: []
        return:
          type: Global.ILogKit
      overload: ZeroFramework.Utility.ZeroToolKits.LogKit*
    - id: ZeroFramework.Utility.ZeroToolKits.FileKit
      commentId: P:ZeroFramework.Utility.ZeroToolKits.FileKit
      language: CSharp
      name:
        CSharp: FileKit
        VB: FileKit
      nameWithType:
        CSharp: ZeroToolKits.FileKit
        VB: ZeroToolKits.FileKit
      qualifiedName:
        CSharp: ZeroFramework.Utility.ZeroToolKits.FileKit
        VB: ZeroFramework.Utility.ZeroToolKits.FileKit
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: FileKit
        path: ''
        startLine: 3348
      syntax:
        content:
          CSharp: public IFileKit FileKit { get; }
          VB: Public ReadOnly Property FileKit As IFileKit
        parameters: []
        return:
          type: ZeroFramework.Utility.IFileKit
      overload: ZeroFramework.Utility.ZeroToolKits.FileKit*
    - id: ZeroFramework.Utility.ZeroToolKits.PoolKit
      commentId: P:ZeroFramework.Utility.ZeroToolKits.PoolKit
      language: CSharp
      name:
        CSharp: PoolKit
        VB: PoolKit
      nameWithType:
        CSharp: ZeroToolKits.PoolKit
        VB: ZeroToolKits.PoolKit
      qualifiedName:
        CSharp: ZeroFramework.Utility.ZeroToolKits.PoolKit
        VB: ZeroFramework.Utility.ZeroToolKits.PoolKit
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: PoolKit
        path: ''
        startLine: 3363
      syntax:
        content:
          CSharp: public IPoolKit PoolKit { get; }
          VB: Public ReadOnly Property PoolKit As IPoolKit
        parameters: []
        return:
          type: ZeroFramework.Utility.IPoolKit
      overload: ZeroFramework.Utility.ZeroToolKits.PoolKit*
    - id: ZeroFramework.Utility.ZeroToolKits.TimestampKit
      commentId: P:ZeroFramework.Utility.ZeroToolKits.TimestampKit
      language: CSharp
      name:
        CSharp: TimestampKit
        VB: TimestampKit
      nameWithType:
        CSharp: ZeroToolKits.TimestampKit
        VB: ZeroToolKits.TimestampKit
      qualifiedName:
        CSharp: ZeroFramework.Utility.ZeroToolKits.TimestampKit
        VB: ZeroFramework.Utility.ZeroToolKits.TimestampKit
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: TimestampKit
        path: ''
        startLine: 3378
      syntax:
        content:
          CSharp: public ITimestampKit TimestampKit { get; }
          VB: Public ReadOnly Property TimestampKit As ITimestampKit
        parameters: []
        return:
          type: ZeroFramework.Utility.ITimestampKit
      overload: ZeroFramework.Utility.ZeroToolKits.TimestampKit*
  - id: ZeroFramework.Utility.ReadOnlyAttribute
    commentId: T:ZeroFramework.Utility.ReadOnlyAttribute
    language: CSharp
    name:
      CSharp: ReadOnlyAttribute
      VB: ReadOnlyAttribute
    nameWithType:
      CSharp: ReadOnlyAttribute
      VB: ReadOnlyAttribute
    qualifiedName:
      CSharp: ZeroFramework.Utility.ReadOnlyAttribute
      VB: ZeroFramework.Utility.ReadOnlyAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: ReadOnlyAttribute
      path: ''
      startLine: 3408
    syntax:
      content:
        CSharp: 'public class ReadOnlyAttribute : PropertyAttribute'
        VB: Public Class ReadOnlyAttribute Inherits PropertyAttribute
    inheritance:
    - System.Object
    items: []
  - id: ZeroFramework.Utility.ConfigKit
    commentId: T:ZeroFramework.Utility.ConfigKit
    language: CSharp
    name:
      CSharp: ConfigKit
      VB: ConfigKit
    nameWithType:
      CSharp: ConfigKit
      VB: ConfigKit
    qualifiedName:
      CSharp: ZeroFramework.Utility.ConfigKit
      VB: ZeroFramework.Utility.ConfigKit
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: ConfigKit
      path: ''
      startLine: 3433
    syntax:
      content:
        CSharp: 'public class ConfigKit : IUtility, IConfigKit'
        VB: Public Class ConfigKit Implements IUtility, IConfigKit
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.IUtility
    - ZeroFramework.Utility.IConfigKit
    items:
    - id: ZeroFramework.Utility.ConfigKit.LAUNCH_PATH
      commentId: F:ZeroFramework.Utility.ConfigKit.LAUNCH_PATH
      language: CSharp
      name:
        CSharp: LAUNCH_PATH
        VB: LAUNCH_PATH
      nameWithType:
        CSharp: ConfigKit.LAUNCH_PATH
        VB: ConfigKit.LAUNCH_PATH
      qualifiedName:
        CSharp: ZeroFramework.Utility.ConfigKit.LAUNCH_PATH
        VB: ZeroFramework.Utility.ConfigKit.LAUNCH_PATH
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: LAUNCH_PATH
        path: ''
        startLine: 3435
      syntax:
        content:
          CSharp: public readonly string LAUNCH_PATH
          VB: Public ReadOnly LAUNCH_PATH As String
        return:
          type: System.String
    - id: ZeroFramework.Utility.ConfigKit._G
      commentId: F:ZeroFramework.Utility.ConfigKit._G
      language: CSharp
      name:
        CSharp: _G
        VB: _G
      nameWithType:
        CSharp: ConfigKit._G
        VB: ConfigKit._G
      qualifiedName:
        CSharp: ZeroFramework.Utility.ConfigKit._G
        VB: ZeroFramework.Utility.ConfigKit._G
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: _G
        path: ''
        startLine: 3436
      syntax:
        content:
          CSharp: public JObject _G
          VB: Public _G As JObject
        return:
          type: Global.JObject
    - id: ZeroFramework.Utility.ConfigKit.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
      commentId: M:ZeroFramework.Utility.ConfigKit.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
      language: CSharp
      name:
        CSharp: ConfigKit(string, Dictionary<string, string>)
        VB: New(String, Dictionary(Of String, String))
      nameWithType:
        CSharp: ConfigKit.ConfigKit(string, Dictionary<string, string>)
        VB: ConfigKit.New(String, Dictionary(Of String, String))
      qualifiedName:
        CSharp: ZeroFramework.Utility.ConfigKit.ConfigKit(string, System.Collections.Generic.Dictionary<string, string>)
        VB: ZeroFramework.Utility.ConfigKit.New(String, System.Collections.Generic.Dictionary(Of String, String))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 3444
      syntax:
        content:
          CSharp: public ConfigKit(string loadPath, Dictionary<string, string> extraRule = null)
          VB: Public Sub New(loadPath As String, extraRule As Dictionary(Of String, String) = Nothing)
        parameters:
        - id: loadPath
          type: System.String
        - id: extraRule
          type: System.Collections.Generic.Dictionary{System.String,System.String}
      overload: ZeroFramework.Utility.ConfigKit.#ctor*
    - id: ZeroFramework.Utility.ConfigKit.Item(System.String)
      commentId: P:ZeroFramework.Utility.ConfigKit.Item(System.String)
      language: CSharp
      name:
        CSharp: this[string]
        VB: this[](String)
      nameWithType:
        CSharp: ConfigKit.this[string]
        VB: ConfigKit.this[](String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ConfigKit.this[string]
        VB: ZeroFramework.Utility.ConfigKit.this[](String)
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: this[]
        path: ''
        startLine: 3478
      syntax:
        content:
          CSharp: public JToken this[string key] { get; set; }
          VB: Public Default Property this[](key As String) As JToken
        parameters:
        - id: key
          type: System.String
        return:
          type: Global.JToken
      overload: ZeroFramework.Utility.ConfigKit.Item*
      implements:
      - ZeroFramework.Utility.IConfigKit.Item(System.String)
    - id: ZeroFramework.Utility.ConfigKit.Get``1(System.String)
      commentId: M:ZeroFramework.Utility.ConfigKit.Get``1(System.String)
      language: CSharp
      name:
        CSharp: Get<T>(string)
        VB: Get(Of T)(String)
      nameWithType:
        CSharp: ConfigKit.Get<T>(string)
        VB: ConfigKit.Get(Of T)(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ConfigKit.Get<T>(string)
        VB: ZeroFramework.Utility.ConfigKit.Get(Of T)(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Get
        path: ''
        startLine: 3488
      syntax:
        content:
          CSharp: public T Get<T>(string key)
          VB: Public Function [Get](Of T)(key As String) As T
        parameters:
        - id: key
          type: System.String
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.Utility.ConfigKit.Get*
      implements:
      - ZeroFramework.Utility.IConfigKit.Get``1(System.String)
  - id: ZeroFramework.Utility.IConfigKit
    commentId: T:ZeroFramework.Utility.IConfigKit
    language: CSharp
    name:
      CSharp: IConfigKit
      VB: IConfigKit
    nameWithType:
      CSharp: IConfigKit
      VB: IConfigKit
    qualifiedName:
      CSharp: ZeroFramework.Utility.IConfigKit
      VB: ZeroFramework.Utility.IConfigKit
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: IConfigKit
      path: ''
      startLine: 3632
    syntax:
      content:
        CSharp: public interface IConfigKit
        VB: Public Interface IConfigKit
    items:
    - id: ZeroFramework.Utility.IConfigKit.Item(System.String)
      commentId: P:ZeroFramework.Utility.IConfigKit.Item(System.String)
      language: CSharp
      name:
        CSharp: this[string]
        VB: this[](String)
      nameWithType:
        CSharp: IConfigKit.this[string]
        VB: IConfigKit.this[](String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IConfigKit.this[string]
        VB: ZeroFramework.Utility.IConfigKit.this[](String)
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: this[]
        path: ''
        startLine: 3634
      syntax:
        content:
          CSharp: JToken this[string key] { get; set; }
          VB: Default Property this[](key As String) As JToken
        parameters:
        - id: key
          type: System.String
        return:
          type: Global.JToken
      overload: ZeroFramework.Utility.IConfigKit.Item*
    - id: ZeroFramework.Utility.IConfigKit.Get``1(System.String)
      commentId: M:ZeroFramework.Utility.IConfigKit.Get``1(System.String)
      language: CSharp
      name:
        CSharp: Get<T>(string)
        VB: Get(Of T)(String)
      nameWithType:
        CSharp: IConfigKit.Get<T>(string)
        VB: IConfigKit.Get(Of T)(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IConfigKit.Get<T>(string)
        VB: ZeroFramework.Utility.IConfigKit.Get(Of T)(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Get
        path: ''
        startLine: 3636
      syntax:
        content:
          CSharp: T Get<T>(string key)
          VB: Function [Get](Of T)(key As String) As T
        parameters:
        - id: key
          type: System.String
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.Utility.IConfigKit.Get*
  - id: ZeroFramework.Utility.FileKit
    commentId: T:ZeroFramework.Utility.FileKit
    language: CSharp
    name:
      CSharp: FileKit
      VB: FileKit
    nameWithType:
      CSharp: FileKit
      VB: FileKit
    qualifiedName:
      CSharp: ZeroFramework.Utility.FileKit
      VB: ZeroFramework.Utility.FileKit
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: FileKit
      path: ''
      startLine: 3658
    syntax:
      content:
        CSharp: 'public class FileKit : IFileKit, IUtility'
        VB: Public Class FileKit Implements IFileKit, IUtility
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.Utility.IFileKit
    - ZeroFramework.IUtility
    items:
    - isEii: true
      id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#BytesTool
      commentId: P:ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#BytesTool
      language: CSharp
      name:
        CSharp: IFileKit.BytesTool
        VB: ZeroFramework.Utility.IFileKit.BytesTool
      nameWithType:
        CSharp: FileKit.IFileKit.BytesTool
        VB: FileKit.ZeroFramework.Utility.IFileKit.BytesTool
      qualifiedName:
        CSharp: ZeroFramework.Utility.FileKit.ZeroFramework.Utility.IFileKit.BytesTool
        VB: ZeroFramework.Utility.FileKit.ZeroFramework.Utility.IFileKit.BytesTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ZeroFramework.Utility.IFileKit.BytesTool
        path: ''
        startLine: 3661
      syntax:
        content:
          CSharp: BytesTool IFileKit.BytesTool { get; }
          VB: ReadOnly Property ZeroFramework.Utility.IFileKit.BytesTool As BytesTool
        parameters: []
        return:
          type: ZeroFramework.Utility.BytesTool
      overload: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#BytesTool*
      implements:
      - ZeroFramework.Utility.IFileKit.BytesTool
    - isEii: true
      id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ImageTool
      commentId: P:ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ImageTool
      language: CSharp
      name:
        CSharp: IFileKit.ImageTool
        VB: ZeroFramework.Utility.IFileKit.ImageTool
      nameWithType:
        CSharp: FileKit.IFileKit.ImageTool
        VB: FileKit.ZeroFramework.Utility.IFileKit.ImageTool
      qualifiedName:
        CSharp: ZeroFramework.Utility.FileKit.ZeroFramework.Utility.IFileKit.ImageTool
        VB: ZeroFramework.Utility.FileKit.ZeroFramework.Utility.IFileKit.ImageTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ZeroFramework.Utility.IFileKit.ImageTool
        path: ''
        startLine: 3663
      syntax:
        content:
          CSharp: ImageTool IFileKit.ImageTool { get; }
          VB: ReadOnly Property ZeroFramework.Utility.IFileKit.ImageTool As ImageTool
        parameters: []
        return:
          type: ZeroFramework.Utility.ImageTool
      overload: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ImageTool*
      implements:
      - ZeroFramework.Utility.IFileKit.ImageTool
    - isEii: true
      id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#JsonTool
      commentId: P:ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#JsonTool
      language: CSharp
      name:
        CSharp: IFileKit.JsonTool
        VB: ZeroFramework.Utility.IFileKit.JsonTool
      nameWithType:
        CSharp: FileKit.IFileKit.JsonTool
        VB: FileKit.ZeroFramework.Utility.IFileKit.JsonTool
      qualifiedName:
        CSharp: ZeroFramework.Utility.FileKit.ZeroFramework.Utility.IFileKit.JsonTool
        VB: ZeroFramework.Utility.FileKit.ZeroFramework.Utility.IFileKit.JsonTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ZeroFramework.Utility.IFileKit.JsonTool
        path: ''
        startLine: 3665
      syntax:
        content:
          CSharp: JsonTool IFileKit.JsonTool { get; }
          VB: ReadOnly Property ZeroFramework.Utility.IFileKit.JsonTool As JsonTool
        parameters: []
        return:
          type: ZeroFramework.Utility.JsonTool
      overload: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#JsonTool*
      implements:
      - ZeroFramework.Utility.IFileKit.JsonTool
    - isEii: true
      id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#TextTool
      commentId: P:ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#TextTool
      language: CSharp
      name:
        CSharp: IFileKit.TextTool
        VB: ZeroFramework.Utility.IFileKit.TextTool
      nameWithType:
        CSharp: FileKit.IFileKit.TextTool
        VB: FileKit.ZeroFramework.Utility.IFileKit.TextTool
      qualifiedName:
        CSharp: ZeroFramework.Utility.FileKit.ZeroFramework.Utility.IFileKit.TextTool
        VB: ZeroFramework.Utility.FileKit.ZeroFramework.Utility.IFileKit.TextTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ZeroFramework.Utility.IFileKit.TextTool
        path: ''
        startLine: 3667
      syntax:
        content:
          CSharp: TextTool IFileKit.TextTool { get; }
          VB: ReadOnly Property ZeroFramework.Utility.IFileKit.TextTool As TextTool
        parameters: []
        return:
          type: ZeroFramework.Utility.TextTool
      overload: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#TextTool*
      implements:
      - ZeroFramework.Utility.IFileKit.TextTool
    - isEii: true
      id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#YamlTool
      commentId: P:ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#YamlTool
      language: CSharp
      name:
        CSharp: IFileKit.YamlTool
        VB: ZeroFramework.Utility.IFileKit.YamlTool
      nameWithType:
        CSharp: FileKit.IFileKit.YamlTool
        VB: FileKit.ZeroFramework.Utility.IFileKit.YamlTool
      qualifiedName:
        CSharp: ZeroFramework.Utility.FileKit.ZeroFramework.Utility.IFileKit.YamlTool
        VB: ZeroFramework.Utility.FileKit.ZeroFramework.Utility.IFileKit.YamlTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ZeroFramework.Utility.IFileKit.YamlTool
        path: ''
        startLine: 3669
      syntax:
        content:
          CSharp: YamlTool IFileKit.YamlTool { get; }
          VB: ReadOnly Property ZeroFramework.Utility.IFileKit.YamlTool As YamlTool
        parameters: []
        return:
          type: ZeroFramework.Utility.YamlTool
      overload: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#YamlTool*
      implements:
      - ZeroFramework.Utility.IFileKit.YamlTool
    - isEii: true
      id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ExcelTool
      commentId: P:ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ExcelTool
      language: CSharp
      name:
        CSharp: IFileKit.ExcelTool
        VB: ZeroFramework.Utility.IFileKit.ExcelTool
      nameWithType:
        CSharp: FileKit.IFileKit.ExcelTool
        VB: FileKit.ZeroFramework.Utility.IFileKit.ExcelTool
      qualifiedName:
        CSharp: ZeroFramework.Utility.FileKit.ZeroFramework.Utility.IFileKit.ExcelTool
        VB: ZeroFramework.Utility.FileKit.ZeroFramework.Utility.IFileKit.ExcelTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ZeroFramework.Utility.IFileKit.ExcelTool
        path: ''
        startLine: 3671
      syntax:
        content:
          CSharp: ExcelTool IFileKit.ExcelTool { get; }
          VB: ReadOnly Property ZeroFramework.Utility.IFileKit.ExcelTool As ExcelTool
        parameters: []
        return:
          type: ZeroFramework.Utility.ExcelTool
      overload: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ExcelTool*
      implements:
      - ZeroFramework.Utility.IFileKit.ExcelTool
    - id: ZeroFramework.Utility.FileKit.BytesToString(System.Byte[])
      commentId: M:ZeroFramework.Utility.FileKit.BytesToString(System.Byte[])
      language: CSharp
      name:
        CSharp: BytesToString(byte[])
        VB: BytesToString(Byte())
      nameWithType:
        CSharp: FileKit.BytesToString(byte[])
        VB: FileKit.BytesToString(Byte())
      qualifiedName:
        CSharp: ZeroFramework.Utility.FileKit.BytesToString(byte[])
        VB: ZeroFramework.Utility.FileKit.BytesToString(Byte())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: BytesToString
        path: ''
        startLine: 3673
      syntax:
        content:
          CSharp: public string BytesToString(byte[] bytes)
          VB: Public Function BytesToString(bytes As Byte()) As String
        parameters:
        - id: bytes
          type: System.Byte[]
        return:
          type: System.String
      overload: ZeroFramework.Utility.FileKit.BytesToString*
      implements:
      - ZeroFramework.Utility.IFileKit.BytesToString(System.Byte[])
    - id: ZeroFramework.Utility.FileKit.StringToBytes(System.String)
      commentId: M:ZeroFramework.Utility.FileKit.StringToBytes(System.String)
      language: CSharp
      name:
        CSharp: StringToBytes(string)
        VB: StringToBytes(String)
      nameWithType:
        CSharp: FileKit.StringToBytes(string)
        VB: FileKit.StringToBytes(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.FileKit.StringToBytes(string)
        VB: ZeroFramework.Utility.FileKit.StringToBytes(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: StringToBytes
        path: ''
        startLine: 3678
      syntax:
        content:
          CSharp: public byte[] StringToBytes(string str)
          VB: Public Function StringToBytes(str As String) As Byte()
        parameters:
        - id: str
          type: System.String
        return:
          type: System.Byte[]
      overload: ZeroFramework.Utility.FileKit.StringToBytes*
      implements:
      - ZeroFramework.Utility.IFileKit.StringToBytes(System.String)
    - id: ZeroFramework.Utility.FileKit.Yaml2Json2Obj``1(System.String)
      commentId: M:ZeroFramework.Utility.FileKit.Yaml2Json2Obj``1(System.String)
      language: CSharp
      name:
        CSharp: Yaml2Json2Obj<T>(string)
        VB: Yaml2Json2Obj(Of T)(String)
      nameWithType:
        CSharp: FileKit.Yaml2Json2Obj<T>(string)
        VB: FileKit.Yaml2Json2Obj(Of T)(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.FileKit.Yaml2Json2Obj<T>(string)
        VB: ZeroFramework.Utility.FileKit.Yaml2Json2Obj(Of T)(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Yaml2Json2Obj
        path: ''
        startLine: 3683
      syntax:
        content:
          CSharp: public T Yaml2Json2Obj<T>(string yamlStr)
          VB: Public Function Yaml2Json2Obj(Of T)(yamlStr As String) As T
        parameters:
        - id: yamlStr
          type: System.String
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.Utility.FileKit.Yaml2Json2Obj*
      implements:
      - ZeroFramework.Utility.IFileKit.Yaml2Json2Obj``1(System.String)
    - id: ZeroFramework.Utility.FileKit.Path2Yaml2Json2Obj``1(System.String)
      commentId: M:ZeroFramework.Utility.FileKit.Path2Yaml2Json2Obj``1(System.String)
      language: CSharp
      name:
        CSharp: Path2Yaml2Json2Obj<T>(string)
        VB: Path2Yaml2Json2Obj(Of T)(String)
      nameWithType:
        CSharp: FileKit.Path2Yaml2Json2Obj<T>(string)
        VB: FileKit.Path2Yaml2Json2Obj(Of T)(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.FileKit.Path2Yaml2Json2Obj<T>(string)
        VB: ZeroFramework.Utility.FileKit.Path2Yaml2Json2Obj(Of T)(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Path2Yaml2Json2Obj
        path: ''
        startLine: 3688
      syntax:
        content:
          CSharp: public T Path2Yaml2Json2Obj<T>(string path)
          VB: Public Function Path2Yaml2Json2Obj(Of T)(path As String) As T
        parameters:
        - id: path
          type: System.String
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.Utility.FileKit.Path2Yaml2Json2Obj*
      implements:
      - ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj``1(System.String)
  - id: ZeroFramework.Utility.BytesTool
    commentId: T:ZeroFramework.Utility.BytesTool
    language: CSharp
    name:
      CSharp: BytesTool
      VB: BytesTool
    nameWithType:
      CSharp: BytesTool
      VB: BytesTool
    qualifiedName:
      CSharp: ZeroFramework.Utility.BytesTool
      VB: ZeroFramework.Utility.BytesTool
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: BytesTool
      path: ''
      startLine: 3801
    syntax:
      content:
        CSharp: public class BytesTool
        VB: Public Class BytesTool
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.BytesTool.Read(System.String)
      commentId: M:ZeroFramework.Utility.BytesTool.Read(System.String)
      language: CSharp
      name:
        CSharp: Read(string)
        VB: Read(String)
      nameWithType:
        CSharp: BytesTool.Read(string)
        VB: BytesTool.Read(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.BytesTool.Read(string)
        VB: ZeroFramework.Utility.BytesTool.Read(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Read
        path: ''
        startLine: 3803
      syntax:
        content:
          CSharp: public byte[] Read(string path)
          VB: Public Function Read(path As String) As Byte()
        parameters:
        - id: path
          type: System.String
        return:
          type: System.Byte[]
      overload: ZeroFramework.Utility.BytesTool.Read*
    - id: ZeroFramework.Utility.BytesTool.Write(System.String,System.Byte[])
      commentId: M:ZeroFramework.Utility.BytesTool.Write(System.String,System.Byte[])
      language: CSharp
      name:
        CSharp: Write(string, byte[])
        VB: Write(String, Byte())
      nameWithType:
        CSharp: BytesTool.Write(string, byte[])
        VB: BytesTool.Write(String, Byte())
      qualifiedName:
        CSharp: ZeroFramework.Utility.BytesTool.Write(string, byte[])
        VB: ZeroFramework.Utility.BytesTool.Write(String, Byte())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Write
        path: ''
        startLine: 3812
      syntax:
        content:
          CSharp: public void Write(string path, byte[] bytes)
          VB: Public Sub Write(path As String, bytes As Byte())
        parameters:
        - id: path
          type: System.String
        - id: bytes
          type: System.Byte[]
      overload: ZeroFramework.Utility.BytesTool.Write*
    - id: ZeroFramework.Utility.BytesTool.ReadAsync(System.String,Action{System.Byte[]})
      commentId: M:ZeroFramework.Utility.BytesTool.ReadAsync(System.String,Action{System.Byte[]})
      language: CSharp
      name:
        CSharp: ReadAsync(string, Action<byte[]>)
        VB: ReadAsync(String, Action(Of Byte()))
      nameWithType:
        CSharp: BytesTool.ReadAsync(string, Action<byte[]>)
        VB: BytesTool.ReadAsync(String, Action(Of Byte()))
      qualifiedName:
        CSharp: ZeroFramework.Utility.BytesTool.ReadAsync(string, Action<byte[]>)
        VB: ZeroFramework.Utility.BytesTool.ReadAsync(String, Action(Of Byte()))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ReadAsync
        path: ''
        startLine: 3822
      syntax:
        content:
          CSharp: public void ReadAsync(string path, Action<byte[]> readCallback)
          VB: Public Sub ReadAsync(path As String, readCallback As Action(Of Byte()))
        parameters:
        - id: path
          type: System.String
        - id: readCallback
          type: Global.Action{System.Byte[]}
      overload: ZeroFramework.Utility.BytesTool.ReadAsync*
    - id: ZeroFramework.Utility.BytesTool.WriteAsync(System.String,System.Byte[],Action)
      commentId: M:ZeroFramework.Utility.BytesTool.WriteAsync(System.String,System.Byte[],Action)
      language: CSharp
      name:
        CSharp: WriteAsync(string, byte[], Action)
        VB: WriteAsync(String, Byte(), Action)
      nameWithType:
        CSharp: BytesTool.WriteAsync(string, byte[], Action)
        VB: BytesTool.WriteAsync(String, Byte(), Action)
      qualifiedName:
        CSharp: ZeroFramework.Utility.BytesTool.WriteAsync(string, byte[], Action)
        VB: ZeroFramework.Utility.BytesTool.WriteAsync(String, Byte(), Action)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: WriteAsync
        path: ''
        startLine: 3831
      syntax:
        content:
          CSharp: public void WriteAsync(string path, byte[] content, Action writeCallback)
          VB: Public Sub WriteAsync(path As String, content As Byte(), writeCallback As Action)
        parameters:
        - id: path
          type: System.String
        - id: content
          type: System.Byte[]
        - id: writeCallback
          type: Global.Action
      overload: ZeroFramework.Utility.BytesTool.WriteAsync*
  - id: ZeroFramework.Utility.IExcelHandler
    commentId: T:ZeroFramework.Utility.IExcelHandler
    language: CSharp
    name:
      CSharp: IExcelHandler
      VB: IExcelHandler
    nameWithType:
      CSharp: IExcelHandler
      VB: IExcelHandler
    qualifiedName:
      CSharp: ZeroFramework.Utility.IExcelHandler
      VB: ZeroFramework.Utility.IExcelHandler
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: IExcelHandler
      path: ''
      startLine: 3859
    syntax:
      content:
        CSharp: public interface IExcelHandler
        VB: Public Interface IExcelHandler
    items:
    - id: ZeroFramework.Utility.IExcelHandler.MaxRow
      commentId: P:ZeroFramework.Utility.IExcelHandler.MaxRow
      language: CSharp
      name:
        CSharp: MaxRow
        VB: MaxRow
      nameWithType:
        CSharp: IExcelHandler.MaxRow
        VB: IExcelHandler.MaxRow
      qualifiedName:
        CSharp: ZeroFramework.Utility.IExcelHandler.MaxRow
        VB: ZeroFramework.Utility.IExcelHandler.MaxRow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: MaxRow
        path: ''
        startLine: 3862
      syntax:
        content:
          CSharp: int MaxRow { get; }
          VB: ReadOnly Property MaxRow As Integer
        parameters: []
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.IExcelHandler.MaxRow*
    - id: ZeroFramework.Utility.IExcelHandler.MaxColumn
      commentId: P:ZeroFramework.Utility.IExcelHandler.MaxColumn
      language: CSharp
      name:
        CSharp: MaxColumn
        VB: MaxColumn
      nameWithType:
        CSharp: IExcelHandler.MaxColumn
        VB: IExcelHandler.MaxColumn
      qualifiedName:
        CSharp: ZeroFramework.Utility.IExcelHandler.MaxColumn
        VB: ZeroFramework.Utility.IExcelHandler.MaxColumn
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: MaxColumn
        path: ''
        startLine: 3863
      syntax:
        content:
          CSharp: int MaxColumn { get; }
          VB: ReadOnly Property MaxColumn As Integer
        parameters: []
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.IExcelHandler.MaxColumn*
    - id: ZeroFramework.Utility.IExcelHandler.ReadValue(System.Int32,System.Int32)
      commentId: M:ZeroFramework.Utility.IExcelHandler.ReadValue(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ReadValue(int, int)
        VB: ReadValue(Integer, Integer)
      nameWithType:
        CSharp: IExcelHandler.ReadValue(int, int)
        VB: IExcelHandler.ReadValue(Integer, Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IExcelHandler.ReadValue(int, int)
        VB: ZeroFramework.Utility.IExcelHandler.ReadValue(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ReadValue
        path: ''
        startLine: 3864
      syntax:
        content:
          CSharp: object ReadValue(int row, int column)
          VB: Function ReadValue(row As Integer, column As Integer) As Object
        parameters:
        - id: row
          type: System.Int32
        - id: column
          type: System.Int32
        return:
          type: System.Object
      overload: ZeroFramework.Utility.IExcelHandler.ReadValue*
    - id: ZeroFramework.Utility.IExcelHandler.ReadValue``1(System.Int32,System.Int32)
      commentId: M:ZeroFramework.Utility.IExcelHandler.ReadValue``1(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ReadValue<T>(int, int)
        VB: ReadValue(Of T)(Integer, Integer)
      nameWithType:
        CSharp: IExcelHandler.ReadValue<T>(int, int)
        VB: IExcelHandler.ReadValue(Of T)(Integer, Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IExcelHandler.ReadValue<T>(int, int)
        VB: ZeroFramework.Utility.IExcelHandler.ReadValue(Of T)(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ReadValue
        path: ''
        startLine: 3865
      syntax:
        content:
          CSharp: T ReadValue<T>(int row, int column)
          VB: Function ReadValue(Of T)(row As Integer, column As Integer) As T
        parameters:
        - id: row
          type: System.Int32
        - id: column
          type: System.Int32
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.Utility.IExcelHandler.ReadValue*
    - id: ZeroFramework.Utility.IExcelHandler.WriteValue(System.Int32,System.Int32,System.Object)
      commentId: M:ZeroFramework.Utility.IExcelHandler.WriteValue(System.Int32,System.Int32,System.Object)
      language: CSharp
      name:
        CSharp: WriteValue(int, int, object)
        VB: WriteValue(Integer, Integer, Object)
      nameWithType:
        CSharp: IExcelHandler.WriteValue(int, int, object)
        VB: IExcelHandler.WriteValue(Integer, Integer, Object)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IExcelHandler.WriteValue(int, int, object)
        VB: ZeroFramework.Utility.IExcelHandler.WriteValue(Integer, Integer, Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: WriteValue
        path: ''
        startLine: 3866
      syntax:
        content:
          CSharp: IExcelHandler WriteValue(int row, int column, object val)
          VB: Function WriteValue(row As Integer, column As Integer, val As Object) As IExcelHandler
        parameters:
        - id: row
          type: System.Int32
        - id: column
          type: System.Int32
        - id: val
          type: System.Object
        return:
          type: ZeroFramework.Utility.IExcelHandler
      overload: ZeroFramework.Utility.IExcelHandler.WriteValue*
    - id: ZeroFramework.Utility.IExcelHandler.SheetIdx
      commentId: P:ZeroFramework.Utility.IExcelHandler.SheetIdx
      language: CSharp
      name:
        CSharp: SheetIdx
        VB: SheetIdx
      nameWithType:
        CSharp: IExcelHandler.SheetIdx
        VB: IExcelHandler.SheetIdx
      qualifiedName:
        CSharp: ZeroFramework.Utility.IExcelHandler.SheetIdx
        VB: ZeroFramework.Utility.IExcelHandler.SheetIdx
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: SheetIdx
        path: ''
        startLine: 3868
      syntax:
        content:
          CSharp: int SheetIdx { get; }
          VB: ReadOnly Property SheetIdx As Integer
        parameters: []
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.IExcelHandler.SheetIdx*
    - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.Int32)
      commentId: M:ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.Int32)
      language: CSharp
      name:
        CSharp: WithWorksheet(int)
        VB: WithWorksheet(Integer)
      nameWithType:
        CSharp: IExcelHandler.WithWorksheet(int)
        VB: IExcelHandler.WithWorksheet(Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IExcelHandler.WithWorksheet(int)
        VB: ZeroFramework.Utility.IExcelHandler.WithWorksheet(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: WithWorksheet
        path: ''
        startLine: 3869
      syntax:
        content:
          CSharp: IExcelHandler WithWorksheet(int sheetIdx)
          VB: Function WithWorksheet(sheetIdx As Integer) As IExcelHandler
        parameters:
        - id: sheetIdx
          type: System.Int32
        return:
          type: ZeroFramework.Utility.IExcelHandler
      overload: ZeroFramework.Utility.IExcelHandler.WithWorksheet*
    - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.String)
      commentId: M:ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.String)
      language: CSharp
      name:
        CSharp: WithWorksheet(string)
        VB: WithWorksheet(String)
      nameWithType:
        CSharp: IExcelHandler.WithWorksheet(string)
        VB: IExcelHandler.WithWorksheet(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IExcelHandler.WithWorksheet(string)
        VB: ZeroFramework.Utility.IExcelHandler.WithWorksheet(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: WithWorksheet
        path: ''
        startLine: 3870
      syntax:
        content:
          CSharp: IExcelHandler WithWorksheet(string sheetName)
          VB: Function WithWorksheet(sheetName As String) As IExcelHandler
        parameters:
        - id: sheetName
          type: System.String
        return:
          type: ZeroFramework.Utility.IExcelHandler
      overload: ZeroFramework.Utility.IExcelHandler.WithWorksheet*
    - id: ZeroFramework.Utility.IExcelHandler.AddSheet(System.String,System.Boolean)
      commentId: M:ZeroFramework.Utility.IExcelHandler.AddSheet(System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: AddSheet(string, bool)
        VB: AddSheet(String, Boolean)
      nameWithType:
        CSharp: IExcelHandler.AddSheet(string, bool)
        VB: IExcelHandler.AddSheet(String, Boolean)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IExcelHandler.AddSheet(string, bool)
        VB: ZeroFramework.Utility.IExcelHandler.AddSheet(String, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: AddSheet
        path: ''
        startLine: 3871
      syntax:
        content:
          CSharp: IExcelHandler AddSheet(string sheetName, bool isOpenNow = true)
          VB: Function AddSheet(sheetName As String, isOpenNow As Boolean = True) As IExcelHandler
        parameters:
        - id: sheetName
          type: System.String
        - id: isOpenNow
          type: System.Boolean
        return:
          type: ZeroFramework.Utility.IExcelHandler
      overload: ZeroFramework.Utility.IExcelHandler.AddSheet*
    - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.Int32)
      commentId: M:ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.Int32)
      language: CSharp
      name:
        CSharp: RemoveSheet(int)
        VB: RemoveSheet(Integer)
      nameWithType:
        CSharp: IExcelHandler.RemoveSheet(int)
        VB: IExcelHandler.RemoveSheet(Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IExcelHandler.RemoveSheet(int)
        VB: ZeroFramework.Utility.IExcelHandler.RemoveSheet(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: RemoveSheet
        path: ''
        startLine: 3872
      syntax:
        content:
          CSharp: IExcelHandler RemoveSheet(int sheetIdx)
          VB: Function RemoveSheet(sheetIdx As Integer) As IExcelHandler
        parameters:
        - id: sheetIdx
          type: System.Int32
        return:
          type: ZeroFramework.Utility.IExcelHandler
      overload: ZeroFramework.Utility.IExcelHandler.RemoveSheet*
    - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.String)
      commentId: M:ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.String)
      language: CSharp
      name:
        CSharp: RemoveSheet(string)
        VB: RemoveSheet(String)
      nameWithType:
        CSharp: IExcelHandler.RemoveSheet(string)
        VB: IExcelHandler.RemoveSheet(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IExcelHandler.RemoveSheet(string)
        VB: ZeroFramework.Utility.IExcelHandler.RemoveSheet(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: RemoveSheet
        path: ''
        startLine: 3873
      syntax:
        content:
          CSharp: IExcelHandler RemoveSheet(string sheetName)
          VB: Function RemoveSheet(sheetName As String) As IExcelHandler
        parameters:
        - id: sheetName
          type: System.String
        return:
          type: ZeroFramework.Utility.IExcelHandler
      overload: ZeroFramework.Utility.IExcelHandler.RemoveSheet*
  - id: ZeroFramework.Utility.ExcelHandler
    commentId: T:ZeroFramework.Utility.ExcelHandler
    language: CSharp
    name:
      CSharp: ExcelHandler
      VB: ExcelHandler
    nameWithType:
      CSharp: ExcelHandler
      VB: ExcelHandler
    qualifiedName:
      CSharp: ZeroFramework.Utility.ExcelHandler
      VB: ZeroFramework.Utility.ExcelHandler
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: ExcelHandler
      path: ''
      startLine: 3876
    syntax:
      content:
        CSharp: 'public class ExcelHandler : IExcelHandler'
        VB: Public Class ExcelHandler Implements IExcelHandler
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.Utility.IExcelHandler
    items:
    - id: ZeroFramework.Utility.ExcelHandler.#ctor(System.String)
      commentId: M:ZeroFramework.Utility.ExcelHandler.#ctor(System.String)
      language: CSharp
      name:
        CSharp: ExcelHandler(string)
        VB: New(String)
      nameWithType:
        CSharp: ExcelHandler.ExcelHandler(string)
        VB: ExcelHandler.New(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelHandler.ExcelHandler(string)
        VB: ZeroFramework.Utility.ExcelHandler.New(String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 3880
      syntax:
        content:
          CSharp: public ExcelHandler(string path)
          VB: Public Sub New(path As String)
        parameters:
        - id: path
          type: System.String
      overload: ZeroFramework.Utility.ExcelHandler.#ctor*
    - id: ZeroFramework.Utility.ExcelHandler.MaxRow
      commentId: P:ZeroFramework.Utility.ExcelHandler.MaxRow
      language: CSharp
      name:
        CSharp: MaxRow
        VB: MaxRow
      nameWithType:
        CSharp: ExcelHandler.MaxRow
        VB: ExcelHandler.MaxRow
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelHandler.MaxRow
        VB: ZeroFramework.Utility.ExcelHandler.MaxRow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: MaxRow
        path: ''
        startLine: 3886
      syntax:
        content:
          CSharp: public int MaxRow { get; }
          VB: Public ReadOnly Property MaxRow As Integer
        parameters: []
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.ExcelHandler.MaxRow*
      implements:
      - ZeroFramework.Utility.IExcelHandler.MaxRow
    - id: ZeroFramework.Utility.ExcelHandler.MaxColumn
      commentId: P:ZeroFramework.Utility.ExcelHandler.MaxColumn
      language: CSharp
      name:
        CSharp: MaxColumn
        VB: MaxColumn
      nameWithType:
        CSharp: ExcelHandler.MaxColumn
        VB: ExcelHandler.MaxColumn
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelHandler.MaxColumn
        VB: ZeroFramework.Utility.ExcelHandler.MaxColumn
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: MaxColumn
        path: ''
        startLine: 3887
      syntax:
        content:
          CSharp: public int MaxColumn { get; }
          VB: Public ReadOnly Property MaxColumn As Integer
        parameters: []
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.ExcelHandler.MaxColumn*
      implements:
      - ZeroFramework.Utility.IExcelHandler.MaxColumn
    - id: ZeroFramework.Utility.ExcelHandler.SheetIdx
      commentId: P:ZeroFramework.Utility.ExcelHandler.SheetIdx
      language: CSharp
      name:
        CSharp: SheetIdx
        VB: SheetIdx
      nameWithType:
        CSharp: ExcelHandler.SheetIdx
        VB: ExcelHandler.SheetIdx
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelHandler.SheetIdx
        VB: ZeroFramework.Utility.ExcelHandler.SheetIdx
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: SheetIdx
        path: ''
        startLine: 3889
      syntax:
        content:
          CSharp: public int SheetIdx { get; }
          VB: Public ReadOnly Property SheetIdx As Integer
        parameters: []
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.ExcelHandler.SheetIdx*
      implements:
      - ZeroFramework.Utility.IExcelHandler.SheetIdx
    - id: ZeroFramework.Utility.ExcelHandler.ReadValue(System.Int32,System.Int32)
      commentId: M:ZeroFramework.Utility.ExcelHandler.ReadValue(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ReadValue(int, int)
        VB: ReadValue(Integer, Integer)
      nameWithType:
        CSharp: ExcelHandler.ReadValue(int, int)
        VB: ExcelHandler.ReadValue(Integer, Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelHandler.ReadValue(int, int)
        VB: ZeroFramework.Utility.ExcelHandler.ReadValue(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ReadValue
        path: ''
        startLine: 3891
      syntax:
        content:
          CSharp: public object ReadValue(int row, int column)
          VB: Public Function ReadValue(row As Integer, column As Integer) As Object
        parameters:
        - id: row
          type: System.Int32
        - id: column
          type: System.Int32
        return:
          type: System.Object
      overload: ZeroFramework.Utility.ExcelHandler.ReadValue*
      implements:
      - ZeroFramework.Utility.IExcelHandler.ReadValue(System.Int32,System.Int32)
    - id: ZeroFramework.Utility.ExcelHandler.ReadValue``1(System.Int32,System.Int32)
      commentId: M:ZeroFramework.Utility.ExcelHandler.ReadValue``1(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: ReadValue<T>(int, int)
        VB: ReadValue(Of T)(Integer, Integer)
      nameWithType:
        CSharp: ExcelHandler.ReadValue<T>(int, int)
        VB: ExcelHandler.ReadValue(Of T)(Integer, Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelHandler.ReadValue<T>(int, int)
        VB: ZeroFramework.Utility.ExcelHandler.ReadValue(Of T)(Integer, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ReadValue
        path: ''
        startLine: 3897
      syntax:
        content:
          CSharp: public T ReadValue<T>(int row, int column)
          VB: Public Function ReadValue(Of T)(row As Integer, column As Integer) As T
        parameters:
        - id: row
          type: System.Int32
        - id: column
          type: System.Int32
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.Utility.ExcelHandler.ReadValue*
      implements:
      - ZeroFramework.Utility.IExcelHandler.ReadValue``1(System.Int32,System.Int32)
    - id: ZeroFramework.Utility.ExcelHandler.WriteValue(System.Int32,System.Int32,System.Object)
      commentId: M:ZeroFramework.Utility.ExcelHandler.WriteValue(System.Int32,System.Int32,System.Object)
      language: CSharp
      name:
        CSharp: WriteValue(int, int, object)
        VB: WriteValue(Integer, Integer, Object)
      nameWithType:
        CSharp: ExcelHandler.WriteValue(int, int, object)
        VB: ExcelHandler.WriteValue(Integer, Integer, Object)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelHandler.WriteValue(int, int, object)
        VB: ZeroFramework.Utility.ExcelHandler.WriteValue(Integer, Integer, Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: WriteValue
        path: ''
        startLine: 3903
      syntax:
        content:
          CSharp: public IExcelHandler WriteValue(int row, int column, object val)
          VB: Public Function WriteValue(row As Integer, column As Integer, val As Object) As IExcelHandler
        parameters:
        - id: row
          type: System.Int32
        - id: column
          type: System.Int32
        - id: val
          type: System.Object
        return:
          type: ZeroFramework.Utility.IExcelHandler
      overload: ZeroFramework.Utility.ExcelHandler.WriteValue*
      implements:
      - ZeroFramework.Utility.IExcelHandler.WriteValue(System.Int32,System.Int32,System.Object)
    - id: ZeroFramework.Utility.ExcelHandler.WithWorksheet(System.Int32)
      commentId: M:ZeroFramework.Utility.ExcelHandler.WithWorksheet(System.Int32)
      language: CSharp
      name:
        CSharp: WithWorksheet(int)
        VB: WithWorksheet(Integer)
      nameWithType:
        CSharp: ExcelHandler.WithWorksheet(int)
        VB: ExcelHandler.WithWorksheet(Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelHandler.WithWorksheet(int)
        VB: ZeroFramework.Utility.ExcelHandler.WithWorksheet(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: WithWorksheet
        path: ''
        startLine: 3909
      syntax:
        content:
          CSharp: public IExcelHandler WithWorksheet(int sheetIdx)
          VB: Public Function WithWorksheet(sheetIdx As Integer) As IExcelHandler
        parameters:
        - id: sheetIdx
          type: System.Int32
        return:
          type: ZeroFramework.Utility.IExcelHandler
      overload: ZeroFramework.Utility.ExcelHandler.WithWorksheet*
      implements:
      - ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.Int32)
    - id: ZeroFramework.Utility.ExcelHandler.WithWorksheet(System.String)
      commentId: M:ZeroFramework.Utility.ExcelHandler.WithWorksheet(System.String)
      language: CSharp
      name:
        CSharp: WithWorksheet(string)
        VB: WithWorksheet(String)
      nameWithType:
        CSharp: ExcelHandler.WithWorksheet(string)
        VB: ExcelHandler.WithWorksheet(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelHandler.WithWorksheet(string)
        VB: ZeroFramework.Utility.ExcelHandler.WithWorksheet(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: WithWorksheet
        path: ''
        startLine: 3915
      syntax:
        content:
          CSharp: public IExcelHandler WithWorksheet(string sheetName)
          VB: Public Function WithWorksheet(sheetName As String) As IExcelHandler
        parameters:
        - id: sheetName
          type: System.String
        return:
          type: ZeroFramework.Utility.IExcelHandler
      overload: ZeroFramework.Utility.ExcelHandler.WithWorksheet*
      implements:
      - ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.String)
    - id: ZeroFramework.Utility.ExcelHandler.AddSheet(System.String,System.Boolean)
      commentId: M:ZeroFramework.Utility.ExcelHandler.AddSheet(System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: AddSheet(string, bool)
        VB: AddSheet(String, Boolean)
      nameWithType:
        CSharp: ExcelHandler.AddSheet(string, bool)
        VB: ExcelHandler.AddSheet(String, Boolean)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelHandler.AddSheet(string, bool)
        VB: ZeroFramework.Utility.ExcelHandler.AddSheet(String, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: AddSheet
        path: ''
        startLine: 3921
      syntax:
        content:
          CSharp: public IExcelHandler AddSheet(string sheetName, bool isOpenNow)
          VB: Public Function AddSheet(sheetName As String, isOpenNow As Boolean) As IExcelHandler
        parameters:
        - id: sheetName
          type: System.String
        - id: isOpenNow
          type: System.Boolean
        return:
          type: ZeroFramework.Utility.IExcelHandler
      overload: ZeroFramework.Utility.ExcelHandler.AddSheet*
      implements:
      - ZeroFramework.Utility.IExcelHandler.AddSheet(System.String,System.Boolean)
    - id: ZeroFramework.Utility.ExcelHandler.RemoveSheet(System.Int32)
      commentId: M:ZeroFramework.Utility.ExcelHandler.RemoveSheet(System.Int32)
      language: CSharp
      name:
        CSharp: RemoveSheet(int)
        VB: RemoveSheet(Integer)
      nameWithType:
        CSharp: ExcelHandler.RemoveSheet(int)
        VB: ExcelHandler.RemoveSheet(Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelHandler.RemoveSheet(int)
        VB: ZeroFramework.Utility.ExcelHandler.RemoveSheet(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: RemoveSheet
        path: ''
        startLine: 3931
      syntax:
        content:
          CSharp: public IExcelHandler RemoveSheet(int sheetIdx)
          VB: Public Function RemoveSheet(sheetIdx As Integer) As IExcelHandler
        parameters:
        - id: sheetIdx
          type: System.Int32
        return:
          type: ZeroFramework.Utility.IExcelHandler
      overload: ZeroFramework.Utility.ExcelHandler.RemoveSheet*
      implements:
      - ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.Int32)
    - id: ZeroFramework.Utility.ExcelHandler.RemoveSheet(System.String)
      commentId: M:ZeroFramework.Utility.ExcelHandler.RemoveSheet(System.String)
      language: CSharp
      name:
        CSharp: RemoveSheet(string)
        VB: RemoveSheet(String)
      nameWithType:
        CSharp: ExcelHandler.RemoveSheet(string)
        VB: ExcelHandler.RemoveSheet(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelHandler.RemoveSheet(string)
        VB: ZeroFramework.Utility.ExcelHandler.RemoveSheet(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: RemoveSheet
        path: ''
        startLine: 3938
      syntax:
        content:
          CSharp: public IExcelHandler RemoveSheet(string sheetName)
          VB: Public Function RemoveSheet(sheetName As String) As IExcelHandler
        parameters:
        - id: sheetName
          type: System.String
        return:
          type: ZeroFramework.Utility.IExcelHandler
      overload: ZeroFramework.Utility.ExcelHandler.RemoveSheet*
      implements:
      - ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.String)
    - id: ZeroFramework.Utility.ExcelHandler.Finalize
      commentId: M:ZeroFramework.Utility.ExcelHandler.Finalize
      language: CSharp
      name:
        CSharp: ~ExcelHandler()
        VB: ''
      nameWithType:
        CSharp: ExcelHandler.~ExcelHandler()
        VB: ''
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelHandler.~ExcelHandler()
        VB: ''
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Finalize
        path: ''
        startLine: 3945
      syntax:
        content:
          CSharp: protected ~ExcelHandler()
      overload: ZeroFramework.Utility.ExcelHandler.Finalize*
  - id: ZeroFramework.Utility.ExcelBuilder
    commentId: T:ZeroFramework.Utility.ExcelBuilder
    language: CSharp
    name:
      CSharp: ExcelBuilder
      VB: ExcelBuilder
    nameWithType:
      CSharp: ExcelBuilder
      VB: ExcelBuilder
    qualifiedName:
      CSharp: ZeroFramework.Utility.ExcelBuilder
      VB: ZeroFramework.Utility.ExcelBuilder
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: ExcelBuilder
      path: ''
      startLine: 3952
    syntax:
      content:
        CSharp: public class ExcelBuilder
        VB: Public Class ExcelBuilder
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.ExcelBuilder.excelHandler
      commentId: F:ZeroFramework.Utility.ExcelBuilder.excelHandler
      language: CSharp
      name:
        CSharp: excelHandler
        VB: excelHandler
      nameWithType:
        CSharp: ExcelBuilder.excelHandler
        VB: ExcelBuilder.excelHandler
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelBuilder.excelHandler
        VB: ZeroFramework.Utility.ExcelBuilder.excelHandler
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: excelHandler
        path: ''
        startLine: 3954
      syntax:
        content:
          CSharp: public IExcelHandler excelHandler
          VB: Public excelHandler As IExcelHandler
        return:
          type: ZeroFramework.Utility.IExcelHandler
    - id: ZeroFramework.Utility.ExcelBuilder.Build(System.String)
      commentId: M:ZeroFramework.Utility.ExcelBuilder.Build(System.String)
      language: CSharp
      name:
        CSharp: Build(string)
        VB: Build(String)
      nameWithType:
        CSharp: ExcelBuilder.Build(string)
        VB: ExcelBuilder.Build(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelBuilder.Build(string)
        VB: ZeroFramework.Utility.ExcelBuilder.Build(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Build
        path: ''
        startLine: 3956
      syntax:
        content:
          CSharp: public ExcelBuilder Build(string path)
          VB: Public Function Build(path As String) As ExcelBuilder
        parameters:
        - id: path
          type: System.String
        return:
          type: ZeroFramework.Utility.ExcelBuilder
      overload: ZeroFramework.Utility.ExcelBuilder.Build*
    - id: ZeroFramework.Utility.ExcelBuilder.WithWorksheet(System.Int32)
      commentId: M:ZeroFramework.Utility.ExcelBuilder.WithWorksheet(System.Int32)
      language: CSharp
      name:
        CSharp: WithWorksheet(int)
        VB: WithWorksheet(Integer)
      nameWithType:
        CSharp: ExcelBuilder.WithWorksheet(int)
        VB: ExcelBuilder.WithWorksheet(Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelBuilder.WithWorksheet(int)
        VB: ZeroFramework.Utility.ExcelBuilder.WithWorksheet(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: WithWorksheet
        path: ''
        startLine: 3962
      syntax:
        content:
          CSharp: public ExcelBuilder WithWorksheet(int sheetIdx)
          VB: Public Function WithWorksheet(sheetIdx As Integer) As ExcelBuilder
        parameters:
        - id: sheetIdx
          type: System.Int32
        return:
          type: ZeroFramework.Utility.ExcelBuilder
      overload: ZeroFramework.Utility.ExcelBuilder.WithWorksheet*
    - id: ZeroFramework.Utility.ExcelBuilder.WithWorksheet(System.String)
      commentId: M:ZeroFramework.Utility.ExcelBuilder.WithWorksheet(System.String)
      language: CSharp
      name:
        CSharp: WithWorksheet(string)
        VB: WithWorksheet(String)
      nameWithType:
        CSharp: ExcelBuilder.WithWorksheet(string)
        VB: ExcelBuilder.WithWorksheet(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelBuilder.WithWorksheet(string)
        VB: ZeroFramework.Utility.ExcelBuilder.WithWorksheet(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: WithWorksheet
        path: ''
        startLine: 3968
      syntax:
        content:
          CSharp: public ExcelBuilder WithWorksheet(string sheetName)
          VB: Public Function WithWorksheet(sheetName As String) As ExcelBuilder
        parameters:
        - id: sheetName
          type: System.String
        return:
          type: ZeroFramework.Utility.ExcelBuilder
      overload: ZeroFramework.Utility.ExcelBuilder.WithWorksheet*
    - id: ZeroFramework.Utility.ExcelBuilder.AddSheet(System.String,System.Boolean)
      commentId: M:ZeroFramework.Utility.ExcelBuilder.AddSheet(System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: AddSheet(string, bool)
        VB: AddSheet(String, Boolean)
      nameWithType:
        CSharp: ExcelBuilder.AddSheet(string, bool)
        VB: ExcelBuilder.AddSheet(String, Boolean)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelBuilder.AddSheet(string, bool)
        VB: ZeroFramework.Utility.ExcelBuilder.AddSheet(String, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: AddSheet
        path: ''
        startLine: 3974
      syntax:
        content:
          CSharp: public ExcelBuilder AddSheet(string sheetName, bool isOpenNow = true)
          VB: Public Function AddSheet(sheetName As String, isOpenNow As Boolean = True) As ExcelBuilder
        parameters:
        - id: sheetName
          type: System.String
        - id: isOpenNow
          type: System.Boolean
        return:
          type: ZeroFramework.Utility.ExcelBuilder
      overload: ZeroFramework.Utility.ExcelBuilder.AddSheet*
    - id: ZeroFramework.Utility.ExcelBuilder.RemoveSheet(System.Int32)
      commentId: M:ZeroFramework.Utility.ExcelBuilder.RemoveSheet(System.Int32)
      language: CSharp
      name:
        CSharp: RemoveSheet(int)
        VB: RemoveSheet(Integer)
      nameWithType:
        CSharp: ExcelBuilder.RemoveSheet(int)
        VB: ExcelBuilder.RemoveSheet(Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelBuilder.RemoveSheet(int)
        VB: ZeroFramework.Utility.ExcelBuilder.RemoveSheet(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: RemoveSheet
        path: ''
        startLine: 3980
      syntax:
        content:
          CSharp: public ExcelBuilder RemoveSheet(int sheetIdx)
          VB: Public Function RemoveSheet(sheetIdx As Integer) As ExcelBuilder
        parameters:
        - id: sheetIdx
          type: System.Int32
        return:
          type: ZeroFramework.Utility.ExcelBuilder
      overload: ZeroFramework.Utility.ExcelBuilder.RemoveSheet*
    - id: ZeroFramework.Utility.ExcelBuilder.RemoveSheet(System.String)
      commentId: M:ZeroFramework.Utility.ExcelBuilder.RemoveSheet(System.String)
      language: CSharp
      name:
        CSharp: RemoveSheet(string)
        VB: RemoveSheet(String)
      nameWithType:
        CSharp: ExcelBuilder.RemoveSheet(string)
        VB: ExcelBuilder.RemoveSheet(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelBuilder.RemoveSheet(string)
        VB: ZeroFramework.Utility.ExcelBuilder.RemoveSheet(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: RemoveSheet
        path: ''
        startLine: 3986
      syntax:
        content:
          CSharp: public ExcelBuilder RemoveSheet(string sheetName)
          VB: Public Function RemoveSheet(sheetName As String) As ExcelBuilder
        parameters:
        - id: sheetName
          type: System.String
        return:
          type: ZeroFramework.Utility.ExcelBuilder
      overload: ZeroFramework.Utility.ExcelBuilder.RemoveSheet*
    - id: ZeroFramework.Utility.ExcelBuilder.GetHandler
      commentId: M:ZeroFramework.Utility.ExcelBuilder.GetHandler
      language: CSharp
      name:
        CSharp: GetHandler()
        VB: GetHandler()
      nameWithType:
        CSharp: ExcelBuilder.GetHandler()
        VB: ExcelBuilder.GetHandler()
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelBuilder.GetHandler()
        VB: ZeroFramework.Utility.ExcelBuilder.GetHandler()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetHandler
        path: ''
        startLine: 3992
      syntax:
        content:
          CSharp: public IExcelHandler GetHandler()
          VB: Public Function GetHandler() As IExcelHandler
        return:
          type: ZeroFramework.Utility.IExcelHandler
      overload: ZeroFramework.Utility.ExcelBuilder.GetHandler*
  - id: ZeroFramework.Utility.ExcelTool
    commentId: T:ZeroFramework.Utility.ExcelTool
    language: CSharp
    name:
      CSharp: ExcelTool
      VB: ExcelTool
    nameWithType:
      CSharp: ExcelTool
      VB: ExcelTool
    qualifiedName:
      CSharp: ZeroFramework.Utility.ExcelTool
      VB: ZeroFramework.Utility.ExcelTool
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: ExcelTool
      path: ''
      startLine: 3998
    syntax:
      content:
        CSharp: public class ExcelTool
        VB: Public Class ExcelTool
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.ExcelTool.GetExcelBuilder
      commentId: M:ZeroFramework.Utility.ExcelTool.GetExcelBuilder
      language: CSharp
      name:
        CSharp: GetExcelBuilder()
        VB: GetExcelBuilder()
      nameWithType:
        CSharp: ExcelTool.GetExcelBuilder()
        VB: ExcelTool.GetExcelBuilder()
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelTool.GetExcelBuilder()
        VB: ZeroFramework.Utility.ExcelTool.GetExcelBuilder()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetExcelBuilder
        path: ''
        startLine: 4000
      syntax:
        content:
          CSharp: public ExcelBuilder GetExcelBuilder()
          VB: Public Function GetExcelBuilder() As ExcelBuilder
        return:
          type: ZeroFramework.Utility.ExcelBuilder
      overload: ZeroFramework.Utility.ExcelTool.GetExcelBuilder*
    - id: ZeroFramework.Utility.ExcelTool.GetExcelBuilder(System.String)
      commentId: M:ZeroFramework.Utility.ExcelTool.GetExcelBuilder(System.String)
      language: CSharp
      name:
        CSharp: GetExcelBuilder(string)
        VB: GetExcelBuilder(String)
      nameWithType:
        CSharp: ExcelTool.GetExcelBuilder(string)
        VB: ExcelTool.GetExcelBuilder(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelTool.GetExcelBuilder(string)
        VB: ZeroFramework.Utility.ExcelTool.GetExcelBuilder(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetExcelBuilder
        path: ''
        startLine: 4005
      syntax:
        content:
          CSharp: public ExcelBuilder GetExcelBuilder(string path)
          VB: Public Function GetExcelBuilder(path As String) As ExcelBuilder
        parameters:
        - id: path
          type: System.String
        return:
          type: ZeroFramework.Utility.ExcelBuilder
      overload: ZeroFramework.Utility.ExcelTool.GetExcelBuilder*
    - id: ZeroFramework.Utility.ExcelTool.GetExcelBuilder(System.String,System.Int32)
      commentId: M:ZeroFramework.Utility.ExcelTool.GetExcelBuilder(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: GetExcelBuilder(string, int)
        VB: GetExcelBuilder(String, Integer)
      nameWithType:
        CSharp: ExcelTool.GetExcelBuilder(string, int)
        VB: ExcelTool.GetExcelBuilder(String, Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelTool.GetExcelBuilder(string, int)
        VB: ZeroFramework.Utility.ExcelTool.GetExcelBuilder(String, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetExcelBuilder
        path: ''
        startLine: 4010
      syntax:
        content:
          CSharp: public ExcelBuilder GetExcelBuilder(string path, int sheetIdx)
          VB: Public Function GetExcelBuilder(path As String, sheetIdx As Integer) As ExcelBuilder
        parameters:
        - id: path
          type: System.String
        - id: sheetIdx
          type: System.Int32
        return:
          type: ZeroFramework.Utility.ExcelBuilder
      overload: ZeroFramework.Utility.ExcelTool.GetExcelBuilder*
    - id: ZeroFramework.Utility.ExcelTool.GetExcelBuilder(System.String,System.String)
      commentId: M:ZeroFramework.Utility.ExcelTool.GetExcelBuilder(System.String,System.String)
      language: CSharp
      name:
        CSharp: GetExcelBuilder(string, string)
        VB: GetExcelBuilder(String, String)
      nameWithType:
        CSharp: ExcelTool.GetExcelBuilder(string, string)
        VB: ExcelTool.GetExcelBuilder(String, String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ExcelTool.GetExcelBuilder(string, string)
        VB: ZeroFramework.Utility.ExcelTool.GetExcelBuilder(String, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetExcelBuilder
        path: ''
        startLine: 4015
      syntax:
        content:
          CSharp: public ExcelBuilder GetExcelBuilder(string path, string sheetName)
          VB: Public Function GetExcelBuilder(path As String, sheetName As String) As ExcelBuilder
        parameters:
        - id: path
          type: System.String
        - id: sheetName
          type: System.String
        return:
          type: ZeroFramework.Utility.ExcelBuilder
      overload: ZeroFramework.Utility.ExcelTool.GetExcelBuilder*
  - id: ZeroFramework.Utility.ImageTool
    commentId: T:ZeroFramework.Utility.ImageTool
    language: CSharp
    name:
      CSharp: ImageTool
      VB: ImageTool
    nameWithType:
      CSharp: ImageTool
      VB: ImageTool
    qualifiedName:
      CSharp: ZeroFramework.Utility.ImageTool
      VB: ZeroFramework.Utility.ImageTool
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: ImageTool
      path: ''
      startLine: 4036
    syntax:
      content:
        CSharp: public class ImageTool
        VB: Public Class ImageTool
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.ImageTool.ReadFromUri(System.String,UnityAction{Texture2D})
      commentId: M:ZeroFramework.Utility.ImageTool.ReadFromUri(System.String,UnityAction{Texture2D})
      language: CSharp
      name:
        CSharp: ReadFromUri(string, UnityAction<Texture2D>)
        VB: ReadFromUri(String, UnityAction(Of Texture2D))
      nameWithType:
        CSharp: ImageTool.ReadFromUri(string, UnityAction<Texture2D>)
        VB: ImageTool.ReadFromUri(String, UnityAction(Of Texture2D))
      qualifiedName:
        CSharp: ZeroFramework.Utility.ImageTool.ReadFromUri(string, UnityAction<Texture2D>)
        VB: ZeroFramework.Utility.ImageTool.ReadFromUri(String, UnityAction(Of Texture2D))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ReadFromUri
        path: ''
        startLine: 4038
      syntax:
        content:
          CSharp: public IEnumerator ReadFromUri(string imageUrl, UnityAction<Texture2D> callback)
          VB: Public Function ReadFromUri(imageUrl As String, callback As UnityAction(Of Texture2D)) As IEnumerator
        parameters:
        - id: imageUrl
          type: System.String
        - id: callback
          type: Global.UnityAction{Texture2D}
        return:
          type: System.Collections.IEnumerator
      overload: ZeroFramework.Utility.ImageTool.ReadFromUri*
    - id: ZeroFramework.Utility.ImageTool.ReadFromUri(System.String,UnityAction{Sprite})
      commentId: M:ZeroFramework.Utility.ImageTool.ReadFromUri(System.String,UnityAction{Sprite})
      language: CSharp
      name:
        CSharp: ReadFromUri(string, UnityAction<Sprite>)
        VB: ReadFromUri(String, UnityAction(Of Sprite))
      nameWithType:
        CSharp: ImageTool.ReadFromUri(string, UnityAction<Sprite>)
        VB: ImageTool.ReadFromUri(String, UnityAction(Of Sprite))
      qualifiedName:
        CSharp: ZeroFramework.Utility.ImageTool.ReadFromUri(string, UnityAction<Sprite>)
        VB: ZeroFramework.Utility.ImageTool.ReadFromUri(String, UnityAction(Of Sprite))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ReadFromUri
        path: ''
        startLine: 4054
      syntax:
        content:
          CSharp: public IEnumerator ReadFromUri(string imageUrl, UnityAction<Sprite> callback)
          VB: Public Function ReadFromUri(imageUrl As String, callback As UnityAction(Of Sprite)) As IEnumerator
        parameters:
        - id: imageUrl
          type: System.String
        - id: callback
          type: Global.UnityAction{Sprite}
        return:
          type: System.Collections.IEnumerator
      overload: ZeroFramework.Utility.ImageTool.ReadFromUri*
  - id: ZeroFramework.Utility.JsonTool
    commentId: T:ZeroFramework.Utility.JsonTool
    language: CSharp
    name:
      CSharp: JsonTool
      VB: JsonTool
    nameWithType:
      CSharp: JsonTool
      VB: JsonTool
    qualifiedName:
      CSharp: ZeroFramework.Utility.JsonTool
      VB: ZeroFramework.Utility.JsonTool
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: JsonTool
      path: ''
      startLine: 4084
    syntax:
      content:
        CSharp: public class JsonTool
        VB: Public Class JsonTool
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.JsonTool.SerializeObject(System.Object)
      commentId: M:ZeroFramework.Utility.JsonTool.SerializeObject(System.Object)
      language: CSharp
      name:
        CSharp: SerializeObject(object)
        VB: SerializeObject(Object)
      nameWithType:
        CSharp: JsonTool.SerializeObject(object)
        VB: JsonTool.SerializeObject(Object)
      qualifiedName:
        CSharp: ZeroFramework.Utility.JsonTool.SerializeObject(object)
        VB: ZeroFramework.Utility.JsonTool.SerializeObject(Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: SerializeObject
        path: ''
        startLine: 4086
      syntax:
        content:
          CSharp: public string SerializeObject(object obj)
          VB: Public Function SerializeObject(obj As Object) As String
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.String
      overload: ZeroFramework.Utility.JsonTool.SerializeObject*
    - id: ZeroFramework.Utility.JsonTool.DeserializeObject``1(System.String)
      commentId: M:ZeroFramework.Utility.JsonTool.DeserializeObject``1(System.String)
      language: CSharp
      name:
        CSharp: DeserializeObject<T>(string)
        VB: DeserializeObject(Of T)(String)
      nameWithType:
        CSharp: JsonTool.DeserializeObject<T>(string)
        VB: JsonTool.DeserializeObject(Of T)(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.JsonTool.DeserializeObject<T>(string)
        VB: ZeroFramework.Utility.JsonTool.DeserializeObject(Of T)(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: DeserializeObject
        path: ''
        startLine: 4095
      syntax:
        content:
          CSharp: public T DeserializeObject<T>(string json)
          VB: Public Function DeserializeObject(Of T)(json As String) As T
        parameters:
        - id: json
          type: System.String
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.Utility.JsonTool.DeserializeObject*
  - id: ZeroFramework.Utility.TextTool
    commentId: T:ZeroFramework.Utility.TextTool
    language: CSharp
    name:
      CSharp: TextTool
      VB: TextTool
    nameWithType:
      CSharp: TextTool
      VB: TextTool
    qualifiedName:
      CSharp: ZeroFramework.Utility.TextTool
      VB: ZeroFramework.Utility.TextTool
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: TextTool
      path: ''
      startLine: 4118
    syntax:
      content:
        CSharp: public class TextTool
        VB: Public Class TextTool
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.TextTool.Read(System.String)
      commentId: M:ZeroFramework.Utility.TextTool.Read(System.String)
      language: CSharp
      name:
        CSharp: Read(string)
        VB: Read(String)
      nameWithType:
        CSharp: TextTool.Read(string)
        VB: TextTool.Read(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.TextTool.Read(string)
        VB: ZeroFramework.Utility.TextTool.Read(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Read
        path: ''
        startLine: 4120
      syntax:
        content:
          CSharp: public string Read(string path)
          VB: Public Function Read(path As String) As String
        parameters:
        - id: path
          type: System.String
        return:
          type: System.String
      overload: ZeroFramework.Utility.TextTool.Read*
    - id: ZeroFramework.Utility.TextTool.Write(System.String,System.String)
      commentId: M:ZeroFramework.Utility.TextTool.Write(System.String,System.String)
      language: CSharp
      name:
        CSharp: Write(string, string)
        VB: Write(String, String)
      nameWithType:
        CSharp: TextTool.Write(string, string)
        VB: TextTool.Write(String, String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.TextTool.Write(string, string)
        VB: ZeroFramework.Utility.TextTool.Write(String, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Write
        path: ''
        startLine: 4140
      syntax:
        content:
          CSharp: public void Write(string path, string content)
          VB: Public Sub Write(path As String, content As String)
        parameters:
        - id: path
          type: System.String
        - id: content
          type: System.String
      overload: ZeroFramework.Utility.TextTool.Write*
    - id: ZeroFramework.Utility.TextTool.ReadAsync(System.String,Action{System.String})
      commentId: M:ZeroFramework.Utility.TextTool.ReadAsync(System.String,Action{System.String})
      language: CSharp
      name:
        CSharp: ReadAsync(string, Action<string>)
        VB: ReadAsync(String, Action(Of String))
      nameWithType:
        CSharp: TextTool.ReadAsync(string, Action<string>)
        VB: TextTool.ReadAsync(String, Action(Of String))
      qualifiedName:
        CSharp: ZeroFramework.Utility.TextTool.ReadAsync(string, Action<string>)
        VB: ZeroFramework.Utility.TextTool.ReadAsync(String, Action(Of String))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ReadAsync
        path: ''
        startLine: 4150
      syntax:
        content:
          CSharp: public void ReadAsync(string path, Action<string> readCallback)
          VB: Public Sub ReadAsync(path As String, readCallback As Action(Of String))
        parameters:
        - id: path
          type: System.String
        - id: readCallback
          type: Global.Action{System.String}
      overload: ZeroFramework.Utility.TextTool.ReadAsync*
    - id: ZeroFramework.Utility.TextTool.WriteAsync(System.String,System.String,Action)
      commentId: M:ZeroFramework.Utility.TextTool.WriteAsync(System.String,System.String,Action)
      language: CSharp
      name:
        CSharp: WriteAsync(string, string, Action)
        VB: WriteAsync(String, String, Action)
      nameWithType:
        CSharp: TextTool.WriteAsync(string, string, Action)
        VB: TextTool.WriteAsync(String, String, Action)
      qualifiedName:
        CSharp: ZeroFramework.Utility.TextTool.WriteAsync(string, string, Action)
        VB: ZeroFramework.Utility.TextTool.WriteAsync(String, String, Action)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: WriteAsync
        path: ''
        startLine: 4159
      syntax:
        content:
          CSharp: public void WriteAsync(string path, string content, Action writeCallback)
          VB: Public Sub WriteAsync(path As String, content As String, writeCallback As Action)
        parameters:
        - id: path
          type: System.String
        - id: content
          type: System.String
        - id: writeCallback
          type: Global.Action
      overload: ZeroFramework.Utility.TextTool.WriteAsync*
    - id: ZeroFramework.Utility.TextTool.ReadByEnumerator(System.String,UnityAction{System.String})
      commentId: M:ZeroFramework.Utility.TextTool.ReadByEnumerator(System.String,UnityAction{System.String})
      language: CSharp
      name:
        CSharp: ReadByEnumerator(string, UnityAction<string>)
        VB: ReadByEnumerator(String, UnityAction(Of String))
      nameWithType:
        CSharp: TextTool.ReadByEnumerator(string, UnityAction<string>)
        VB: TextTool.ReadByEnumerator(String, UnityAction(Of String))
      qualifiedName:
        CSharp: ZeroFramework.Utility.TextTool.ReadByEnumerator(string, UnityAction<string>)
        VB: ZeroFramework.Utility.TextTool.ReadByEnumerator(String, UnityAction(Of String))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ReadByEnumerator
        path: ''
        startLine: 4170
      syntax:
        content:
          CSharp: public IEnumerator ReadByEnumerator(string uri, UnityAction<string> callback)
          VB: Public Function ReadByEnumerator(uri As String, callback As UnityAction(Of String)) As IEnumerator
        parameters:
        - id: uri
          type: System.String
        - id: callback
          type: Global.UnityAction{System.String}
        return:
          type: System.Collections.IEnumerator
      overload: ZeroFramework.Utility.TextTool.ReadByEnumerator*
  - id: ZeroFramework.Utility.YamlTool
    commentId: T:ZeroFramework.Utility.YamlTool
    language: CSharp
    name:
      CSharp: YamlTool
      VB: YamlTool
    nameWithType:
      CSharp: YamlTool
      VB: YamlTool
    qualifiedName:
      CSharp: ZeroFramework.Utility.YamlTool
      VB: ZeroFramework.Utility.YamlTool
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: YamlTool
      path: ''
      startLine: 4194
    syntax:
      content:
        CSharp: public class YamlTool
        VB: Public Class YamlTool
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.YamlTool.YamlToJson(System.String)
      commentId: M:ZeroFramework.Utility.YamlTool.YamlToJson(System.String)
      language: CSharp
      name:
        CSharp: YamlToJson(string)
        VB: YamlToJson(String)
      nameWithType:
        CSharp: YamlTool.YamlToJson(string)
        VB: YamlTool.YamlToJson(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.YamlTool.YamlToJson(string)
        VB: ZeroFramework.Utility.YamlTool.YamlToJson(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: YamlToJson
        path: ''
        startLine: 4196
      syntax:
        content:
          CSharp: public string YamlToJson(string yaml)
          VB: Public Function YamlToJson(yaml As String) As String
        parameters:
        - id: yaml
          type: System.String
        return:
          type: System.String
      overload: ZeroFramework.Utility.YamlTool.YamlToJson*
    - id: ZeroFramework.Utility.YamlTool.SerializeObject(System.Object)
      commentId: M:ZeroFramework.Utility.YamlTool.SerializeObject(System.Object)
      language: CSharp
      name:
        CSharp: SerializeObject(object)
        VB: SerializeObject(Object)
      nameWithType:
        CSharp: YamlTool.SerializeObject(object)
        VB: YamlTool.SerializeObject(Object)
      qualifiedName:
        CSharp: ZeroFramework.Utility.YamlTool.SerializeObject(object)
        VB: ZeroFramework.Utility.YamlTool.SerializeObject(Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: SerializeObject
        path: ''
        startLine: 4210
      syntax:
        content:
          CSharp: public string SerializeObject(object obj)
          VB: Public Function SerializeObject(obj As Object) As String
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.String
      overload: ZeroFramework.Utility.YamlTool.SerializeObject*
    - id: ZeroFramework.Utility.YamlTool.DeserializeObject``1(System.String)
      commentId: M:ZeroFramework.Utility.YamlTool.DeserializeObject``1(System.String)
      language: CSharp
      name:
        CSharp: DeserializeObject<T>(string)
        VB: DeserializeObject(Of T)(String)
      nameWithType:
        CSharp: YamlTool.DeserializeObject<T>(string)
        VB: YamlTool.DeserializeObject(Of T)(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.YamlTool.DeserializeObject<T>(string)
        VB: ZeroFramework.Utility.YamlTool.DeserializeObject(Of T)(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: DeserializeObject
        path: ''
        startLine: 4217
      syntax:
        content:
          CSharp: public T DeserializeObject<T>(string yaml)
          VB: Public Function DeserializeObject(Of T)(yaml As String) As T
        parameters:
        - id: yaml
          type: System.String
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.Utility.YamlTool.DeserializeObject*
  - id: ZeroFramework.Utility.IFileKit
    commentId: T:ZeroFramework.Utility.IFileKit
    language: CSharp
    name:
      CSharp: IFileKit
      VB: IFileKit
    nameWithType:
      CSharp: IFileKit
      VB: IFileKit
    qualifiedName:
      CSharp: ZeroFramework.Utility.IFileKit
      VB: ZeroFramework.Utility.IFileKit
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: IFileKit
      path: ''
      startLine: 4234
    syntax:
      content:
        CSharp: 'public interface IFileKit : IUtility'
        VB: Public Interface IFileKit Inherits IUtility
    items:
    - id: ZeroFramework.Utility.IFileKit.BytesTool
      commentId: P:ZeroFramework.Utility.IFileKit.BytesTool
      language: CSharp
      name:
        CSharp: BytesTool
        VB: BytesTool
      nameWithType:
        CSharp: IFileKit.BytesTool
        VB: IFileKit.BytesTool
      qualifiedName:
        CSharp: ZeroFramework.Utility.IFileKit.BytesTool
        VB: ZeroFramework.Utility.IFileKit.BytesTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: BytesTool
        path: ''
        startLine: 4236
      syntax:
        content:
          CSharp: BytesTool BytesTool { get; }
          VB: ReadOnly Property BytesTool As BytesTool
        parameters: []
        return:
          type: ZeroFramework.Utility.BytesTool
      overload: ZeroFramework.Utility.IFileKit.BytesTool*
    - id: ZeroFramework.Utility.IFileKit.ImageTool
      commentId: P:ZeroFramework.Utility.IFileKit.ImageTool
      language: CSharp
      name:
        CSharp: ImageTool
        VB: ImageTool
      nameWithType:
        CSharp: IFileKit.ImageTool
        VB: IFileKit.ImageTool
      qualifiedName:
        CSharp: ZeroFramework.Utility.IFileKit.ImageTool
        VB: ZeroFramework.Utility.IFileKit.ImageTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ImageTool
        path: ''
        startLine: 4237
      syntax:
        content:
          CSharp: ImageTool ImageTool { get; }
          VB: ReadOnly Property ImageTool As ImageTool
        parameters: []
        return:
          type: ZeroFramework.Utility.ImageTool
      overload: ZeroFramework.Utility.IFileKit.ImageTool*
    - id: ZeroFramework.Utility.IFileKit.JsonTool
      commentId: P:ZeroFramework.Utility.IFileKit.JsonTool
      language: CSharp
      name:
        CSharp: JsonTool
        VB: JsonTool
      nameWithType:
        CSharp: IFileKit.JsonTool
        VB: IFileKit.JsonTool
      qualifiedName:
        CSharp: ZeroFramework.Utility.IFileKit.JsonTool
        VB: ZeroFramework.Utility.IFileKit.JsonTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: JsonTool
        path: ''
        startLine: 4238
      syntax:
        content:
          CSharp: JsonTool JsonTool { get; }
          VB: ReadOnly Property JsonTool As JsonTool
        parameters: []
        return:
          type: ZeroFramework.Utility.JsonTool
      overload: ZeroFramework.Utility.IFileKit.JsonTool*
    - id: ZeroFramework.Utility.IFileKit.TextTool
      commentId: P:ZeroFramework.Utility.IFileKit.TextTool
      language: CSharp
      name:
        CSharp: TextTool
        VB: TextTool
      nameWithType:
        CSharp: IFileKit.TextTool
        VB: IFileKit.TextTool
      qualifiedName:
        CSharp: ZeroFramework.Utility.IFileKit.TextTool
        VB: ZeroFramework.Utility.IFileKit.TextTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: TextTool
        path: ''
        startLine: 4239
      syntax:
        content:
          CSharp: TextTool TextTool { get; }
          VB: ReadOnly Property TextTool As TextTool
        parameters: []
        return:
          type: ZeroFramework.Utility.TextTool
      overload: ZeroFramework.Utility.IFileKit.TextTool*
    - id: ZeroFramework.Utility.IFileKit.YamlTool
      commentId: P:ZeroFramework.Utility.IFileKit.YamlTool
      language: CSharp
      name:
        CSharp: YamlTool
        VB: YamlTool
      nameWithType:
        CSharp: IFileKit.YamlTool
        VB: IFileKit.YamlTool
      qualifiedName:
        CSharp: ZeroFramework.Utility.IFileKit.YamlTool
        VB: ZeroFramework.Utility.IFileKit.YamlTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: YamlTool
        path: ''
        startLine: 4240
      syntax:
        content:
          CSharp: YamlTool YamlTool { get; }
          VB: ReadOnly Property YamlTool As YamlTool
        parameters: []
        return:
          type: ZeroFramework.Utility.YamlTool
      overload: ZeroFramework.Utility.IFileKit.YamlTool*
    - id: ZeroFramework.Utility.IFileKit.ExcelTool
      commentId: P:ZeroFramework.Utility.IFileKit.ExcelTool
      language: CSharp
      name:
        CSharp: ExcelTool
        VB: ExcelTool
      nameWithType:
        CSharp: IFileKit.ExcelTool
        VB: IFileKit.ExcelTool
      qualifiedName:
        CSharp: ZeroFramework.Utility.IFileKit.ExcelTool
        VB: ZeroFramework.Utility.IFileKit.ExcelTool
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: ExcelTool
        path: ''
        startLine: 4241
      syntax:
        content:
          CSharp: ExcelTool ExcelTool { get; }
          VB: ReadOnly Property ExcelTool As ExcelTool
        parameters: []
        return:
          type: ZeroFramework.Utility.ExcelTool
      overload: ZeroFramework.Utility.IFileKit.ExcelTool*
    - id: ZeroFramework.Utility.IFileKit.BytesToString(System.Byte[])
      commentId: M:ZeroFramework.Utility.IFileKit.BytesToString(System.Byte[])
      language: CSharp
      name:
        CSharp: BytesToString(byte[])
        VB: BytesToString(Byte())
      nameWithType:
        CSharp: IFileKit.BytesToString(byte[])
        VB: IFileKit.BytesToString(Byte())
      qualifiedName:
        CSharp: ZeroFramework.Utility.IFileKit.BytesToString(byte[])
        VB: ZeroFramework.Utility.IFileKit.BytesToString(Byte())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: BytesToString
        path: ''
        startLine: 4243
      syntax:
        content:
          CSharp: string BytesToString(byte[] bytes)
          VB: Function BytesToString(bytes As Byte()) As String
        parameters:
        - id: bytes
          type: System.Byte[]
        return:
          type: System.String
      overload: ZeroFramework.Utility.IFileKit.BytesToString*
    - id: ZeroFramework.Utility.IFileKit.StringToBytes(System.String)
      commentId: M:ZeroFramework.Utility.IFileKit.StringToBytes(System.String)
      language: CSharp
      name:
        CSharp: StringToBytes(string)
        VB: StringToBytes(String)
      nameWithType:
        CSharp: IFileKit.StringToBytes(string)
        VB: IFileKit.StringToBytes(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IFileKit.StringToBytes(string)
        VB: ZeroFramework.Utility.IFileKit.StringToBytes(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: StringToBytes
        path: ''
        startLine: 4244
      syntax:
        content:
          CSharp: byte[] StringToBytes(string str)
          VB: Function StringToBytes(str As String) As Byte()
        parameters:
        - id: str
          type: System.String
        return:
          type: System.Byte[]
      overload: ZeroFramework.Utility.IFileKit.StringToBytes*
    - id: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj``1(System.String)
      commentId: M:ZeroFramework.Utility.IFileKit.Yaml2Json2Obj``1(System.String)
      language: CSharp
      name:
        CSharp: Yaml2Json2Obj<T>(string)
        VB: Yaml2Json2Obj(Of T)(String)
      nameWithType:
        CSharp: IFileKit.Yaml2Json2Obj<T>(string)
        VB: IFileKit.Yaml2Json2Obj(Of T)(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj<T>(string)
        VB: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj(Of T)(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Yaml2Json2Obj
        path: ''
        startLine: 4246
      syntax:
        content:
          CSharp: T Yaml2Json2Obj<T>(string yamlStr)
          VB: Function Yaml2Json2Obj(Of T)(yamlStr As String) As T
        parameters:
        - id: yamlStr
          type: System.String
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj*
    - id: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj``1(System.String)
      commentId: M:ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj``1(System.String)
      language: CSharp
      name:
        CSharp: Path2Yaml2Json2Obj<T>(string)
        VB: Path2Yaml2Json2Obj(Of T)(String)
      nameWithType:
        CSharp: IFileKit.Path2Yaml2Json2Obj<T>(string)
        VB: IFileKit.Path2Yaml2Json2Obj(Of T)(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj<T>(string)
        VB: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj(Of T)(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Path2Yaml2Json2Obj
        path: ''
        startLine: 4248
      syntax:
        content:
          CSharp: T Path2Yaml2Json2Obj<T>(string path)
          VB: Function Path2Yaml2Json2Obj(Of T)(path As String) As T
        parameters:
        - id: path
          type: System.String
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj*
  - id: ZeroFramework.Utility.ZeroLogFactory
    commentId: T:ZeroFramework.Utility.ZeroLogFactory
    language: CSharp
    name:
      CSharp: ZeroLogFactory
      VB: ZeroLogFactory
    nameWithType:
      CSharp: ZeroLogFactory
      VB: ZeroLogFactory
    qualifiedName:
      CSharp: ZeroFramework.Utility.ZeroLogFactory
      VB: ZeroFramework.Utility.ZeroLogFactory
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: ZeroLogFactory
      path: ''
      startLine: 4268
    syntax:
      content:
        CSharp: 'public class ZeroLogFactory : ILoggerFactory'
        VB: Public Class ZeroLogFactory Inherits ILoggerFactory
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.ZeroLogFactory.#ctor(System.String,System.String)
      commentId: M:ZeroFramework.Utility.ZeroLogFactory.#ctor(System.String,System.String)
      language: CSharp
      name:
        CSharp: ZeroLogFactory(string, string)
        VB: New(String, String)
      nameWithType:
        CSharp: ZeroLogFactory.ZeroLogFactory(string, string)
        VB: ZeroLogFactory.New(String, String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ZeroLogFactory.ZeroLogFactory(string, string)
        VB: ZeroFramework.Utility.ZeroLogFactory.New(String, String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 4272
      syntax:
        content:
          CSharp: public ZeroLogFactory(string configPath, string outputPath)
          VB: Public Sub New(configPath As String, outputPath As String)
        parameters:
        - id: configPath
          type: System.String
        - id: outputPath
          type: System.String
      overload: ZeroFramework.Utility.ZeroLogFactory.#ctor*
    - id: ZeroFramework.Utility.ZeroLogFactory.Init
      commentId: M:ZeroFramework.Utility.ZeroLogFactory.Init
      language: CSharp
      name:
        CSharp: Init()
        VB: Init()
      nameWithType:
        CSharp: ZeroLogFactory.Init()
        VB: ZeroLogFactory.Init()
      qualifiedName:
        CSharp: ZeroFramework.Utility.ZeroLogFactory.Init()
        VB: ZeroFramework.Utility.ZeroLogFactory.Init()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Init
        path: ''
        startLine: 4278
      syntax:
        content:
          CSharp: public void Init()
          VB: Public Sub Init()
      overload: ZeroFramework.Utility.ZeroLogFactory.Init*
    - id: ZeroFramework.Utility.ZeroLogFactory.Create(Type)
      commentId: M:ZeroFramework.Utility.ZeroLogFactory.Create(Type)
      language: CSharp
      name:
        CSharp: Create(Type)
        VB: Create(Type)
      nameWithType:
        CSharp: ZeroLogFactory.Create(Type)
        VB: ZeroLogFactory.Create(Type)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ZeroLogFactory.Create(Type)
        VB: ZeroFramework.Utility.ZeroLogFactory.Create(Type)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Create
        path: ''
        startLine: 4290
      syntax:
        content:
          CSharp: public ILogger Create(Type type)
          VB: Public Function Create(type As Type) As ILogger
        parameters:
        - id: type
          type: Global.Type
        return:
          type: Global.ILogger
      overload: ZeroFramework.Utility.ZeroLogFactory.Create*
  - id: ZeroFramework.Utility.Many2ManyNode
    commentId: T:ZeroFramework.Utility.Many2ManyNode
    language: CSharp
    name:
      CSharp: Many2ManyNode
      VB: Many2ManyNode
    nameWithType:
      CSharp: Many2ManyNode
      VB: Many2ManyNode
    qualifiedName:
      CSharp: ZeroFramework.Utility.Many2ManyNode
      VB: ZeroFramework.Utility.Many2ManyNode
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: Many2ManyNode
      path: ''
      startLine: 4312
    syntax:
      content:
        CSharp: 'public abstract class Many2ManyNode : Node'
        VB: Public MustInherit Class Many2ManyNode Inherits Node
    inheritance:
    - System.Object
    - ZeroFramework.Utility.Node
    inheritedMembers:
    - ZeroFramework.Utility.Node.asset
    - ZeroFramework.Utility.Node.type
    - ZeroFramework.Utility.Node.started
    - ZeroFramework.Utility.Node.currentState
    - ZeroFramework.Utility.Node.guid
    - ZeroFramework.Utility.Node.position
    - ZeroFramework.Utility.Node.OnChildrenChangeInInspector
    - ZeroFramework.Utility.Node.description
    - ZeroFramework.Utility.Node.Update
    - ZeroFramework.Utility.Node.OnStart
    - ZeroFramework.Utility.Node.OnUpdate
    - ZeroFramework.Utility.Node.OnStop
    items:
    - id: ZeroFramework.Utility.Many2ManyNode.children
      commentId: F:ZeroFramework.Utility.Many2ManyNode.children
      language: CSharp
      name:
        CSharp: children
        VB: children
      nameWithType:
        CSharp: Many2ManyNode.children
        VB: Many2ManyNode.children
      qualifiedName:
        CSharp: ZeroFramework.Utility.Many2ManyNode.children
        VB: ZeroFramework.Utility.Many2ManyNode.children
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: children
        path: ''
        startLine: 4315
      syntax:
        content:
          CSharp: public List<Node> children
          VB: Public children As List(Of Node)
        return:
          type: System.Collections.Generic.List{ZeroFramework.Utility.Node}
    - id: ZeroFramework.Utility.Many2ManyNode.#ctor
      commentId: M:ZeroFramework.Utility.Many2ManyNode.#ctor
      language: CSharp
      name:
        CSharp: Many2ManyNode()
        VB: New()
      nameWithType:
        CSharp: Many2ManyNode.Many2ManyNode()
        VB: Many2ManyNode.New()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Many2ManyNode.Many2ManyNode()
        VB: ZeroFramework.Utility.Many2ManyNode.New()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 4317
      syntax:
        content:
          CSharp: public Many2ManyNode()
          VB: Public Sub New()
      overload: ZeroFramework.Utility.Many2ManyNode.#ctor*
  - id: ZeroFramework.Utility.Many2SingleNode
    commentId: T:ZeroFramework.Utility.Many2SingleNode
    language: CSharp
    name:
      CSharp: Many2SingleNode
      VB: Many2SingleNode
    nameWithType:
      CSharp: Many2SingleNode
      VB: Many2SingleNode
    qualifiedName:
      CSharp: ZeroFramework.Utility.Many2SingleNode
      VB: ZeroFramework.Utility.Many2SingleNode
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: Many2SingleNode
      path: ''
      startLine: 4361
    syntax:
      content:
        CSharp: 'public abstract class Many2SingleNode : Single2SingleNode'
        VB: Public MustInherit Class Many2SingleNode Inherits Single2SingleNode
    inheritance:
    - System.Object
    - ZeroFramework.Utility.Node
    - ZeroFramework.Utility.Single2SingleNode
    inheritedMembers:
    - ZeroFramework.Utility.Single2SingleNode.child
    - ZeroFramework.Utility.Node.asset
    - ZeroFramework.Utility.Node.type
    - ZeroFramework.Utility.Node.started
    - ZeroFramework.Utility.Node.currentState
    - ZeroFramework.Utility.Node.guid
    - ZeroFramework.Utility.Node.position
    - ZeroFramework.Utility.Node.OnChildrenChangeInInspector
    - ZeroFramework.Utility.Node.description
    - ZeroFramework.Utility.Node.Update
    - ZeroFramework.Utility.Node.OnStart
    - ZeroFramework.Utility.Node.OnUpdate
    - ZeroFramework.Utility.Node.OnStop
    items:
    - id: ZeroFramework.Utility.Many2SingleNode.#ctor
      commentId: M:ZeroFramework.Utility.Many2SingleNode.#ctor
      language: CSharp
      name:
        CSharp: Many2SingleNode()
        VB: New()
      nameWithType:
        CSharp: Many2SingleNode.Many2SingleNode()
        VB: Many2SingleNode.New()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Many2SingleNode.Many2SingleNode()
        VB: ZeroFramework.Utility.Many2SingleNode.New()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 4363
      syntax:
        content:
          CSharp: public Many2SingleNode()
          VB: Public Sub New()
      overload: ZeroFramework.Utility.Many2SingleNode.#ctor*
  - id: ZeroFramework.Utility.Node
    commentId: T:ZeroFramework.Utility.Node
    language: CSharp
    name:
      CSharp: Node
      VB: Node
    nameWithType:
      CSharp: Node
      VB: Node
    qualifiedName:
      CSharp: ZeroFramework.Utility.Node
      VB: ZeroFramework.Utility.Node
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: Node
      path: ''
      startLine: 4386
    syntax:
      content:
        CSharp: 'public abstract class Node : ScriptableObject'
        VB: Public MustInherit Class Node Inherits ScriptableObject
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.Node.asset
      commentId: F:ZeroFramework.Utility.Node.asset
      language: CSharp
      name:
        CSharp: asset
        VB: asset
      nameWithType:
        CSharp: Node.asset
        VB: Node.asset
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.asset
        VB: ZeroFramework.Utility.Node.asset
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: asset
        path: ''
        startLine: 4396
      syntax:
        content:
          CSharp: public Node asset
          VB: Public asset As Node
        return:
          type: ZeroFramework.Utility.Node
    - id: ZeroFramework.Utility.Node.type
      commentId: F:ZeroFramework.Utility.Node.type
      language: CSharp
      name:
        CSharp: type
        VB: type
      nameWithType:
        CSharp: Node.type
        VB: Node.type
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.type
        VB: ZeroFramework.Utility.Node.type
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: type
        path: ''
        startLine: 4397
      syntax:
        content:
          CSharp: public Node.Type type
          VB: Public type As Node.Type
        return:
          type: ZeroFramework.Utility.Node.Type
    - id: ZeroFramework.Utility.Node.started
      commentId: F:ZeroFramework.Utility.Node.started
      language: CSharp
      name:
        CSharp: started
        VB: started
      nameWithType:
        CSharp: Node.started
        VB: Node.started
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.started
        VB: ZeroFramework.Utility.Node.started
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: started
        path: ''
        startLine: 4398
      syntax:
        content:
          CSharp: public bool started
          VB: Public started As Boolean
        return:
          type: System.Boolean
    - id: ZeroFramework.Utility.Node.currentState
      commentId: F:ZeroFramework.Utility.Node.currentState
      language: CSharp
      name:
        CSharp: currentState
        VB: currentState
      nameWithType:
        CSharp: Node.currentState
        VB: Node.currentState
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.currentState
        VB: ZeroFramework.Utility.Node.currentState
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: currentState
        path: ''
        startLine: 4399
      syntax:
        content:
          CSharp: public Node.State currentState
          VB: Public currentState As Node.State
        return:
          type: ZeroFramework.Utility.Node.State
    - id: ZeroFramework.Utility.Node.guid
      commentId: F:ZeroFramework.Utility.Node.guid
      language: CSharp
      name:
        CSharp: guid
        VB: guid
      nameWithType:
        CSharp: Node.guid
        VB: Node.guid
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.guid
        VB: ZeroFramework.Utility.Node.guid
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: guid
        path: ''
        startLine: 4400
      syntax:
        content:
          CSharp: public string guid
          VB: Public guid As String
        return:
          type: System.String
    - id: ZeroFramework.Utility.Node.position
      commentId: F:ZeroFramework.Utility.Node.position
      language: CSharp
      name:
        CSharp: position
        VB: position
      nameWithType:
        CSharp: Node.position
        VB: Node.position
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.position
        VB: ZeroFramework.Utility.Node.position
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: position
        path: ''
        startLine: 4401
      syntax:
        content:
          CSharp: public Vector2 position
          VB: Public position As Vector2
        return:
          type: Global.Vector2
    - id: ZeroFramework.Utility.Node.OnChildrenChangeInInspector
      commentId: F:ZeroFramework.Utility.Node.OnChildrenChangeInInspector
      language: CSharp
      name:
        CSharp: OnChildrenChangeInInspector
        VB: OnChildrenChangeInInspector
      nameWithType:
        CSharp: Node.OnChildrenChangeInInspector
        VB: Node.OnChildrenChangeInInspector
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.OnChildrenChangeInInspector
        VB: ZeroFramework.Utility.Node.OnChildrenChangeInInspector
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: OnChildrenChangeInInspector
        path: ''
        startLine: 4402
      syntax:
        content:
          CSharp: public Action OnChildrenChangeInInspector
          VB: Public OnChildrenChangeInInspector As Action
        return:
          type: Global.Action
    - id: ZeroFramework.Utility.Node.description
      commentId: F:ZeroFramework.Utility.Node.description
      language: CSharp
      name:
        CSharp: description
        VB: description
      nameWithType:
        CSharp: Node.description
        VB: Node.description
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.description
        VB: ZeroFramework.Utility.Node.description
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: description
        path: ''
        startLine: 4404
      syntax:
        content:
          CSharp: public string description
          VB: Public description As String
        return:
          type: System.String
    - id: ZeroFramework.Utility.Node.Update
      commentId: M:ZeroFramework.Utility.Node.Update
      language: CSharp
      name:
        CSharp: Update()
        VB: Update()
      nameWithType:
        CSharp: Node.Update()
        VB: Node.Update()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.Update()
        VB: ZeroFramework.Utility.Node.Update()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Update
        path: ''
        startLine: 4406
      syntax:
        content:
          CSharp: public Node Update()
          VB: Public Function Update() As Node
        return:
          type: ZeroFramework.Utility.Node
      overload: ZeroFramework.Utility.Node.Update*
    - id: ZeroFramework.Utility.Node.OnStart
      commentId: M:ZeroFramework.Utility.Node.OnStart
      language: CSharp
      name:
        CSharp: OnStart()
        VB: OnStart()
      nameWithType:
        CSharp: Node.OnStart()
        VB: Node.OnStart()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.OnStart()
        VB: ZeroFramework.Utility.Node.OnStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: OnStart
        path: ''
        startLine: 4425
      syntax:
        content:
          CSharp: protected abstract void OnStart()
          VB: Protected MustOverride Sub OnStart()
      overload: ZeroFramework.Utility.Node.OnStart*
    - id: ZeroFramework.Utility.Node.OnUpdate
      commentId: M:ZeroFramework.Utility.Node.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: Node.OnUpdate()
        VB: Node.OnUpdate()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.OnUpdate()
        VB: ZeroFramework.Utility.Node.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: OnUpdate
        path: ''
        startLine: 4426
      syntax:
        content:
          CSharp: protected abstract Node OnUpdate()
          VB: Protected MustOverride Function OnUpdate() As Node
        return:
          type: ZeroFramework.Utility.Node
      overload: ZeroFramework.Utility.Node.OnUpdate*
    - id: ZeroFramework.Utility.Node.OnStop
      commentId: M:ZeroFramework.Utility.Node.OnStop
      language: CSharp
      name:
        CSharp: OnStop()
        VB: OnStop()
      nameWithType:
        CSharp: Node.OnStop()
        VB: Node.OnStop()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.OnStop()
        VB: ZeroFramework.Utility.Node.OnStop()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: OnStop
        path: ''
        startLine: 4427
      syntax:
        content:
          CSharp: protected abstract void OnStop()
          VB: Protected MustOverride Sub OnStop()
      overload: ZeroFramework.Utility.Node.OnStop*
  - id: ZeroFramework.Utility.Node.State
    commentId: T:ZeroFramework.Utility.Node.State
    language: CSharp
    name:
      CSharp: Node.State
      VB: Node.State
    nameWithType:
      CSharp: Node.State
      VB: Node.State
    qualifiedName:
      CSharp: ZeroFramework.Utility.Node.State
      VB: ZeroFramework.Utility.Node.State
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: State
      path: ''
      startLine: 4388
    syntax:
      content:
        CSharp: public enum Node.State
        VB: Public Enum Node.State
    items:
    - id: ZeroFramework.Utility.Node.State.Waiting
      commentId: F:ZeroFramework.Utility.Node.State.Waiting
      language: CSharp
      name:
        CSharp: Waiting
        VB: Waiting
      nameWithType:
        CSharp: Node.State.Waiting
        VB: Node.State.Waiting
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.State.Waiting
        VB: ZeroFramework.Utility.Node.State.Waiting
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Waiting
        path: ''
        startLine: 4388
      syntax:
        content:
          CSharp: Waiting = 0
          VB: Waiting = 0
        return:
          type: ZeroFramework.Utility.Node.State
    - id: ZeroFramework.Utility.Node.State.Running
      commentId: F:ZeroFramework.Utility.Node.State.Running
      language: CSharp
      name:
        CSharp: Running
        VB: Running
      nameWithType:
        CSharp: Node.State.Running
        VB: Node.State.Running
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.State.Running
        VB: ZeroFramework.Utility.Node.State.Running
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Running
        path: ''
        startLine: 4388
      syntax:
        content:
          CSharp: Running = 1
          VB: Running = 1
        return:
          type: ZeroFramework.Utility.Node.State
    - id: ZeroFramework.Utility.Node.State.Success
      commentId: F:ZeroFramework.Utility.Node.State.Success
      language: CSharp
      name:
        CSharp: Success
        VB: Success
      nameWithType:
        CSharp: Node.State.Success
        VB: Node.State.Success
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.State.Success
        VB: ZeroFramework.Utility.Node.State.Success
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Success
        path: ''
        startLine: 4388
      syntax:
        content:
          CSharp: Success = 2
          VB: Success = 2
        return:
          type: ZeroFramework.Utility.Node.State
    - id: ZeroFramework.Utility.Node.State.Failure
      commentId: F:ZeroFramework.Utility.Node.State.Failure
      language: CSharp
      name:
        CSharp: Failure
        VB: Failure
      nameWithType:
        CSharp: Node.State.Failure
        VB: Node.State.Failure
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.State.Failure
        VB: ZeroFramework.Utility.Node.State.Failure
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Failure
        path: ''
        startLine: 4388
      syntax:
        content:
          CSharp: Failure = 3
          VB: Failure = 3
        return:
          type: ZeroFramework.Utility.Node.State
  - id: ZeroFramework.Utility.Node.Type
    commentId: T:ZeroFramework.Utility.Node.Type
    language: CSharp
    name:
      CSharp: Node.Type
      VB: Node.Type
    nameWithType:
      CSharp: Node.Type
      VB: Node.Type
    qualifiedName:
      CSharp: ZeroFramework.Utility.Node.Type
      VB: ZeroFramework.Utility.Node.Type
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: Type
      path: ''
      startLine: 4389
    syntax:
      content:
        CSharp: public enum Node.Type
        VB: Public Enum Node.Type
    items:
    - id: ZeroFramework.Utility.Node.Type.Single2Single
      commentId: F:ZeroFramework.Utility.Node.Type.Single2Single
      language: CSharp
      name:
        CSharp: Single2Single
        VB: Single2Single
      nameWithType:
        CSharp: Node.Type.Single2Single
        VB: Node.Type.Single2Single
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.Type.Single2Single
        VB: ZeroFramework.Utility.Node.Type.Single2Single
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Single2Single
        path: ''
        startLine: 4391
      syntax:
        content:
          CSharp: Single2Single = 0
          VB: Single2Single = 0
        return:
          type: ZeroFramework.Utility.Node.Type
    - id: ZeroFramework.Utility.Node.Type.Many2Many
      commentId: F:ZeroFramework.Utility.Node.Type.Many2Many
      language: CSharp
      name:
        CSharp: Many2Many
        VB: Many2Many
      nameWithType:
        CSharp: Node.Type.Many2Many
        VB: Node.Type.Many2Many
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.Type.Many2Many
        VB: ZeroFramework.Utility.Node.Type.Many2Many
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Many2Many
        path: ''
        startLine: 4392
      syntax:
        content:
          CSharp: Many2Many = 1
          VB: Many2Many = 1
        return:
          type: ZeroFramework.Utility.Node.Type
    - id: ZeroFramework.Utility.Node.Type.Single2Many
      commentId: F:ZeroFramework.Utility.Node.Type.Single2Many
      language: CSharp
      name:
        CSharp: Single2Many
        VB: Single2Many
      nameWithType:
        CSharp: Node.Type.Single2Many
        VB: Node.Type.Single2Many
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.Type.Single2Many
        VB: ZeroFramework.Utility.Node.Type.Single2Many
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Single2Many
        path: ''
        startLine: 4393
      syntax:
        content:
          CSharp: Single2Many = 2
          VB: Single2Many = 2
        return:
          type: ZeroFramework.Utility.Node.Type
    - id: ZeroFramework.Utility.Node.Type.Many2Single
      commentId: F:ZeroFramework.Utility.Node.Type.Many2Single
      language: CSharp
      name:
        CSharp: Many2Single
        VB: Many2Single
      nameWithType:
        CSharp: Node.Type.Many2Single
        VB: Node.Type.Many2Single
      qualifiedName:
        CSharp: ZeroFramework.Utility.Node.Type.Many2Single
        VB: ZeroFramework.Utility.Node.Type.Many2Single
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Many2Single
        path: ''
        startLine: 4394
      syntax:
        content:
          CSharp: Many2Single = 3
          VB: Many2Single = 3
        return:
          type: ZeroFramework.Utility.Node.Type
  - id: ZeroFramework.Utility.Single2ManyNode
    commentId: T:ZeroFramework.Utility.Single2ManyNode
    language: CSharp
    name:
      CSharp: Single2ManyNode
      VB: Single2ManyNode
    nameWithType:
      CSharp: Single2ManyNode
      VB: Single2ManyNode
    qualifiedName:
      CSharp: ZeroFramework.Utility.Single2ManyNode
      VB: ZeroFramework.Utility.Single2ManyNode
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: Single2ManyNode
      path: ''
      startLine: 4450
    syntax:
      content:
        CSharp: 'public abstract class Single2ManyNode : Many2ManyNode'
        VB: Public MustInherit Class Single2ManyNode Inherits Many2ManyNode
    inheritance:
    - System.Object
    - ZeroFramework.Utility.Node
    - ZeroFramework.Utility.Many2ManyNode
    inheritedMembers:
    - ZeroFramework.Utility.Many2ManyNode.children
    - ZeroFramework.Utility.Node.asset
    - ZeroFramework.Utility.Node.type
    - ZeroFramework.Utility.Node.started
    - ZeroFramework.Utility.Node.currentState
    - ZeroFramework.Utility.Node.guid
    - ZeroFramework.Utility.Node.position
    - ZeroFramework.Utility.Node.OnChildrenChangeInInspector
    - ZeroFramework.Utility.Node.description
    - ZeroFramework.Utility.Node.Update
    - ZeroFramework.Utility.Node.OnStart
    - ZeroFramework.Utility.Node.OnUpdate
    - ZeroFramework.Utility.Node.OnStop
    items:
    - id: ZeroFramework.Utility.Single2ManyNode.#ctor
      commentId: M:ZeroFramework.Utility.Single2ManyNode.#ctor
      language: CSharp
      name:
        CSharp: Single2ManyNode()
        VB: New()
      nameWithType:
        CSharp: Single2ManyNode.Single2ManyNode()
        VB: Single2ManyNode.New()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Single2ManyNode.Single2ManyNode()
        VB: ZeroFramework.Utility.Single2ManyNode.New()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 4452
      syntax:
        content:
          CSharp: public Single2ManyNode()
          VB: Public Sub New()
      overload: ZeroFramework.Utility.Single2ManyNode.#ctor*
  - id: ZeroFramework.Utility.Single2SingleNode
    commentId: T:ZeroFramework.Utility.Single2SingleNode
    language: CSharp
    name:
      CSharp: Single2SingleNode
      VB: Single2SingleNode
    nameWithType:
      CSharp: Single2SingleNode
      VB: Single2SingleNode
    qualifiedName:
      CSharp: ZeroFramework.Utility.Single2SingleNode
      VB: ZeroFramework.Utility.Single2SingleNode
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: Single2SingleNode
      path: ''
      startLine: 4474
    syntax:
      content:
        CSharp: 'public abstract class Single2SingleNode : Node'
        VB: Public MustInherit Class Single2SingleNode Inherits Node
    inheritance:
    - System.Object
    - ZeroFramework.Utility.Node
    inheritedMembers:
    - ZeroFramework.Utility.Node.asset
    - ZeroFramework.Utility.Node.type
    - ZeroFramework.Utility.Node.started
    - ZeroFramework.Utility.Node.currentState
    - ZeroFramework.Utility.Node.guid
    - ZeroFramework.Utility.Node.position
    - ZeroFramework.Utility.Node.OnChildrenChangeInInspector
    - ZeroFramework.Utility.Node.description
    - ZeroFramework.Utility.Node.Update
    - ZeroFramework.Utility.Node.OnStart
    - ZeroFramework.Utility.Node.OnUpdate
    - ZeroFramework.Utility.Node.OnStop
    items:
    - id: ZeroFramework.Utility.Single2SingleNode.child
      commentId: F:ZeroFramework.Utility.Single2SingleNode.child
      language: CSharp
      name:
        CSharp: child
        VB: child
      nameWithType:
        CSharp: Single2SingleNode.child
        VB: Single2SingleNode.child
      qualifiedName:
        CSharp: ZeroFramework.Utility.Single2SingleNode.child
        VB: ZeroFramework.Utility.Single2SingleNode.child
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: child
        path: ''
        startLine: 4477
      syntax:
        content:
          CSharp: public Node child
          VB: Public child As Node
        return:
          type: ZeroFramework.Utility.Node
    - id: ZeroFramework.Utility.Single2SingleNode.#ctor
      commentId: M:ZeroFramework.Utility.Single2SingleNode.#ctor
      language: CSharp
      name:
        CSharp: Single2SingleNode()
        VB: New()
      nameWithType:
        CSharp: Single2SingleNode.Single2SingleNode()
        VB: Single2SingleNode.New()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Single2SingleNode.Single2SingleNode()
        VB: ZeroFramework.Utility.Single2SingleNode.New()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 4479
      syntax:
        content:
          CSharp: public Single2SingleNode()
          VB: Public Sub New()
      overload: ZeroFramework.Utility.Single2SingleNode.#ctor*
  - id: ZeroFramework.Utility.NodeTree
    commentId: T:ZeroFramework.Utility.NodeTree
    language: CSharp
    name:
      CSharp: NodeTree
      VB: NodeTree
    nameWithType:
      CSharp: NodeTree
      VB: NodeTree
    qualifiedName:
      CSharp: ZeroFramework.Utility.NodeTree
      VB: ZeroFramework.Utility.NodeTree
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: NodeTree
      path: ''
      startLine: 4528
    syntax:
      content:
        CSharp: 'public class NodeTree : ScriptableObject'
        VB: Public Class NodeTree Inherits ScriptableObject
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.NodeTree.asset
      commentId: F:ZeroFramework.Utility.NodeTree.asset
      language: CSharp
      name:
        CSharp: asset
        VB: asset
      nameWithType:
        CSharp: NodeTree.asset
        VB: NodeTree.asset
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTree.asset
        VB: ZeroFramework.Utility.NodeTree.asset
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: asset
        path: ''
        startLine: 4530
      syntax:
        content:
          CSharp: public NodeTree asset
          VB: Public asset As NodeTree
        return:
          type: ZeroFramework.Utility.NodeTree
    - id: ZeroFramework.Utility.NodeTree.runningNode
      commentId: F:ZeroFramework.Utility.NodeTree.runningNode
      language: CSharp
      name:
        CSharp: runningNode
        VB: runningNode
      nameWithType:
        CSharp: NodeTree.runningNode
        VB: NodeTree.runningNode
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTree.runningNode
        VB: ZeroFramework.Utility.NodeTree.runningNode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: runningNode
        path: ''
        startLine: 4531
      syntax:
        content:
          CSharp: public Node runningNode
          VB: Public runningNode As Node
        return:
          type: ZeroFramework.Utility.Node
    - id: ZeroFramework.Utility.NodeTree.currentState
      commentId: F:ZeroFramework.Utility.NodeTree.currentState
      language: CSharp
      name:
        CSharp: currentState
        VB: currentState
      nameWithType:
        CSharp: NodeTree.currentState
        VB: NodeTree.currentState
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTree.currentState
        VB: ZeroFramework.Utility.NodeTree.currentState
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: currentState
        path: ''
        startLine: 4532
      syntax:
        content:
          CSharp: public Node.State currentState
          VB: Public currentState As Node.State
        return:
          type: ZeroFramework.Utility.Node.State
    - id: ZeroFramework.Utility.NodeTree.nodes
      commentId: F:ZeroFramework.Utility.NodeTree.nodes
      language: CSharp
      name:
        CSharp: nodes
        VB: nodes
      nameWithType:
        CSharp: NodeTree.nodes
        VB: NodeTree.nodes
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTree.nodes
        VB: ZeroFramework.Utility.NodeTree.nodes
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: nodes
        path: ''
        startLine: 4533
      syntax:
        content:
          CSharp: public List<Node> nodes
          VB: Public nodes As List(Of Node)
        return:
          type: System.Collections.Generic.List{ZeroFramework.Utility.Node}
    - id: ZeroFramework.Utility.NodeTree.rootNode
      commentId: F:ZeroFramework.Utility.NodeTree.rootNode
      language: CSharp
      name:
        CSharp: rootNode
        VB: rootNode
      nameWithType:
        CSharp: NodeTree.rootNode
        VB: NodeTree.rootNode
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTree.rootNode
        VB: ZeroFramework.Utility.NodeTree.rootNode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: rootNode
        path: ''
        startLine: 4534
      syntax:
        content:
          CSharp: public Node rootNode
          VB: Public rootNode As Node
        return:
          type: ZeroFramework.Utility.Node
    - id: ZeroFramework.Utility.NodeTree.treeState
      commentId: F:ZeroFramework.Utility.NodeTree.treeState
      language: CSharp
      name:
        CSharp: treeState
        VB: treeState
      nameWithType:
        CSharp: NodeTree.treeState
        VB: NodeTree.treeState
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTree.treeState
        VB: ZeroFramework.Utility.NodeTree.treeState
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: treeState
        path: ''
        startLine: 4535
      syntax:
        content:
          CSharp: public Node.State treeState
          VB: Public treeState As Node.State
        return:
          type: ZeroFramework.Utility.Node.State
    - id: ZeroFramework.Utility.NodeTree.createID
      commentId: F:ZeroFramework.Utility.NodeTree.createID
      language: CSharp
      name:
        CSharp: createID
        VB: createID
      nameWithType:
        CSharp: NodeTree.createID
        VB: NodeTree.createID
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTree.createID
        VB: ZeroFramework.Utility.NodeTree.createID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: createID
        path: ''
        startLine: 4536
      syntax:
        content:
          CSharp: public int createID
          VB: Public createID As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Utility.NodeTree.OnDestroyEvent
      commentId: E:ZeroFramework.Utility.NodeTree.OnDestroyEvent
      language: CSharp
      name:
        CSharp: OnDestroyEvent
        VB: OnDestroyEvent
      nameWithType:
        CSharp: NodeTree.OnDestroyEvent
        VB: NodeTree.OnDestroyEvent
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTree.OnDestroyEvent
        VB: ZeroFramework.Utility.NodeTree.OnDestroyEvent
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: OnDestroyEvent
        path: ''
        startLine: 4537
      syntax:
        content:
          CSharp: public event Action OnDestroyEvent
          VB: Public Event OnDestroyEvent As Action
        return:
          type: Global.Action
    - id: ZeroFramework.Utility.NodeTree.Update
      commentId: M:ZeroFramework.Utility.NodeTree.Update
      language: CSharp
      name:
        CSharp: Update()
        VB: Update()
      nameWithType:
        CSharp: NodeTree.Update()
        VB: NodeTree.Update()
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTree.Update()
        VB: ZeroFramework.Utility.NodeTree.Update()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Update
        path: ''
        startLine: 4556
      syntax:
        content:
          CSharp: public virtual void Update()
          VB: Public Overridable Sub Update()
      overload: ZeroFramework.Utility.NodeTree.Update*
    - id: ZeroFramework.Utility.NodeTree.TreeStart
      commentId: M:ZeroFramework.Utility.NodeTree.TreeStart
      language: CSharp
      name:
        CSharp: TreeStart()
        VB: TreeStart()
      nameWithType:
        CSharp: NodeTree.TreeStart()
        VB: NodeTree.TreeStart()
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTree.TreeStart()
        VB: ZeroFramework.Utility.NodeTree.TreeStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: TreeStart
        path: ''
        startLine: 4569
      syntax:
        content:
          CSharp: public virtual void TreeStart()
          VB: Public Overridable Sub TreeStart()
      overload: ZeroFramework.Utility.NodeTree.TreeStart*
    - id: ZeroFramework.Utility.NodeTree.TreeEnd
      commentId: M:ZeroFramework.Utility.NodeTree.TreeEnd
      language: CSharp
      name:
        CSharp: TreeEnd()
        VB: TreeEnd()
      nameWithType:
        CSharp: NodeTree.TreeEnd()
        VB: NodeTree.TreeEnd()
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTree.TreeEnd()
        VB: ZeroFramework.Utility.NodeTree.TreeEnd()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: TreeEnd
        path: ''
        startLine: 4577
      syntax:
        content:
          CSharp: public virtual void TreeEnd()
          VB: Public Overridable Sub TreeEnd()
      overload: ZeroFramework.Utility.NodeTree.TreeEnd*
    - id: ZeroFramework.Utility.NodeTree.Destroy
      commentId: M:ZeroFramework.Utility.NodeTree.Destroy
      language: CSharp
      name:
        CSharp: Destroy()
        VB: Destroy()
      nameWithType:
        CSharp: NodeTree.Destroy()
        VB: NodeTree.Destroy()
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTree.Destroy()
        VB: ZeroFramework.Utility.NodeTree.Destroy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Destroy
        path: ''
        startLine: 4583
      syntax:
        content:
          CSharp: public void Destroy()
          VB: Public Sub Destroy()
      overload: ZeroFramework.Utility.NodeTree.Destroy*
  - id: ZeroFramework.Utility.NodeTreeRunner
    commentId: T:ZeroFramework.Utility.NodeTreeRunner
    language: CSharp
    name:
      CSharp: NodeTreeRunner
      VB: NodeTreeRunner
    nameWithType:
      CSharp: NodeTreeRunner
      VB: NodeTreeRunner
    qualifiedName:
      CSharp: ZeroFramework.Utility.NodeTreeRunner
      VB: ZeroFramework.Utility.NodeTreeRunner
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: NodeTreeRunner
      path: ''
      startLine: 4658
    syntax:
      content:
        CSharp: 'public class NodeTreeRunner : MonoBehaviour'
        VB: Public Class NodeTreeRunner Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.NodeTreeRunner.tree
      commentId: F:ZeroFramework.Utility.NodeTreeRunner.tree
      language: CSharp
      name:
        CSharp: tree
        VB: tree
      nameWithType:
        CSharp: NodeTreeRunner.tree
        VB: NodeTreeRunner.tree
      qualifiedName:
        CSharp: ZeroFramework.Utility.NodeTreeRunner.tree
        VB: ZeroFramework.Utility.NodeTreeRunner.tree
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: tree
        path: ''
        startLine: 4660
      syntax:
        content:
          CSharp: public NodeTree tree
          VB: Public tree As NodeTree
        return:
          type: ZeroFramework.Utility.NodeTree
  - id: ZeroFramework.Utility.PoolKit
    commentId: T:ZeroFramework.Utility.PoolKit
    language: CSharp
    name:
      CSharp: PoolKit
      VB: PoolKit
    nameWithType:
      CSharp: PoolKit
      VB: PoolKit
    qualifiedName:
      CSharp: ZeroFramework.Utility.PoolKit
      VB: ZeroFramework.Utility.PoolKit
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: PoolKit
      path: ''
      startLine: 4713
    syntax:
      content:
        CSharp: 'public class PoolKit : IPoolKit, IUtility'
        VB: Public Class PoolKit Implements IPoolKit, IUtility
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.Utility.IPoolKit
    - ZeroFramework.IUtility
    items:
    - id: ZeroFramework.Utility.PoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
      commentId: M:ZeroFramework.Utility.PoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: AllocateSimpleObjectPool<T>(Func<T>, Action<T>, Action<T>, Action<T>, bool, int, int, bool)
        VB: AllocateSimpleObjectPool(Of T)(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer, Integer, Boolean)
      nameWithType:
        CSharp: PoolKit.AllocateSimpleObjectPool<T>(Func<T>, Action<T>, Action<T>, Action<T>, bool, int, int, bool)
        VB: PoolKit.AllocateSimpleObjectPool(Of T)(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer, Integer, Boolean)
      qualifiedName:
        CSharp: ZeroFramework.Utility.PoolKit.AllocateSimpleObjectPool<T>(Func<T>, Action<T>, Action<T>, Action<T>, bool, int, int, bool)
        VB: ZeroFramework.Utility.PoolKit.AllocateSimpleObjectPool(Of T)(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer, Integer, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: AllocateSimpleObjectPool
        path: ''
        startLine: 4715
      syntax:
        content:
          CSharp: public IObjectPool<T> AllocateSimpleObjectPool<T>(Func<T> createFunc, Action<T> actionOnGet, Action<T> actionOnRelease, Action<T> actionOnDestroy, bool collectionCheck, int defaultCapacity, int maxSize, bool isPreLoad)
          VB: Public Function AllocateSimpleObjectPool(Of T)(createFunc As Func(Of T), actionOnGet As Action(Of T), actionOnRelease As Action(Of T), actionOnDestroy As Action(Of T), collectionCheck As Boolean, defaultCapacity As Integer, maxSize As Integer, isPreLoad As Boolean) As IObjectPool(Of T)
        parameters:
        - id: createFunc
          type: Global.Func{{T}}
        - id: actionOnGet
          type: Global.Action{{T}}
        - id: actionOnRelease
          type: Global.Action{{T}}
        - id: actionOnDestroy
          type: Global.Action{{T}}
        - id: collectionCheck
          type: System.Boolean
        - id: defaultCapacity
          type: System.Int32
        - id: maxSize
          type: System.Int32
        - id: isPreLoad
          type: System.Boolean
        typeParameters:
        - id: T
        return:
          type: ZeroFramework.Utility.IObjectPool{{T}}
      overload: ZeroFramework.Utility.PoolKit.AllocateSimpleObjectPool*
      implements:
      - ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{{T}},Action{{T}},Action{{T}},Action{{T}},System.Boolean,System.Int32,System.Int32,System.Boolean)
    - id: ZeroFramework.Utility.PoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
      commentId: M:ZeroFramework.Utility.PoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
      language: CSharp
      name:
        CSharp: AllocateSafeObjectPool<T>(Func<T>, Action<T>, Action<T>, Action<T>, bool, int)
        VB: AllocateSafeObjectPool(Of T)(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer)
      nameWithType:
        CSharp: PoolKit.AllocateSafeObjectPool<T>(Func<T>, Action<T>, Action<T>, Action<T>, bool, int)
        VB: PoolKit.AllocateSafeObjectPool(Of T)(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.PoolKit.AllocateSafeObjectPool<T>(Func<T>, Action<T>, Action<T>, Action<T>, bool, int)
        VB: ZeroFramework.Utility.PoolKit.AllocateSafeObjectPool(Of T)(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: AllocateSafeObjectPool
        path: ''
        startLine: 4722
      syntax:
        content:
          CSharp: public IObjectPool<T> AllocateSafeObjectPool<T>(Func<T> createFunc, Action<T> actionOnGet, Action<T> actionOnRelease, Action<T> actionOnDestroy, bool collectionCheck, int maxSize)
          VB: Public Function AllocateSafeObjectPool(Of T)(createFunc As Func(Of T), actionOnGet As Action(Of T), actionOnRelease As Action(Of T), actionOnDestroy As Action(Of T), collectionCheck As Boolean, maxSize As Integer) As IObjectPool(Of T)
        parameters:
        - id: createFunc
          type: Global.Func{{T}}
        - id: actionOnGet
          type: Global.Action{{T}}
        - id: actionOnRelease
          type: Global.Action{{T}}
        - id: actionOnDestroy
          type: Global.Action{{T}}
        - id: collectionCheck
          type: System.Boolean
        - id: maxSize
          type: System.Int32
        typeParameters:
        - id: T
        return:
          type: ZeroFramework.Utility.IObjectPool{{T}}
      overload: ZeroFramework.Utility.PoolKit.AllocateSafeObjectPool*
      implements:
      - ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{{T}},Action{{T}},Action{{T}},Action{{T}},System.Boolean,System.Int32)
  - id: ZeroFramework.Utility.ObjectPool`1
    commentId: T:ZeroFramework.Utility.ObjectPool`1
    language: CSharp
    name:
      CSharp: ObjectPool<T>
      VB: ObjectPool(Of T)
    nameWithType:
      CSharp: ObjectPool<T>
      VB: ObjectPool(Of T)
    qualifiedName:
      CSharp: ZeroFramework.Utility.ObjectPool<T>
      VB: ZeroFramework.Utility.ObjectPool(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: ObjectPool
      path: ''
      startLine: 4750
    syntax:
      content:
        CSharp: 'public class ObjectPool<T> : IObjectPool<T>'
        VB: Public Class ObjectPool(Of T) Implements IObjectPool(Of T)
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.Utility.IObjectPool{{T}}
    items:
    - id: ZeroFramework.Utility.ObjectPool`1.CountActive
      commentId: F:ZeroFramework.Utility.ObjectPool`1.CountActive
      language: CSharp
      name:
        CSharp: CountActive
        VB: CountActive
      nameWithType:
        CSharp: ObjectPool<T>.CountActive
        VB: ObjectPool(Of T).CountActive
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>.CountActive
        VB: ZeroFramework.Utility.ObjectPool(Of T).CountActive
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: CountActive
        path: ''
        startLine: 4753
      syntax:
        content:
          CSharp: public int CountActive
          VB: Public CountActive As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Utility.ObjectPool`1.CountAll
      commentId: P:ZeroFramework.Utility.ObjectPool`1.CountAll
      language: CSharp
      name:
        CSharp: CountAll
        VB: CountAll
      nameWithType:
        CSharp: ObjectPool<T>.CountAll
        VB: ObjectPool(Of T).CountAll
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>.CountAll
        VB: ZeroFramework.Utility.ObjectPool(Of T).CountAll
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: CountAll
        path: ''
        startLine: 4754
      syntax:
        content:
          CSharp: public int CountAll { get; }
          VB: Public ReadOnly Property CountAll As Integer
        parameters: []
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.ObjectPool`1.CountAll*
    - id: ZeroFramework.Utility.ObjectPool`1.CountInactive
      commentId: F:ZeroFramework.Utility.ObjectPool`1.CountInactive
      language: CSharp
      name:
        CSharp: CountInactive
        VB: CountInactive
      nameWithType:
        CSharp: ObjectPool<T>.CountInactive
        VB: ObjectPool(Of T).CountInactive
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>.CountInactive
        VB: ZeroFramework.Utility.ObjectPool(Of T).CountInactive
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: CountInactive
        path: ''
        startLine: 4755
      syntax:
        content:
          CSharp: public int CountInactive
          VB: Public CountInactive As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Utility.ObjectPool`1._pool
      commentId: F:ZeroFramework.Utility.ObjectPool`1._pool
      language: CSharp
      name:
        CSharp: _pool
        VB: _pool
      nameWithType:
        CSharp: ObjectPool<T>._pool
        VB: ObjectPool(Of T)._pool
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>._pool
        VB: ZeroFramework.Utility.ObjectPool(Of T)._pool
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: _pool
        path: ''
        startLine: 4757
      syntax:
        content:
          CSharp: protected Stack<T> _pool
          VB: Protected _pool As Stack(Of T)
        return:
          type: System.Collections.Generic.Stack{{T}}
    - id: ZeroFramework.Utility.ObjectPool`1._createFunc
      commentId: F:ZeroFramework.Utility.ObjectPool`1._createFunc
      language: CSharp
      name:
        CSharp: _createFunc
        VB: _createFunc
      nameWithType:
        CSharp: ObjectPool<T>._createFunc
        VB: ObjectPool(Of T)._createFunc
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>._createFunc
        VB: ZeroFramework.Utility.ObjectPool(Of T)._createFunc
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: _createFunc
        path: ''
        startLine: 4758
      syntax:
        content:
          CSharp: protected Func<T> _createFunc
          VB: Protected _createFunc As Func(Of T)
        return:
          type: Global.Func{{T}}
    - id: ZeroFramework.Utility.ObjectPool`1._actionOnGet
      commentId: F:ZeroFramework.Utility.ObjectPool`1._actionOnGet
      language: CSharp
      name:
        CSharp: _actionOnGet
        VB: _actionOnGet
      nameWithType:
        CSharp: ObjectPool<T>._actionOnGet
        VB: ObjectPool(Of T)._actionOnGet
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>._actionOnGet
        VB: ZeroFramework.Utility.ObjectPool(Of T)._actionOnGet
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: _actionOnGet
        path: ''
        startLine: 4759
      syntax:
        content:
          CSharp: protected Action<T> _actionOnGet
          VB: Protected _actionOnGet As Action(Of T)
        return:
          type: Global.Action{{T}}
    - id: ZeroFramework.Utility.ObjectPool`1._actionOnRelease
      commentId: F:ZeroFramework.Utility.ObjectPool`1._actionOnRelease
      language: CSharp
      name:
        CSharp: _actionOnRelease
        VB: _actionOnRelease
      nameWithType:
        CSharp: ObjectPool<T>._actionOnRelease
        VB: ObjectPool(Of T)._actionOnRelease
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>._actionOnRelease
        VB: ZeroFramework.Utility.ObjectPool(Of T)._actionOnRelease
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: _actionOnRelease
        path: ''
        startLine: 4760
      syntax:
        content:
          CSharp: protected Action<T> _actionOnRelease
          VB: Protected _actionOnRelease As Action(Of T)
        return:
          type: Global.Action{{T}}
    - id: ZeroFramework.Utility.ObjectPool`1._actionOnDestroy
      commentId: F:ZeroFramework.Utility.ObjectPool`1._actionOnDestroy
      language: CSharp
      name:
        CSharp: _actionOnDestroy
        VB: _actionOnDestroy
      nameWithType:
        CSharp: ObjectPool<T>._actionOnDestroy
        VB: ObjectPool(Of T)._actionOnDestroy
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>._actionOnDestroy
        VB: ZeroFramework.Utility.ObjectPool(Of T)._actionOnDestroy
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: _actionOnDestroy
        path: ''
        startLine: 4761
      syntax:
        content:
          CSharp: protected Action<T> _actionOnDestroy
          VB: Protected _actionOnDestroy As Action(Of T)
        return:
          type: Global.Action{{T}}
    - id: ZeroFramework.Utility.ObjectPool`1._collectionCheck
      commentId: F:ZeroFramework.Utility.ObjectPool`1._collectionCheck
      language: CSharp
      name:
        CSharp: _collectionCheck
        VB: _collectionCheck
      nameWithType:
        CSharp: ObjectPool<T>._collectionCheck
        VB: ObjectPool(Of T)._collectionCheck
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>._collectionCheck
        VB: ZeroFramework.Utility.ObjectPool(Of T)._collectionCheck
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: _collectionCheck
        path: ''
        startLine: 4762
      syntax:
        content:
          CSharp: protected bool _collectionCheck
          VB: Protected _collectionCheck As Boolean
        return:
          type: System.Boolean
    - id: ZeroFramework.Utility.ObjectPool`1._defaultCapacity
      commentId: F:ZeroFramework.Utility.ObjectPool`1._defaultCapacity
      language: CSharp
      name:
        CSharp: _defaultCapacity
        VB: _defaultCapacity
      nameWithType:
        CSharp: ObjectPool<T>._defaultCapacity
        VB: ObjectPool(Of T)._defaultCapacity
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>._defaultCapacity
        VB: ZeroFramework.Utility.ObjectPool(Of T)._defaultCapacity
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: _defaultCapacity
        path: ''
        startLine: 4763
      syntax:
        content:
          CSharp: protected int _defaultCapacity
          VB: Protected _defaultCapacity As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Utility.ObjectPool`1._maxSize
      commentId: F:ZeroFramework.Utility.ObjectPool`1._maxSize
      language: CSharp
      name:
        CSharp: _maxSize
        VB: _maxSize
      nameWithType:
        CSharp: ObjectPool<T>._maxSize
        VB: ObjectPool(Of T)._maxSize
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>._maxSize
        VB: ZeroFramework.Utility.ObjectPool(Of T)._maxSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: _maxSize
        path: ''
        startLine: 4764
      syntax:
        content:
          CSharp: protected int _maxSize
          VB: Protected _maxSize As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Utility.ObjectPool`1.#ctor(Func{`0},Action{`0},Action{`0},Action{`0},System.Boolean,System.Int32,System.Int32,System.Boolean)
      commentId: M:ZeroFramework.Utility.ObjectPool`1.#ctor(Func{`0},Action{`0},Action{`0},Action{`0},System.Boolean,System.Int32,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: ObjectPool(Func<T>, Action<T>, Action<T>, Action<T>, bool, int, int, bool)
        VB: New(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer, Integer, Boolean)
      nameWithType:
        CSharp: ObjectPool<T>.ObjectPool(Func<T>, Action<T>, Action<T>, Action<T>, bool, int, int, bool)
        VB: ObjectPool(Of T).New(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer, Integer, Boolean)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>.ObjectPool(Func<T>, Action<T>, Action<T>, Action<T>, bool, int, int, bool)
        VB: ZeroFramework.Utility.ObjectPool(Of T).New(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer, Integer, Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 4766
      syntax:
        content:
          CSharp: public ObjectPool(Func<T> createFunc, Action<T> actionOnGet, Action<T> actionOnRelease, Action<T> actionOnDestroy, bool collectionCheck, int defaultCapacity, int maxSize, bool isPreLoad)
          VB: Public Sub New(createFunc As Func(Of T), actionOnGet As Action(Of T), actionOnRelease As Action(Of T), actionOnDestroy As Action(Of T), collectionCheck As Boolean, defaultCapacity As Integer, maxSize As Integer, isPreLoad As Boolean)
        parameters:
        - id: createFunc
          type: Global.Func{{T}}
        - id: actionOnGet
          type: Global.Action{{T}}
        - id: actionOnRelease
          type: Global.Action{{T}}
        - id: actionOnDestroy
          type: Global.Action{{T}}
        - id: collectionCheck
          type: System.Boolean
        - id: defaultCapacity
          type: System.Int32
        - id: maxSize
          type: System.Int32
        - id: isPreLoad
          type: System.Boolean
      overload: ZeroFramework.Utility.ObjectPool`1.#ctor*
    - id: ZeroFramework.Utility.ObjectPool`1.Get
      commentId: M:ZeroFramework.Utility.ObjectPool`1.Get
      language: CSharp
      name:
        CSharp: Get()
        VB: Get()
      nameWithType:
        CSharp: ObjectPool<T>.Get()
        VB: ObjectPool(Of T).Get()
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>.Get()
        VB: ZeroFramework.Utility.ObjectPool(Of T).Get()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Get
        path: ''
        startLine: 4801
      syntax:
        content:
          CSharp: public virtual T Get()
          VB: Public Overridable Function [Get]() As T
        return:
          type: '{T}'
      overload: ZeroFramework.Utility.ObjectPool`1.Get*
      implements:
      - ZeroFramework.Utility.IObjectPool{{T}}.Get
    - id: ZeroFramework.Utility.ObjectPool`1.Release(`0)
      commentId: M:ZeroFramework.Utility.ObjectPool`1.Release(`0)
      language: CSharp
      name:
        CSharp: Release(T)
        VB: Release(T)
      nameWithType:
        CSharp: ObjectPool<T>.Release(T)
        VB: ObjectPool(Of T).Release(T)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>.Release(T)
        VB: ZeroFramework.Utility.ObjectPool(Of T).Release(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Release
        path: ''
        startLine: 4821
      syntax:
        content:
          CSharp: public void Release(T obj)
          VB: Public Sub Release(obj As T)
        parameters:
        - id: obj
          type: '{T}'
      overload: ZeroFramework.Utility.ObjectPool`1.Release*
      implements:
      - ZeroFramework.Utility.IObjectPool{{T}}.Release({T})
    - id: ZeroFramework.Utility.ObjectPool`1.Clear
      commentId: M:ZeroFramework.Utility.ObjectPool`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: ObjectPool<T>.Clear()
        VB: ObjectPool(Of T).Clear()
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>.Clear()
        VB: ZeroFramework.Utility.ObjectPool(Of T).Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Clear
        path: ''
        startLine: 4857
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: ZeroFramework.Utility.ObjectPool`1.Clear*
      implements:
      - ZeroFramework.Utility.IObjectPool{{T}}.Clear
    - id: ZeroFramework.Utility.ObjectPool`1.GetCountActive
      commentId: M:ZeroFramework.Utility.ObjectPool`1.GetCountActive
      language: CSharp
      name:
        CSharp: GetCountActive()
        VB: GetCountActive()
      nameWithType:
        CSharp: ObjectPool<T>.GetCountActive()
        VB: ObjectPool(Of T).GetCountActive()
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>.GetCountActive()
        VB: ZeroFramework.Utility.ObjectPool(Of T).GetCountActive()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetCountActive
        path: ''
        startLine: 4870
      syntax:
        content:
          CSharp: public int GetCountActive()
          VB: Public Function GetCountActive() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.ObjectPool`1.GetCountActive*
      implements:
      - ZeroFramework.Utility.IObjectPool{{T}}.GetCountActive
    - id: ZeroFramework.Utility.ObjectPool`1.GetCountAll
      commentId: M:ZeroFramework.Utility.ObjectPool`1.GetCountAll
      language: CSharp
      name:
        CSharp: GetCountAll()
        VB: GetCountAll()
      nameWithType:
        CSharp: ObjectPool<T>.GetCountAll()
        VB: ObjectPool(Of T).GetCountAll()
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>.GetCountAll()
        VB: ZeroFramework.Utility.ObjectPool(Of T).GetCountAll()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetCountAll
        path: ''
        startLine: 4875
      syntax:
        content:
          CSharp: public int GetCountAll()
          VB: Public Function GetCountAll() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.ObjectPool`1.GetCountAll*
      implements:
      - ZeroFramework.Utility.IObjectPool{{T}}.GetCountAll
    - id: ZeroFramework.Utility.ObjectPool`1.GetCountInactive
      commentId: M:ZeroFramework.Utility.ObjectPool`1.GetCountInactive
      language: CSharp
      name:
        CSharp: GetCountInactive()
        VB: GetCountInactive()
      nameWithType:
        CSharp: ObjectPool<T>.GetCountInactive()
        VB: ObjectPool(Of T).GetCountInactive()
      qualifiedName:
        CSharp: ZeroFramework.Utility.ObjectPool<T>.GetCountInactive()
        VB: ZeroFramework.Utility.ObjectPool(Of T).GetCountInactive()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetCountInactive
        path: ''
        startLine: 4880
      syntax:
        content:
          CSharp: public int GetCountInactive()
          VB: Public Function GetCountInactive() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.ObjectPool`1.GetCountInactive*
      implements:
      - ZeroFramework.Utility.IObjectPool{{T}}.GetCountInactive
  - id: ZeroFramework.Utility.PoolObjExistException
    commentId: T:ZeroFramework.Utility.PoolObjExistException
    language: CSharp
    name:
      CSharp: PoolObjExistException
      VB: PoolObjExistException
    nameWithType:
      CSharp: PoolObjExistException
      VB: PoolObjExistException
    qualifiedName:
      CSharp: ZeroFramework.Utility.PoolObjExistException
      VB: ZeroFramework.Utility.PoolObjExistException
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: PoolObjExistException
      path: ''
      startLine: 4902
    syntax:
      content:
        CSharp: 'public class PoolObjExistException : Exception'
        VB: Public Class PoolObjExistException Inherits Exception
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.PoolObjExistException.#ctor(System.String)
      commentId: M:ZeroFramework.Utility.PoolObjExistException.#ctor(System.String)
      language: CSharp
      name:
        CSharp: PoolObjExistException(string)
        VB: New(String)
      nameWithType:
        CSharp: PoolObjExistException.PoolObjExistException(string)
        VB: PoolObjExistException.New(String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.PoolObjExistException.PoolObjExistException(string)
        VB: ZeroFramework.Utility.PoolObjExistException.New(String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 4904
      syntax:
        content:
          CSharp: public PoolObjExistException(string message)
          VB: Public Sub New(message As String)
        parameters:
        - id: message
          type: System.String
      overload: ZeroFramework.Utility.PoolObjExistException.#ctor*
  - id: ZeroFramework.Utility.SafeObjectPool`1
    commentId: T:ZeroFramework.Utility.SafeObjectPool`1
    language: CSharp
    name:
      CSharp: SafeObjectPool<T>
      VB: SafeObjectPool(Of T)
    nameWithType:
      CSharp: SafeObjectPool<T>
      VB: SafeObjectPool(Of T)
    qualifiedName:
      CSharp: ZeroFramework.Utility.SafeObjectPool<T>
      VB: ZeroFramework.Utility.SafeObjectPool(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: SafeObjectPool
      path: ''
      startLine: 4923
    syntax:
      content:
        CSharp: 'public class SafeObjectPool<T> : ObjectPool<T>, IObjectPool<T>'
        VB: Public Class SafeObjectPool(Of T) Inherits ObjectPool(Of T) Implements IObjectPool(Of T)
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    - ZeroFramework.Utility.ObjectPool{{T}}
    implements:
    - ZeroFramework.Utility.IObjectPool{{T}}
    inheritedMembers:
    - ZeroFramework.Utility.ObjectPool{{T}}.CountActive
    - ZeroFramework.Utility.ObjectPool{{T}}.CountAll
    - ZeroFramework.Utility.ObjectPool{{T}}.CountInactive
    - ZeroFramework.Utility.ObjectPool{{T}}._pool
    - ZeroFramework.Utility.ObjectPool{{T}}._createFunc
    - ZeroFramework.Utility.ObjectPool{{T}}._actionOnGet
    - ZeroFramework.Utility.ObjectPool{{T}}._actionOnRelease
    - ZeroFramework.Utility.ObjectPool{{T}}._actionOnDestroy
    - ZeroFramework.Utility.ObjectPool{{T}}._collectionCheck
    - ZeroFramework.Utility.ObjectPool{{T}}._defaultCapacity
    - ZeroFramework.Utility.ObjectPool{{T}}._maxSize
    - ZeroFramework.Utility.ObjectPool{{T}}.Release({T})
    - ZeroFramework.Utility.ObjectPool{{T}}.Clear
    - ZeroFramework.Utility.ObjectPool{{T}}.GetCountActive
    - ZeroFramework.Utility.ObjectPool{{T}}.GetCountAll
    - ZeroFramework.Utility.ObjectPool{{T}}.GetCountInactive
    items:
    - id: ZeroFramework.Utility.SafeObjectPool`1.#ctor(Func{`0},Action{`0},Action{`0},Action{`0},System.Boolean,System.Int32)
      commentId: M:ZeroFramework.Utility.SafeObjectPool`1.#ctor(Func{`0},Action{`0},Action{`0},Action{`0},System.Boolean,System.Int32)
      language: CSharp
      name:
        CSharp: SafeObjectPool(Func<T>, Action<T>, Action<T>, Action<T>, bool, int)
        VB: New(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer)
      nameWithType:
        CSharp: SafeObjectPool<T>.SafeObjectPool(Func<T>, Action<T>, Action<T>, Action<T>, bool, int)
        VB: SafeObjectPool(Of T).New(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.SafeObjectPool<T>.SafeObjectPool(Func<T>, Action<T>, Action<T>, Action<T>, bool, int)
        VB: ZeroFramework.Utility.SafeObjectPool(Of T).New(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 4925
      syntax:
        content:
          CSharp: public SafeObjectPool(Func<T> createFunc, Action<T> actionOnGet, Action<T> actionOnRelease, Action<T> actionOnDestroy, bool collectionCheck, int maxSize)
          VB: Public Sub New(createFunc As Func(Of T), actionOnGet As Action(Of T), actionOnRelease As Action(Of T), actionOnDestroy As Action(Of T), collectionCheck As Boolean, maxSize As Integer)
        parameters:
        - id: createFunc
          type: Global.Func{{T}}
        - id: actionOnGet
          type: Global.Action{{T}}
        - id: actionOnRelease
          type: Global.Action{{T}}
        - id: actionOnDestroy
          type: Global.Action{{T}}
        - id: collectionCheck
          type: System.Boolean
        - id: maxSize
          type: System.Int32
      overload: ZeroFramework.Utility.SafeObjectPool`1.#ctor*
    - id: ZeroFramework.Utility.SafeObjectPool`1.Get
      commentId: M:ZeroFramework.Utility.SafeObjectPool`1.Get
      language: CSharp
      name:
        CSharp: Get()
        VB: Get()
      nameWithType:
        CSharp: SafeObjectPool<T>.Get()
        VB: SafeObjectPool(Of T).Get()
      qualifiedName:
        CSharp: ZeroFramework.Utility.SafeObjectPool<T>.Get()
        VB: ZeroFramework.Utility.SafeObjectPool(Of T).Get()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Get
        path: ''
        startLine: 4931
      syntax:
        content:
          CSharp: public override T Get()
          VB: Public Overrides Function [Get]() As T
        return:
          type: '{T}'
      overload: ZeroFramework.Utility.SafeObjectPool`1.Get*
      overridden: ZeroFramework.Utility.ObjectPool{{T}}.Get
  - id: ZeroFramework.Utility.SimpleObjectPool`1
    commentId: T:ZeroFramework.Utility.SimpleObjectPool`1
    language: CSharp
    name:
      CSharp: SimpleObjectPool<T>
      VB: SimpleObjectPool(Of T)
    nameWithType:
      CSharp: SimpleObjectPool<T>
      VB: SimpleObjectPool(Of T)
    qualifiedName:
      CSharp: ZeroFramework.Utility.SimpleObjectPool<T>
      VB: ZeroFramework.Utility.SimpleObjectPool(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: SimpleObjectPool
      path: ''
      startLine: 4958
    syntax:
      content:
        CSharp: 'public class SimpleObjectPool<T> : ObjectPool<T>, IObjectPool<T>'
        VB: Public Class SimpleObjectPool(Of T) Inherits ObjectPool(Of T) Implements IObjectPool(Of T)
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    - ZeroFramework.Utility.ObjectPool{{T}}
    implements:
    - ZeroFramework.Utility.IObjectPool{{T}}
    inheritedMembers:
    - ZeroFramework.Utility.ObjectPool{{T}}.CountActive
    - ZeroFramework.Utility.ObjectPool{{T}}.CountAll
    - ZeroFramework.Utility.ObjectPool{{T}}.CountInactive
    - ZeroFramework.Utility.ObjectPool{{T}}._pool
    - ZeroFramework.Utility.ObjectPool{{T}}._createFunc
    - ZeroFramework.Utility.ObjectPool{{T}}._actionOnGet
    - ZeroFramework.Utility.ObjectPool{{T}}._actionOnRelease
    - ZeroFramework.Utility.ObjectPool{{T}}._actionOnDestroy
    - ZeroFramework.Utility.ObjectPool{{T}}._collectionCheck
    - ZeroFramework.Utility.ObjectPool{{T}}._defaultCapacity
    - ZeroFramework.Utility.ObjectPool{{T}}._maxSize
    - ZeroFramework.Utility.ObjectPool{{T}}.Get
    - ZeroFramework.Utility.ObjectPool{{T}}.Release({T})
    - ZeroFramework.Utility.ObjectPool{{T}}.Clear
    - ZeroFramework.Utility.ObjectPool{{T}}.GetCountActive
    - ZeroFramework.Utility.ObjectPool{{T}}.GetCountAll
    - ZeroFramework.Utility.ObjectPool{{T}}.GetCountInactive
    items:
    - id: ZeroFramework.Utility.SimpleObjectPool`1.#ctor(Func{`0},Action{`0},Action{`0},Action{`0},System.Boolean,System.Int32,System.Int32,System.Boolean)
      commentId: M:ZeroFramework.Utility.SimpleObjectPool`1.#ctor(Func{`0},Action{`0},Action{`0},Action{`0},System.Boolean,System.Int32,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: SimpleObjectPool(Func<T>, Action<T>, Action<T>, Action<T>, bool, int, int, bool)
        VB: New(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer, Integer, Boolean)
      nameWithType:
        CSharp: SimpleObjectPool<T>.SimpleObjectPool(Func<T>, Action<T>, Action<T>, Action<T>, bool, int, int, bool)
        VB: SimpleObjectPool(Of T).New(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer, Integer, Boolean)
      qualifiedName:
        CSharp: ZeroFramework.Utility.SimpleObjectPool<T>.SimpleObjectPool(Func<T>, Action<T>, Action<T>, Action<T>, bool, int, int, bool)
        VB: ZeroFramework.Utility.SimpleObjectPool(Of T).New(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer, Integer, Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 4960
      syntax:
        content:
          CSharp: public SimpleObjectPool(Func<T> createFunc, Action<T> actionOnGet, Action<T> actionOnRelease, Action<T> actionOnDestroy, bool collectionCheck, int defaultCapacity, int maxSize, bool isPreLoad)
          VB: Public Sub New(createFunc As Func(Of T), actionOnGet As Action(Of T), actionOnRelease As Action(Of T), actionOnDestroy As Action(Of T), collectionCheck As Boolean, defaultCapacity As Integer, maxSize As Integer, isPreLoad As Boolean)
        parameters:
        - id: createFunc
          type: Global.Func{{T}}
        - id: actionOnGet
          type: Global.Action{{T}}
        - id: actionOnRelease
          type: Global.Action{{T}}
        - id: actionOnDestroy
          type: Global.Action{{T}}
        - id: collectionCheck
          type: System.Boolean
        - id: defaultCapacity
          type: System.Int32
        - id: maxSize
          type: System.Int32
        - id: isPreLoad
          type: System.Boolean
      overload: ZeroFramework.Utility.SimpleObjectPool`1.#ctor*
  - id: ZeroFramework.Utility.IObjectPool`1
    commentId: T:ZeroFramework.Utility.IObjectPool`1
    language: CSharp
    name:
      CSharp: IObjectPool<T>
      VB: IObjectPool(Of T)
    nameWithType:
      CSharp: IObjectPool<T>
      VB: IObjectPool(Of T)
    qualifiedName:
      CSharp: ZeroFramework.Utility.IObjectPool<T>
      VB: ZeroFramework.Utility.IObjectPool(Of T)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: IObjectPool
      path: ''
      startLine: 4981
    syntax:
      content:
        CSharp: public interface IObjectPool<T>
        VB: Public Interface IObjectPool(Of T)
      typeParameters:
      - id: T
    items:
    - id: ZeroFramework.Utility.IObjectPool`1.Get
      commentId: M:ZeroFramework.Utility.IObjectPool`1.Get
      language: CSharp
      name:
        CSharp: Get()
        VB: Get()
      nameWithType:
        CSharp: IObjectPool<T>.Get()
        VB: IObjectPool(Of T).Get()
      qualifiedName:
        CSharp: ZeroFramework.Utility.IObjectPool<T>.Get()
        VB: ZeroFramework.Utility.IObjectPool(Of T).Get()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Get
        path: ''
        startLine: 4983
      syntax:
        content:
          CSharp: T Get()
          VB: Function [Get]() As T
        return:
          type: '{T}'
      overload: ZeroFramework.Utility.IObjectPool`1.Get*
    - id: ZeroFramework.Utility.IObjectPool`1.Release(`0)
      commentId: M:ZeroFramework.Utility.IObjectPool`1.Release(`0)
      language: CSharp
      name:
        CSharp: Release(T)
        VB: Release(T)
      nameWithType:
        CSharp: IObjectPool<T>.Release(T)
        VB: IObjectPool(Of T).Release(T)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IObjectPool<T>.Release(T)
        VB: ZeroFramework.Utility.IObjectPool(Of T).Release(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Release
        path: ''
        startLine: 4985
      syntax:
        content:
          CSharp: void Release(T obj)
          VB: Sub Release(obj As T)
        parameters:
        - id: obj
          type: '{T}'
      overload: ZeroFramework.Utility.IObjectPool`1.Release*
    - id: ZeroFramework.Utility.IObjectPool`1.Clear
      commentId: M:ZeroFramework.Utility.IObjectPool`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: IObjectPool<T>.Clear()
        VB: IObjectPool(Of T).Clear()
      qualifiedName:
        CSharp: ZeroFramework.Utility.IObjectPool<T>.Clear()
        VB: ZeroFramework.Utility.IObjectPool(Of T).Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Clear
        path: ''
        startLine: 4987
      syntax:
        content:
          CSharp: void Clear()
          VB: Sub Clear()
      overload: ZeroFramework.Utility.IObjectPool`1.Clear*
    - id: ZeroFramework.Utility.IObjectPool`1.GetCountActive
      commentId: M:ZeroFramework.Utility.IObjectPool`1.GetCountActive
      language: CSharp
      name:
        CSharp: GetCountActive()
        VB: GetCountActive()
      nameWithType:
        CSharp: IObjectPool<T>.GetCountActive()
        VB: IObjectPool(Of T).GetCountActive()
      qualifiedName:
        CSharp: ZeroFramework.Utility.IObjectPool<T>.GetCountActive()
        VB: ZeroFramework.Utility.IObjectPool(Of T).GetCountActive()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetCountActive
        path: ''
        startLine: 4989
      syntax:
        content:
          CSharp: int GetCountActive()
          VB: Function GetCountActive() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.IObjectPool`1.GetCountActive*
    - id: ZeroFramework.Utility.IObjectPool`1.GetCountAll
      commentId: M:ZeroFramework.Utility.IObjectPool`1.GetCountAll
      language: CSharp
      name:
        CSharp: GetCountAll()
        VB: GetCountAll()
      nameWithType:
        CSharp: IObjectPool<T>.GetCountAll()
        VB: IObjectPool(Of T).GetCountAll()
      qualifiedName:
        CSharp: ZeroFramework.Utility.IObjectPool<T>.GetCountAll()
        VB: ZeroFramework.Utility.IObjectPool(Of T).GetCountAll()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetCountAll
        path: ''
        startLine: 4991
      syntax:
        content:
          CSharp: int GetCountAll()
          VB: Function GetCountAll() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.IObjectPool`1.GetCountAll*
    - id: ZeroFramework.Utility.IObjectPool`1.GetCountInactive
      commentId: M:ZeroFramework.Utility.IObjectPool`1.GetCountInactive
      language: CSharp
      name:
        CSharp: GetCountInactive()
        VB: GetCountInactive()
      nameWithType:
        CSharp: IObjectPool<T>.GetCountInactive()
        VB: IObjectPool(Of T).GetCountInactive()
      qualifiedName:
        CSharp: ZeroFramework.Utility.IObjectPool<T>.GetCountInactive()
        VB: ZeroFramework.Utility.IObjectPool(Of T).GetCountInactive()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetCountInactive
        path: ''
        startLine: 4993
      syntax:
        content:
          CSharp: int GetCountInactive()
          VB: Function GetCountInactive() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.IObjectPool`1.GetCountInactive*
  - id: ZeroFramework.Utility.IPoolKit
    commentId: T:ZeroFramework.Utility.IPoolKit
    language: CSharp
    name:
      CSharp: IPoolKit
      VB: IPoolKit
    nameWithType:
      CSharp: IPoolKit
      VB: IPoolKit
    qualifiedName:
      CSharp: ZeroFramework.Utility.IPoolKit
      VB: ZeroFramework.Utility.IPoolKit
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: IPoolKit
      path: ''
      startLine: 5008
    syntax:
      content:
        CSharp: 'public interface IPoolKit : IUtility'
        VB: Public Interface IPoolKit Inherits IUtility
    items:
    - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
      commentId: M:ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: AllocateSimpleObjectPool<T>(Func<T>, Action<T>, Action<T>, Action<T>, bool, int, int, bool)
        VB: AllocateSimpleObjectPool(Of T)(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer, Integer, Boolean)
      nameWithType:
        CSharp: IPoolKit.AllocateSimpleObjectPool<T>(Func<T>, Action<T>, Action<T>, Action<T>, bool, int, int, bool)
        VB: IPoolKit.AllocateSimpleObjectPool(Of T)(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer, Integer, Boolean)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool<T>(Func<T>, Action<T>, Action<T>, Action<T>, bool, int, int, bool)
        VB: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool(Of T)(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer, Integer, Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: AllocateSimpleObjectPool
        path: ''
        startLine: 5010
      syntax:
        content:
          CSharp: IObjectPool<T> AllocateSimpleObjectPool<T>(Func<T> createFunc, Action<T> actionOnGet, Action<T> actionOnRelease, Action<T> actionOnDestroy, bool collectionCheck, int defaultCapacity, int maxSize, bool isPreLoad = false)
          VB: Function AllocateSimpleObjectPool(Of T)(createFunc As Func(Of T), actionOnGet As Action(Of T), actionOnRelease As Action(Of T), actionOnDestroy As Action(Of T), collectionCheck As Boolean, defaultCapacity As Integer, maxSize As Integer, isPreLoad As Boolean = False) As IObjectPool(Of T)
        parameters:
        - id: createFunc
          type: Global.Func{{T}}
        - id: actionOnGet
          type: Global.Action{{T}}
        - id: actionOnRelease
          type: Global.Action{{T}}
        - id: actionOnDestroy
          type: Global.Action{{T}}
        - id: collectionCheck
          type: System.Boolean
        - id: defaultCapacity
          type: System.Int32
        - id: maxSize
          type: System.Int32
        - id: isPreLoad
          type: System.Boolean
        typeParameters:
        - id: T
        return:
          type: ZeroFramework.Utility.IObjectPool{{T}}
      overload: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool*
    - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
      commentId: M:ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
      language: CSharp
      name:
        CSharp: AllocateSafeObjectPool<T>(Func<T>, Action<T>, Action<T>, Action<T>, bool, int)
        VB: AllocateSafeObjectPool(Of T)(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer)
      nameWithType:
        CSharp: IPoolKit.AllocateSafeObjectPool<T>(Func<T>, Action<T>, Action<T>, Action<T>, bool, int)
        VB: IPoolKit.AllocateSafeObjectPool(Of T)(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer)
      qualifiedName:
        CSharp: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool<T>(Func<T>, Action<T>, Action<T>, Action<T>, bool, int)
        VB: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool(Of T)(Func(Of T), Action(Of T), Action(Of T), Action(Of T), Boolean, Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: AllocateSafeObjectPool
        path: ''
        startLine: 5014
      syntax:
        content:
          CSharp: IObjectPool<T> AllocateSafeObjectPool<T>(Func<T> createFunc, Action<T> actionOnGet, Action<T> actionOnRelease, Action<T> actionOnDestroy, bool collectionCheck, int maxSize)
          VB: Function AllocateSafeObjectPool(Of T)(createFunc As Func(Of T), actionOnGet As Action(Of T), actionOnRelease As Action(Of T), actionOnDestroy As Action(Of T), collectionCheck As Boolean, maxSize As Integer) As IObjectPool(Of T)
        parameters:
        - id: createFunc
          type: Global.Func{{T}}
        - id: actionOnGet
          type: Global.Action{{T}}
        - id: actionOnRelease
          type: Global.Action{{T}}
        - id: actionOnDestroy
          type: Global.Action{{T}}
        - id: collectionCheck
          type: System.Boolean
        - id: maxSize
          type: System.Int32
        typeParameters:
        - id: T
        return:
          type: ZeroFramework.Utility.IObjectPool{{T}}
      overload: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool*
  - id: ZeroFramework.Utility.TimerKit
    commentId: T:ZeroFramework.Utility.TimerKit
    language: CSharp
    name:
      CSharp: TimerKit
      VB: TimerKit
    nameWithType:
      CSharp: TimerKit
      VB: TimerKit
    qualifiedName:
      CSharp: ZeroFramework.Utility.TimerKit
      VB: ZeroFramework.Utility.TimerKit
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: TimerKit
      path: ''
      startLine: 5035
    syntax:
      content:
        CSharp: >-
          [MonoSingletonPathAttribute]

          public class TimerKit : SingletonMono<TimerKit>, ISingleton, ITimerKit
        VB: >-
          <MonoSingletonPathAttribute>

          Public Class TimerKit Inherits SingletonMono(Of TimerKit) Implements ISingleton, ITimerKit
    inheritance:
    - System.Object
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}
    implements:
    - ZeroFramework.ISingleton
    - ZeroFramework.Utility.ITimerKit
    inheritedMembers:
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.mInstance
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Instance
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ID
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Dispose
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnApplicationQuit
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ResetID
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.GetID
    items:
    - id: ZeroFramework.Utility.TimerKit.currentTimerId
      commentId: F:ZeroFramework.Utility.TimerKit.currentTimerId
      language: CSharp
      name:
        CSharp: currentTimerId
        VB: currentTimerId
      nameWithType:
        CSharp: TimerKit.currentTimerId
        VB: TimerKit.currentTimerId
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerKit.currentTimerId
        VB: ZeroFramework.Utility.TimerKit.currentTimerId
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: currentTimerId
        path: ''
        startLine: 5038
      syntax:
        content:
          CSharp: public long currentTimerId
          VB: Public currentTimerId As Long
        return:
          type: System.Int64
    - id: ZeroFramework.Utility.TimerKit.timerList
      commentId: F:ZeroFramework.Utility.TimerKit.timerList
      language: CSharp
      name:
        CSharp: timerList
        VB: timerList
      nameWithType:
        CSharp: TimerKit.timerList
        VB: TimerKit.timerList
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerKit.timerList
        VB: ZeroFramework.Utility.TimerKit.timerList
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: timerList
        path: ''
        startLine: 5039
      syntax:
        content:
          CSharp: public List<TimerTask> timerList
          VB: Public timerList As List(Of TimerTask)
        return:
          type: System.Collections.Generic.List{ZeroFramework.Utility.TimerTask}
    - id: ZeroFramework.Utility.TimerKit.OnSingletonInit
      commentId: M:ZeroFramework.Utility.TimerKit.OnSingletonInit
      language: CSharp
      name:
        CSharp: OnSingletonInit()
        VB: OnSingletonInit()
      nameWithType:
        CSharp: TimerKit.OnSingletonInit()
        VB: TimerKit.OnSingletonInit()
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerKit.OnSingletonInit()
        VB: ZeroFramework.Utility.TimerKit.OnSingletonInit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: OnSingletonInit
        path: ''
        startLine: 5042
      syntax:
        content:
          CSharp: public override void OnSingletonInit()
          VB: Public Overrides Sub OnSingletonInit()
      overload: ZeroFramework.Utility.TimerKit.OnSingletonInit*
      overridden: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnSingletonInit
    - id: ZeroFramework.Utility.TimerKit.Update
      commentId: M:ZeroFramework.Utility.TimerKit.Update
      language: CSharp
      name:
        CSharp: Update()
        VB: Update()
      nameWithType:
        CSharp: TimerKit.Update()
        VB: TimerKit.Update()
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerKit.Update()
        VB: ZeroFramework.Utility.TimerKit.Update()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Update
        path: ''
        startLine: 5070
      syntax:
        content:
          CSharp: public void Update()
          VB: Public Sub Update()
      overload: ZeroFramework.Utility.TimerKit.Update*
    - id: ZeroFramework.Utility.TimerKit.Wait(System.Single,Action,System.Int32,System.Single)
      commentId: M:ZeroFramework.Utility.TimerKit.Wait(System.Single,Action,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: Wait(float, Action, int, float)
        VB: Wait(Single, Action, Integer, Single)
      nameWithType:
        CSharp: TimerKit.Wait(float, Action, int, float)
        VB: TimerKit.Wait(Single, Action, Integer, Single)
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerKit.Wait(float, Action, int, float)
        VB: ZeroFramework.Utility.TimerKit.Wait(Single, Action, Integer, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Wait
        path: ''
        startLine: 5093
      syntax:
        content:
          CSharp: public long Wait(float delay, Action callback, int count = 1, float interval = 0)
          VB: Public Function Wait(delay As Single, callback As Action, count As Integer = 1, interval As Single = 0) As Long
        parameters:
        - id: delay
          type: System.Single
        - id: callback
          type: Global.Action
        - id: count
          type: System.Int32
        - id: interval
          type: System.Single
        return:
          type: System.Int64
      overload: ZeroFramework.Utility.TimerKit.Wait*
      implements:
      - ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action,System.Int32,System.Single)
    - id: ZeroFramework.Utility.TimerKit.Wait(System.Single,Action{System.Object},System.Object,System.Int32,System.Single)
      commentId: M:ZeroFramework.Utility.TimerKit.Wait(System.Single,Action{System.Object},System.Object,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: Wait(float, Action<object>, object, int, float)
        VB: Wait(Single, Action(Of Object), Object, Integer, Single)
      nameWithType:
        CSharp: TimerKit.Wait(float, Action<object>, object, int, float)
        VB: TimerKit.Wait(Single, Action(Of Object), Object, Integer, Single)
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerKit.Wait(float, Action<object>, object, int, float)
        VB: ZeroFramework.Utility.TimerKit.Wait(Single, Action(Of Object), Object, Integer, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Wait
        path: ''
        startLine: 5101
      syntax:
        content:
          CSharp: public long Wait(float delay, Action<object> callback, object param, int count = 1, float interval = 0)
          VB: Public Function Wait(delay As Single, callback As Action(Of Object), param As Object, count As Integer = 1, interval As Single = 0) As Long
        parameters:
        - id: delay
          type: System.Single
        - id: callback
          type: Global.Action{System.Object}
        - id: param
          type: System.Object
        - id: count
          type: System.Int32
        - id: interval
          type: System.Single
        return:
          type: System.Int64
      overload: ZeroFramework.Utility.TimerKit.Wait*
      implements:
      - ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action{System.Object},System.Object,System.Int32,System.Single)
    - id: ZeroFramework.Utility.TimerKit.Abort(System.Int64)
      commentId: M:ZeroFramework.Utility.TimerKit.Abort(System.Int64)
      language: CSharp
      name:
        CSharp: Abort(long)
        VB: Abort(Long)
      nameWithType:
        CSharp: TimerKit.Abort(long)
        VB: TimerKit.Abort(Long)
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerKit.Abort(long)
        VB: ZeroFramework.Utility.TimerKit.Abort(Long)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Abort
        path: ''
        startLine: 5109
      syntax:
        content:
          CSharp: public bool Abort(long taskId)
          VB: Public Function Abort(taskId As Long) As Boolean
        parameters:
        - id: taskId
          type: System.Int64
        return:
          type: System.Boolean
      overload: ZeroFramework.Utility.TimerKit.Abort*
      implements:
      - ZeroFramework.Utility.ITimerKit.Abort(System.Int64)
    - id: ZeroFramework.Utility.TimerKit.AbortAll
      commentId: M:ZeroFramework.Utility.TimerKit.AbortAll
      language: CSharp
      name:
        CSharp: AbortAll()
        VB: AbortAll()
      nameWithType:
        CSharp: TimerKit.AbortAll()
        VB: TimerKit.AbortAll()
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerKit.AbortAll()
        VB: ZeroFramework.Utility.TimerKit.AbortAll()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: AbortAll
        path: ''
        startLine: 5120
      syntax:
        content:
          CSharp: public void AbortAll()
          VB: Public Sub AbortAll()
      overload: ZeroFramework.Utility.TimerKit.AbortAll*
      implements:
      - ZeroFramework.Utility.ITimerKit.AbortAll
    - id: ZeroFramework.Utility.TimerKit.Clear
      commentId: M:ZeroFramework.Utility.TimerKit.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: TimerKit.Clear()
        VB: TimerKit.Clear()
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerKit.Clear()
        VB: ZeroFramework.Utility.TimerKit.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Clear
        path: ''
        startLine: 5128
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear()
      overload: ZeroFramework.Utility.TimerKit.Clear*
      implements:
      - ZeroFramework.Utility.ITimerKit.Clear
  - id: ZeroFramework.Utility.TimerTask
    commentId: T:ZeroFramework.Utility.TimerTask
    language: CSharp
    name:
      CSharp: TimerTask
      VB: TimerTask
    nameWithType:
      CSharp: TimerTask
      VB: TimerTask
    qualifiedName:
      CSharp: ZeroFramework.Utility.TimerTask
      VB: ZeroFramework.Utility.TimerTask
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: TimerTask
      path: ''
      startLine: 5153
    syntax:
      content:
        CSharp: public class TimerTask
        VB: Public Class TimerTask
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.TimerTask.timerId
      commentId: F:ZeroFramework.Utility.TimerTask.timerId
      language: CSharp
      name:
        CSharp: timerId
        VB: timerId
      nameWithType:
        CSharp: TimerTask.timerId
        VB: TimerTask.timerId
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerTask.timerId
        VB: ZeroFramework.Utility.TimerTask.timerId
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: timerId
        path: ''
        startLine: 5156
      syntax:
        content:
          CSharp: public long timerId
          VB: Public timerId As Long
        return:
          type: System.Int64
    - id: ZeroFramework.Utility.TimerTask.callback
      commentId: F:ZeroFramework.Utility.TimerTask.callback
      language: CSharp
      name:
        CSharp: callback
        VB: callback
      nameWithType:
        CSharp: TimerTask.callback
        VB: TimerTask.callback
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerTask.callback
        VB: ZeroFramework.Utility.TimerTask.callback
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: callback
        path: ''
        startLine: 5157
      syntax:
        content:
          CSharp: public Action<object> callback
          VB: Public callback As Action(Of Object)
        return:
          type: Global.Action{System.Object}
    - id: ZeroFramework.Utility.TimerTask.delay
      commentId: F:ZeroFramework.Utility.TimerTask.delay
      language: CSharp
      name:
        CSharp: delay
        VB: delay
      nameWithType:
        CSharp: TimerTask.delay
        VB: TimerTask.delay
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerTask.delay
        VB: ZeroFramework.Utility.TimerTask.delay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: delay
        path: ''
        startLine: 5158
      syntax:
        content:
          CSharp: public float delay
          VB: Public delay As Single
        return:
          type: System.Single
    - id: ZeroFramework.Utility.TimerTask.destTime
      commentId: F:ZeroFramework.Utility.TimerTask.destTime
      language: CSharp
      name:
        CSharp: destTime
        VB: destTime
      nameWithType:
        CSharp: TimerTask.destTime
        VB: TimerTask.destTime
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerTask.destTime
        VB: ZeroFramework.Utility.TimerTask.destTime
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: destTime
        path: ''
        startLine: 5159
      syntax:
        content:
          CSharp: public float destTime
          VB: Public destTime As Single
        return:
          type: System.Single
    - id: ZeroFramework.Utility.TimerTask.count
      commentId: F:ZeroFramework.Utility.TimerTask.count
      language: CSharp
      name:
        CSharp: count
        VB: count
      nameWithType:
        CSharp: TimerTask.count
        VB: TimerTask.count
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerTask.count
        VB: ZeroFramework.Utility.TimerTask.count
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: count
        path: ''
        startLine: 5160
      syntax:
        content:
          CSharp: public int count
          VB: Public count As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Utility.TimerTask.interval
      commentId: F:ZeroFramework.Utility.TimerTask.interval
      language: CSharp
      name:
        CSharp: interval
        VB: interval
      nameWithType:
        CSharp: TimerTask.interval
        VB: TimerTask.interval
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerTask.interval
        VB: ZeroFramework.Utility.TimerTask.interval
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: interval
        path: ''
        startLine: 5161
      syntax:
        content:
          CSharp: public float interval
          VB: Public interval As Single
        return:
          type: System.Single
    - id: ZeroFramework.Utility.TimerTask.param
      commentId: F:ZeroFramework.Utility.TimerTask.param
      language: CSharp
      name:
        CSharp: param
        VB: param
      nameWithType:
        CSharp: TimerTask.param
        VB: TimerTask.param
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerTask.param
        VB: ZeroFramework.Utility.TimerTask.param
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: param
        path: ''
        startLine: 5162
      syntax:
        content:
          CSharp: public object param
          VB: Public param As Object
        return:
          type: System.Object
    - id: ZeroFramework.Utility.TimerTask.#ctor
      commentId: M:ZeroFramework.Utility.TimerTask.#ctor
      language: CSharp
      name:
        CSharp: TimerTask()
        VB: New()
      nameWithType:
        CSharp: TimerTask.TimerTask()
        VB: TimerTask.New()
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerTask.TimerTask()
        VB: ZeroFramework.Utility.TimerTask.New()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 5164
      syntax:
        content:
          CSharp: public TimerTask()
          VB: Public Sub New()
      overload: ZeroFramework.Utility.TimerTask.#ctor*
    - id: ZeroFramework.Utility.TimerTask.Init(System.Int64,System.Single,Action{System.Object},System.Int32,System.Single,System.Object)
      commentId: M:ZeroFramework.Utility.TimerTask.Init(System.Int64,System.Single,Action{System.Object},System.Int32,System.Single,System.Object)
      language: CSharp
      name:
        CSharp: Init(long, float, Action<object>, int, float, object)
        VB: Init(Long, Single, Action(Of Object), Integer, Single, Object)
      nameWithType:
        CSharp: TimerTask.Init(long, float, Action<object>, int, float, object)
        VB: TimerTask.Init(Long, Single, Action(Of Object), Integer, Single, Object)
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerTask.Init(long, float, Action<object>, int, float, object)
        VB: ZeroFramework.Utility.TimerTask.Init(Long, Single, Action(Of Object), Integer, Single, Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Init
        path: ''
        startLine: 5169
      syntax:
        content:
          CSharp: public void Init(long timerId, float delay, Action<object> callback, int count, float interval, object param)
          VB: Public Sub Init(timerId As Long, delay As Single, callback As Action(Of Object), count As Integer, interval As Single, param As Object)
        parameters:
        - id: timerId
          type: System.Int64
        - id: delay
          type: System.Single
        - id: callback
          type: Global.Action{System.Object}
        - id: count
          type: System.Int32
        - id: interval
          type: System.Single
        - id: param
          type: System.Object
      overload: ZeroFramework.Utility.TimerTask.Init*
    - id: ZeroFramework.Utility.TimerTask.Reset
      commentId: M:ZeroFramework.Utility.TimerTask.Reset
      language: CSharp
      name:
        CSharp: Reset()
        VB: Reset()
      nameWithType:
        CSharp: TimerTask.Reset()
        VB: TimerTask.Reset()
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimerTask.Reset()
        VB: ZeroFramework.Utility.TimerTask.Reset()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Reset
        path: ''
        startLine: 5182
      syntax:
        content:
          CSharp: public void Reset()
          VB: Public Sub Reset()
      overload: ZeroFramework.Utility.TimerTask.Reset*
  - id: ZeroFramework.Utility.ITimerKit
    commentId: T:ZeroFramework.Utility.ITimerKit
    language: CSharp
    name:
      CSharp: ITimerKit
      VB: ITimerKit
    nameWithType:
      CSharp: ITimerKit
      VB: ITimerKit
    qualifiedName:
      CSharp: ZeroFramework.Utility.ITimerKit
      VB: ZeroFramework.Utility.ITimerKit
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: ITimerKit
      path: ''
      startLine: 5204
    syntax:
      content:
        CSharp: public interface ITimerKit
        VB: Public Interface ITimerKit
    items:
    - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action,System.Int32,System.Single)
      commentId: M:ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: Wait(float, Action, int, float)
        VB: Wait(Single, Action, Integer, Single)
      nameWithType:
        CSharp: ITimerKit.Wait(float, Action, int, float)
        VB: ITimerKit.Wait(Single, Action, Integer, Single)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ITimerKit.Wait(float, Action, int, float)
        VB: ZeroFramework.Utility.ITimerKit.Wait(Single, Action, Integer, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Wait
        path: ''
        startLine: 5206
      syntax:
        content:
          CSharp: long Wait(float delay, Action callback, int count = 1, float interval = 0)
          VB: Function Wait(delay As Single, callback As Action, count As Integer = 1, interval As Single = 0) As Long
        parameters:
        - id: delay
          type: System.Single
        - id: callback
          type: Global.Action
        - id: count
          type: System.Int32
        - id: interval
          type: System.Single
        return:
          type: System.Int64
      overload: ZeroFramework.Utility.ITimerKit.Wait*
    - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action{System.Object},System.Object,System.Int32,System.Single)
      commentId: M:ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action{System.Object},System.Object,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: Wait(float, Action<object>, object, int, float)
        VB: Wait(Single, Action(Of Object), Object, Integer, Single)
      nameWithType:
        CSharp: ITimerKit.Wait(float, Action<object>, object, int, float)
        VB: ITimerKit.Wait(Single, Action(Of Object), Object, Integer, Single)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ITimerKit.Wait(float, Action<object>, object, int, float)
        VB: ZeroFramework.Utility.ITimerKit.Wait(Single, Action(Of Object), Object, Integer, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Wait
        path: ''
        startLine: 5208
      syntax:
        content:
          CSharp: long Wait(float delay, Action<object> callback, object param, int count = 1, float interval = 0)
          VB: Function Wait(delay As Single, callback As Action(Of Object), param As Object, count As Integer = 1, interval As Single = 0) As Long
        parameters:
        - id: delay
          type: System.Single
        - id: callback
          type: Global.Action{System.Object}
        - id: param
          type: System.Object
        - id: count
          type: System.Int32
        - id: interval
          type: System.Single
        return:
          type: System.Int64
      overload: ZeroFramework.Utility.ITimerKit.Wait*
    - id: ZeroFramework.Utility.ITimerKit.Abort(System.Int64)
      commentId: M:ZeroFramework.Utility.ITimerKit.Abort(System.Int64)
      language: CSharp
      name:
        CSharp: Abort(long)
        VB: Abort(Long)
      nameWithType:
        CSharp: ITimerKit.Abort(long)
        VB: ITimerKit.Abort(Long)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ITimerKit.Abort(long)
        VB: ZeroFramework.Utility.ITimerKit.Abort(Long)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Abort
        path: ''
        startLine: 5210
      syntax:
        content:
          CSharp: bool Abort(long taskId)
          VB: Function Abort(taskId As Long) As Boolean
        parameters:
        - id: taskId
          type: System.Int64
        return:
          type: System.Boolean
      overload: ZeroFramework.Utility.ITimerKit.Abort*
    - id: ZeroFramework.Utility.ITimerKit.AbortAll
      commentId: M:ZeroFramework.Utility.ITimerKit.AbortAll
      language: CSharp
      name:
        CSharp: AbortAll()
        VB: AbortAll()
      nameWithType:
        CSharp: ITimerKit.AbortAll()
        VB: ITimerKit.AbortAll()
      qualifiedName:
        CSharp: ZeroFramework.Utility.ITimerKit.AbortAll()
        VB: ZeroFramework.Utility.ITimerKit.AbortAll()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: AbortAll
        path: ''
        startLine: 5212
      syntax:
        content:
          CSharp: void AbortAll()
          VB: Sub AbortAll()
      overload: ZeroFramework.Utility.ITimerKit.AbortAll*
    - id: ZeroFramework.Utility.ITimerKit.Clear
      commentId: M:ZeroFramework.Utility.ITimerKit.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: ITimerKit.Clear()
        VB: ITimerKit.Clear()
      qualifiedName:
        CSharp: ZeroFramework.Utility.ITimerKit.Clear()
        VB: ZeroFramework.Utility.ITimerKit.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Clear
        path: ''
        startLine: 5214
      syntax:
        content:
          CSharp: void Clear()
          VB: Sub Clear()
      overload: ZeroFramework.Utility.ITimerKit.Clear*
  - id: ZeroFramework.Utility.TimestampKit
    commentId: T:ZeroFramework.Utility.TimestampKit
    language: CSharp
    name:
      CSharp: TimestampKit
      VB: TimestampKit
    nameWithType:
      CSharp: TimestampKit
      VB: TimestampKit
    qualifiedName:
      CSharp: ZeroFramework.Utility.TimestampKit
      VB: ZeroFramework.Utility.TimestampKit
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: TimestampKit
      path: ''
      startLine: 5233
    syntax:
      content:
        CSharp: 'public class TimestampKit : ITimestampKit, IUtility'
        VB: Public Class TimestampKit Implements ITimestampKit, IUtility
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.Utility.ITimestampKit
    - ZeroFramework.IUtility
    items:
    - id: ZeroFramework.Utility.TimestampKit.#ctor
      commentId: M:ZeroFramework.Utility.TimestampKit.#ctor
      language: CSharp
      name:
        CSharp: TimestampKit()
        VB: New()
      nameWithType:
        CSharp: TimestampKit.TimestampKit()
        VB: TimestampKit.New()
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimestampKit.TimestampKit()
        VB: ZeroFramework.Utility.TimestampKit.New()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 5236
      syntax:
        content:
          CSharp: public TimestampKit()
          VB: Public Sub New()
      overload: ZeroFramework.Utility.TimestampKit.#ctor*
    - id: ZeroFramework.Utility.TimestampKit.GetTimestamp(System.Boolean)
      commentId: M:ZeroFramework.Utility.TimestampKit.GetTimestamp(System.Boolean)
      language: CSharp
      name:
        CSharp: GetTimestamp(bool)
        VB: GetTimestamp(Boolean)
      nameWithType:
        CSharp: TimestampKit.GetTimestamp(bool)
        VB: TimestampKit.GetTimestamp(Boolean)
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimestampKit.GetTimestamp(bool)
        VB: ZeroFramework.Utility.TimestampKit.GetTimestamp(Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetTimestamp
        path: ''
        startLine: 5241
      example: []
      syntax:
        content:
          CSharp: public long GetTimestamp(bool isMilliseconds = true)
          VB: Public Function GetTimestamp(isMilliseconds As Boolean = True) As Long
        parameters:
        - id: isMilliseconds
          type: System.Boolean
        return:
          type: System.Int64
      overload: ZeroFramework.Utility.TimestampKit.GetTimestamp*
      implements:
      - ZeroFramework.Utility.ITimestampKit.GetTimestamp(System.Boolean)
    - id: ZeroFramework.Utility.TimestampKit.GetTimeString(System.Int64,System.String)
      commentId: M:ZeroFramework.Utility.TimestampKit.GetTimeString(System.Int64,System.String)
      language: CSharp
      name:
        CSharp: GetTimeString(long, string)
        VB: GetTimeString(Long, String)
      nameWithType:
        CSharp: TimestampKit.GetTimeString(long, string)
        VB: TimestampKit.GetTimeString(Long, String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimestampKit.GetTimeString(long, string)
        VB: ZeroFramework.Utility.TimestampKit.GetTimeString(Long, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetTimeString
        path: ''
        startLine: 5251
      syntax:
        content:
          CSharp: public string GetTimeString(long millionSeconds, string format = "yyyy-MM-dd HH:mm:ss")
          VB: Public Function GetTimeString(millionSeconds As Long, format As String = "yyyy-MM-dd HH:mm:ss") As String
        parameters:
        - id: millionSeconds
          type: System.Int64
        - id: format
          type: System.String
        return:
          type: System.String
      overload: ZeroFramework.Utility.TimestampKit.GetTimeString*
      implements:
      - ZeroFramework.Utility.ITimestampKit.GetTimeString(System.Int64,System.String)
    - id: ZeroFramework.Utility.TimestampKit.AllocateClock
      commentId: M:ZeroFramework.Utility.TimestampKit.AllocateClock
      language: CSharp
      name:
        CSharp: AllocateClock()
        VB: AllocateClock()
      nameWithType:
        CSharp: TimestampKit.AllocateClock()
        VB: TimestampKit.AllocateClock()
      qualifiedName:
        CSharp: ZeroFramework.Utility.TimestampKit.AllocateClock()
        VB: ZeroFramework.Utility.TimestampKit.AllocateClock()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: AllocateClock
        path: ''
        startLine: 5256
      syntax:
        content:
          CSharp: public IClock AllocateClock()
          VB: Public Function AllocateClock() As IClock
        return:
          type: ZeroFramework.Utility.IClock
      overload: ZeroFramework.Utility.TimestampKit.AllocateClock*
      implements:
      - ZeroFramework.Utility.ITimestampKit.AllocateClock
  - id: ZeroFramework.Utility.Clock
    commentId: T:ZeroFramework.Utility.Clock
    language: CSharp
    name:
      CSharp: Clock
      VB: Clock
    nameWithType:
      CSharp: Clock
      VB: Clock
    qualifiedName:
      CSharp: ZeroFramework.Utility.Clock
      VB: ZeroFramework.Utility.Clock
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: Clock
      path: ''
      startLine: 5277
    syntax:
      content:
        CSharp: 'public class Clock : IClock'
        VB: Public Class Clock Implements IClock
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.Utility.IClock
    items:
    - id: ZeroFramework.Utility.Clock.#ctor(ZeroFramework.Utility.ITimestampKit)
      commentId: M:ZeroFramework.Utility.Clock.#ctor(ZeroFramework.Utility.ITimestampKit)
      language: CSharp
      name:
        CSharp: Clock(ITimestampKit)
        VB: New(ITimestampKit)
      nameWithType:
        CSharp: Clock.Clock(ITimestampKit)
        VB: Clock.New(ITimestampKit)
      qualifiedName:
        CSharp: ZeroFramework.Utility.Clock.Clock(ZeroFramework.Utility.ITimestampKit)
        VB: ZeroFramework.Utility.Clock.New(ZeroFramework.Utility.ITimestampKit)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: .ctor
        path: ''
        startLine: 5286
      syntax:
        content:
          CSharp: public Clock(ITimestampKit timestampKit)
          VB: Public Sub New(timestampKit As ITimestampKit)
        parameters:
        - id: timestampKit
          type: ZeroFramework.Utility.ITimestampKit
      overload: ZeroFramework.Utility.Clock.#ctor*
    - id: ZeroFramework.Utility.Clock.GetTotalUseTime
      commentId: M:ZeroFramework.Utility.Clock.GetTotalUseTime
      language: CSharp
      name:
        CSharp: GetTotalUseTime()
        VB: GetTotalUseTime()
      nameWithType:
        CSharp: Clock.GetTotalUseTime()
        VB: Clock.GetTotalUseTime()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Clock.GetTotalUseTime()
        VB: ZeroFramework.Utility.Clock.GetTotalUseTime()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetTotalUseTime
        path: ''
        startLine: 5292
      syntax:
        content:
          CSharp: public long GetTotalUseTime()
          VB: Public Function GetTotalUseTime() As Long
        return:
          type: System.Int64
      overload: ZeroFramework.Utility.Clock.GetTotalUseTime*
      implements:
      - ZeroFramework.Utility.IClock.GetTotalUseTime
    - id: ZeroFramework.Utility.Clock.GetAverageUseTime
      commentId: M:ZeroFramework.Utility.Clock.GetAverageUseTime
      language: CSharp
      name:
        CSharp: GetAverageUseTime()
        VB: GetAverageUseTime()
      nameWithType:
        CSharp: Clock.GetAverageUseTime()
        VB: Clock.GetAverageUseTime()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Clock.GetAverageUseTime()
        VB: ZeroFramework.Utility.Clock.GetAverageUseTime()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetAverageUseTime
        path: ''
        startLine: 5297
      syntax:
        content:
          CSharp: public double GetAverageUseTime()
          VB: Public Function GetAverageUseTime() As Double
        return:
          type: System.Double
      overload: ZeroFramework.Utility.Clock.GetAverageUseTime*
      implements:
      - ZeroFramework.Utility.IClock.GetAverageUseTime
    - id: ZeroFramework.Utility.Clock.GetFirstUseTime
      commentId: M:ZeroFramework.Utility.Clock.GetFirstUseTime
      language: CSharp
      name:
        CSharp: GetFirstUseTime()
        VB: GetFirstUseTime()
      nameWithType:
        CSharp: Clock.GetFirstUseTime()
        VB: Clock.GetFirstUseTime()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Clock.GetFirstUseTime()
        VB: ZeroFramework.Utility.Clock.GetFirstUseTime()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetFirstUseTime
        path: ''
        startLine: 5303
      syntax:
        content:
          CSharp: public long GetFirstUseTime()
          VB: Public Function GetFirstUseTime() As Long
        return:
          type: System.Int64
      overload: ZeroFramework.Utility.Clock.GetFirstUseTime*
      implements:
      - ZeroFramework.Utility.IClock.GetFirstUseTime
    - id: ZeroFramework.Utility.Clock.GetCurrentUseTime
      commentId: M:ZeroFramework.Utility.Clock.GetCurrentUseTime
      language: CSharp
      name:
        CSharp: GetCurrentUseTime()
        VB: GetCurrentUseTime()
      nameWithType:
        CSharp: Clock.GetCurrentUseTime()
        VB: Clock.GetCurrentUseTime()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Clock.GetCurrentUseTime()
        VB: ZeroFramework.Utility.Clock.GetCurrentUseTime()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetCurrentUseTime
        path: ''
        startLine: 5308
      syntax:
        content:
          CSharp: public long GetCurrentUseTime()
          VB: Public Function GetCurrentUseTime() As Long
        return:
          type: System.Int64
      overload: ZeroFramework.Utility.Clock.GetCurrentUseTime*
      implements:
      - ZeroFramework.Utility.IClock.GetCurrentUseTime
    - id: ZeroFramework.Utility.Clock.GetCount
      commentId: M:ZeroFramework.Utility.Clock.GetCount
      language: CSharp
      name:
        CSharp: GetCount()
        VB: GetCount()
      nameWithType:
        CSharp: Clock.GetCount()
        VB: Clock.GetCount()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Clock.GetCount()
        VB: ZeroFramework.Utility.Clock.GetCount()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetCount
        path: ''
        startLine: 5313
      syntax:
        content:
          CSharp: public int GetCount()
          VB: Public Function GetCount() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.Clock.GetCount*
      implements:
      - ZeroFramework.Utility.IClock.GetCount
    - id: ZeroFramework.Utility.Clock.Tic
      commentId: M:ZeroFramework.Utility.Clock.Tic
      language: CSharp
      name:
        CSharp: Tic()
        VB: Tic()
      nameWithType:
        CSharp: Clock.Tic()
        VB: Clock.Tic()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Clock.Tic()
        VB: ZeroFramework.Utility.Clock.Tic()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Tic
        path: ''
        startLine: 5318
      syntax:
        content:
          CSharp: public void Tic()
          VB: Public Sub Tic()
      overload: ZeroFramework.Utility.Clock.Tic*
      implements:
      - ZeroFramework.Utility.IClock.Tic
    - id: ZeroFramework.Utility.Clock.Toc
      commentId: M:ZeroFramework.Utility.Clock.Toc
      language: CSharp
      name:
        CSharp: Toc()
        VB: Toc()
      nameWithType:
        CSharp: Clock.Toc()
        VB: Clock.Toc()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Clock.Toc()
        VB: ZeroFramework.Utility.Clock.Toc()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Toc
        path: ''
        startLine: 5323
      syntax:
        content:
          CSharp: public void Toc()
          VB: Public Sub Toc()
      overload: ZeroFramework.Utility.Clock.Toc*
      implements:
      - ZeroFramework.Utility.IClock.Toc
    - id: ZeroFramework.Utility.Clock.Reset
      commentId: M:ZeroFramework.Utility.Clock.Reset
      language: CSharp
      name:
        CSharp: Reset()
        VB: Reset()
      nameWithType:
        CSharp: Clock.Reset()
        VB: Clock.Reset()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Clock.Reset()
        VB: ZeroFramework.Utility.Clock.Reset()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Reset
        path: ''
        startLine: 5332
      syntax:
        content:
          CSharp: public void Reset()
          VB: Public Sub Reset()
      overload: ZeroFramework.Utility.Clock.Reset*
      implements:
      - ZeroFramework.Utility.IClock.Reset
  - id: ZeroFramework.Utility.IClock
    commentId: T:ZeroFramework.Utility.IClock
    language: CSharp
    name:
      CSharp: IClock
      VB: IClock
    nameWithType:
      CSharp: IClock
      VB: IClock
    qualifiedName:
      CSharp: ZeroFramework.Utility.IClock
      VB: ZeroFramework.Utility.IClock
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: IClock
      path: ''
      startLine: 5356
    syntax:
      content:
        CSharp: public interface IClock
        VB: Public Interface IClock
    items:
    - id: ZeroFramework.Utility.IClock.GetTotalUseTime
      commentId: M:ZeroFramework.Utility.IClock.GetTotalUseTime
      language: CSharp
      name:
        CSharp: GetTotalUseTime()
        VB: GetTotalUseTime()
      nameWithType:
        CSharp: IClock.GetTotalUseTime()
        VB: IClock.GetTotalUseTime()
      qualifiedName:
        CSharp: ZeroFramework.Utility.IClock.GetTotalUseTime()
        VB: ZeroFramework.Utility.IClock.GetTotalUseTime()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetTotalUseTime
        path: ''
        startLine: 5358
      syntax:
        content:
          CSharp: long GetTotalUseTime()
          VB: Function GetTotalUseTime() As Long
        return:
          type: System.Int64
      overload: ZeroFramework.Utility.IClock.GetTotalUseTime*
    - id: ZeroFramework.Utility.IClock.GetAverageUseTime
      commentId: M:ZeroFramework.Utility.IClock.GetAverageUseTime
      language: CSharp
      name:
        CSharp: GetAverageUseTime()
        VB: GetAverageUseTime()
      nameWithType:
        CSharp: IClock.GetAverageUseTime()
        VB: IClock.GetAverageUseTime()
      qualifiedName:
        CSharp: ZeroFramework.Utility.IClock.GetAverageUseTime()
        VB: ZeroFramework.Utility.IClock.GetAverageUseTime()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetAverageUseTime
        path: ''
        startLine: 5360
      syntax:
        content:
          CSharp: double GetAverageUseTime()
          VB: Function GetAverageUseTime() As Double
        return:
          type: System.Double
      overload: ZeroFramework.Utility.IClock.GetAverageUseTime*
    - id: ZeroFramework.Utility.IClock.GetFirstUseTime
      commentId: M:ZeroFramework.Utility.IClock.GetFirstUseTime
      language: CSharp
      name:
        CSharp: GetFirstUseTime()
        VB: GetFirstUseTime()
      nameWithType:
        CSharp: IClock.GetFirstUseTime()
        VB: IClock.GetFirstUseTime()
      qualifiedName:
        CSharp: ZeroFramework.Utility.IClock.GetFirstUseTime()
        VB: ZeroFramework.Utility.IClock.GetFirstUseTime()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetFirstUseTime
        path: ''
        startLine: 5362
      syntax:
        content:
          CSharp: long GetFirstUseTime()
          VB: Function GetFirstUseTime() As Long
        return:
          type: System.Int64
      overload: ZeroFramework.Utility.IClock.GetFirstUseTime*
    - id: ZeroFramework.Utility.IClock.GetCurrentUseTime
      commentId: M:ZeroFramework.Utility.IClock.GetCurrentUseTime
      language: CSharp
      name:
        CSharp: GetCurrentUseTime()
        VB: GetCurrentUseTime()
      nameWithType:
        CSharp: IClock.GetCurrentUseTime()
        VB: IClock.GetCurrentUseTime()
      qualifiedName:
        CSharp: ZeroFramework.Utility.IClock.GetCurrentUseTime()
        VB: ZeroFramework.Utility.IClock.GetCurrentUseTime()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetCurrentUseTime
        path: ''
        startLine: 5364
      syntax:
        content:
          CSharp: long GetCurrentUseTime()
          VB: Function GetCurrentUseTime() As Long
        return:
          type: System.Int64
      overload: ZeroFramework.Utility.IClock.GetCurrentUseTime*
    - id: ZeroFramework.Utility.IClock.GetCount
      commentId: M:ZeroFramework.Utility.IClock.GetCount
      language: CSharp
      name:
        CSharp: GetCount()
        VB: GetCount()
      nameWithType:
        CSharp: IClock.GetCount()
        VB: IClock.GetCount()
      qualifiedName:
        CSharp: ZeroFramework.Utility.IClock.GetCount()
        VB: ZeroFramework.Utility.IClock.GetCount()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetCount
        path: ''
        startLine: 5366
      syntax:
        content:
          CSharp: int GetCount()
          VB: Function GetCount() As Integer
        return:
          type: System.Int32
      overload: ZeroFramework.Utility.IClock.GetCount*
    - id: ZeroFramework.Utility.IClock.Tic
      commentId: M:ZeroFramework.Utility.IClock.Tic
      language: CSharp
      name:
        CSharp: Tic()
        VB: Tic()
      nameWithType:
        CSharp: IClock.Tic()
        VB: IClock.Tic()
      qualifiedName:
        CSharp: ZeroFramework.Utility.IClock.Tic()
        VB: ZeroFramework.Utility.IClock.Tic()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Tic
        path: ''
        startLine: 5368
      syntax:
        content:
          CSharp: void Tic()
          VB: Sub Tic()
      overload: ZeroFramework.Utility.IClock.Tic*
    - id: ZeroFramework.Utility.IClock.Toc
      commentId: M:ZeroFramework.Utility.IClock.Toc
      language: CSharp
      name:
        CSharp: Toc()
        VB: Toc()
      nameWithType:
        CSharp: IClock.Toc()
        VB: IClock.Toc()
      qualifiedName:
        CSharp: ZeroFramework.Utility.IClock.Toc()
        VB: ZeroFramework.Utility.IClock.Toc()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Toc
        path: ''
        startLine: 5370
      syntax:
        content:
          CSharp: void Toc()
          VB: Sub Toc()
      overload: ZeroFramework.Utility.IClock.Toc*
    - id: ZeroFramework.Utility.IClock.Reset
      commentId: M:ZeroFramework.Utility.IClock.Reset
      language: CSharp
      name:
        CSharp: Reset()
        VB: Reset()
      nameWithType:
        CSharp: IClock.Reset()
        VB: IClock.Reset()
      qualifiedName:
        CSharp: ZeroFramework.Utility.IClock.Reset()
        VB: ZeroFramework.Utility.IClock.Reset()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: Reset
        path: ''
        startLine: 5372
      syntax:
        content:
          CSharp: void Reset()
          VB: Sub Reset()
      overload: ZeroFramework.Utility.IClock.Reset*
  - id: ZeroFramework.Utility.ITimestampKit
    commentId: T:ZeroFramework.Utility.ITimestampKit
    language: CSharp
    name:
      CSharp: ITimestampKit
      VB: ITimestampKit
    nameWithType:
      CSharp: ITimestampKit
      VB: ITimestampKit
    qualifiedName:
      CSharp: ZeroFramework.Utility.ITimestampKit
      VB: ZeroFramework.Utility.ITimestampKit
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility
    source:
      id: ITimestampKit
      path: ''
      startLine: 5389
    syntax:
      content:
        CSharp: 'public interface ITimestampKit : IUtility'
        VB: Public Interface ITimestampKit Inherits IUtility
    items:
    - id: ZeroFramework.Utility.ITimestampKit.GetTimestamp(System.Boolean)
      commentId: M:ZeroFramework.Utility.ITimestampKit.GetTimestamp(System.Boolean)
      language: CSharp
      name:
        CSharp: GetTimestamp(bool)
        VB: GetTimestamp(Boolean)
      nameWithType:
        CSharp: ITimestampKit.GetTimestamp(bool)
        VB: ITimestampKit.GetTimestamp(Boolean)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ITimestampKit.GetTimestamp(bool)
        VB: ZeroFramework.Utility.ITimestampKit.GetTimestamp(Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetTimestamp
        path: ''
        startLine: 5391
      syntax:
        content:
          CSharp: long GetTimestamp(bool isMilliseconds = true)
          VB: Function GetTimestamp(isMilliseconds As Boolean = True) As Long
        parameters:
        - id: isMilliseconds
          type: System.Boolean
        return:
          type: System.Int64
      overload: ZeroFramework.Utility.ITimestampKit.GetTimestamp*
    - id: ZeroFramework.Utility.ITimestampKit.GetTimeString(System.Int64,System.String)
      commentId: M:ZeroFramework.Utility.ITimestampKit.GetTimeString(System.Int64,System.String)
      language: CSharp
      name:
        CSharp: GetTimeString(long, string)
        VB: GetTimeString(Long, String)
      nameWithType:
        CSharp: ITimestampKit.GetTimeString(long, string)
        VB: ITimestampKit.GetTimeString(Long, String)
      qualifiedName:
        CSharp: ZeroFramework.Utility.ITimestampKit.GetTimeString(long, string)
        VB: ZeroFramework.Utility.ITimestampKit.GetTimeString(Long, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: GetTimeString
        path: ''
        startLine: 5393
      syntax:
        content:
          CSharp: string GetTimeString(long millionSeconds, string format = "yyyy-MM-dd HH:mm:ss")
          VB: Function GetTimeString(millionSeconds As Long, format As String = "yyyy-MM-dd HH:mm:ss") As String
        parameters:
        - id: millionSeconds
          type: System.Int64
        - id: format
          type: System.String
        return:
          type: System.String
      overload: ZeroFramework.Utility.ITimestampKit.GetTimeString*
    - id: ZeroFramework.Utility.ITimestampKit.AllocateClock
      commentId: M:ZeroFramework.Utility.ITimestampKit.AllocateClock
      language: CSharp
      name:
        CSharp: AllocateClock()
        VB: AllocateClock()
      nameWithType:
        CSharp: ITimestampKit.AllocateClock()
        VB: ITimestampKit.AllocateClock()
      qualifiedName:
        CSharp: ZeroFramework.Utility.ITimestampKit.AllocateClock()
        VB: ZeroFramework.Utility.ITimestampKit.AllocateClock()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility
      source:
        id: AllocateClock
        path: ''
        startLine: 5395
      syntax:
        content:
          CSharp: IClock AllocateClock()
          VB: Function AllocateClock() As IClock
        return:
          type: ZeroFramework.Utility.IClock
      overload: ZeroFramework.Utility.ITimestampKit.AllocateClock*
- id: ZeroFramework.Utility.Example
  commentId: N:ZeroFramework.Utility.Example
  language: CSharp
  name:
    CSharp: ZeroFramework.Utility.Example
    VB: ZeroFramework.Utility.Example
  nameWithType:
    CSharp: ZeroFramework.Utility.Example
    VB: ZeroFramework.Utility.Example
  qualifiedName:
    CSharp: ZeroFramework.Utility.Example
    VB: ZeroFramework.Utility.Example
  type: Namespace
  assemblies:
  - cs.temp.dll
  items:
  - id: ZeroFramework.Utility.Example.EventExample
    commentId: T:ZeroFramework.Utility.Example.EventExample
    language: CSharp
    name:
      CSharp: EventExample
      VB: EventExample
    nameWithType:
      CSharp: EventExample
      VB: EventExample
    qualifiedName:
      CSharp: ZeroFramework.Utility.Example.EventExample
      VB: ZeroFramework.Utility.Example.EventExample
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility.Example
    source:
      id: EventExample
      path: ''
      startLine: 17
    syntax:
      content:
        CSharp: 'public class EventExample : MonoBehaviour'
        VB: Public Class EventExample Inherits MonoBehaviour
    inheritance:
    - System.Object
    items: []
  - id: ZeroFramework.Utility.Example.FileObjExample
    commentId: T:ZeroFramework.Utility.Example.FileObjExample
    language: CSharp
    name:
      CSharp: FileObjExample
      VB: FileObjExample
    nameWithType:
      CSharp: FileObjExample
      VB: FileObjExample
    qualifiedName:
      CSharp: ZeroFramework.Utility.Example.FileObjExample
      VB: ZeroFramework.Utility.Example.FileObjExample
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility.Example
    source:
      id: FileObjExample
      path: ''
      startLine: 58
    syntax:
      content:
        CSharp: public class FileObjExample
        VB: Public Class FileObjExample
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.Example.FileObjExample.name
      commentId: F:ZeroFramework.Utility.Example.FileObjExample.name
      language: CSharp
      name:
        CSharp: name
        VB: name
      nameWithType:
        CSharp: FileObjExample.name
        VB: FileObjExample.name
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.FileObjExample.name
        VB: ZeroFramework.Utility.Example.FileObjExample.name
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: name
        path: ''
        startLine: 61
      syntax:
        content:
          CSharp: public string name
          VB: Public name As String
        return:
          type: System.String
    - id: ZeroFramework.Utility.Example.FileObjExample.pi
      commentId: F:ZeroFramework.Utility.Example.FileObjExample.pi
      language: CSharp
      name:
        CSharp: pi
        VB: pi
      nameWithType:
        CSharp: FileObjExample.pi
        VB: FileObjExample.pi
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.FileObjExample.pi
        VB: ZeroFramework.Utility.Example.FileObjExample.pi
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: pi
        path: ''
        startLine: 62
      syntax:
        content:
          CSharp: public float pi
          VB: Public pi As Single
        return:
          type: System.Single
    - id: ZeroFramework.Utility.Example.FileObjExample.age
      commentId: F:ZeroFramework.Utility.Example.FileObjExample.age
      language: CSharp
      name:
        CSharp: age
        VB: age
      nameWithType:
        CSharp: FileObjExample.age
        VB: FileObjExample.age
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.FileObjExample.age
        VB: ZeroFramework.Utility.Example.FileObjExample.age
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: age
        path: ''
        startLine: 63
      syntax:
        content:
          CSharp: public int age
          VB: Public age As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Utility.Example.FileObjExample.array
      commentId: F:ZeroFramework.Utility.Example.FileObjExample.array
      language: CSharp
      name:
        CSharp: array
        VB: array
      nameWithType:
        CSharp: FileObjExample.array
        VB: FileObjExample.array
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.FileObjExample.array
        VB: ZeroFramework.Utility.Example.FileObjExample.array
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: array
        path: ''
        startLine: 65
      syntax:
        content:
          CSharp: public string[] array
          VB: Public array As String()
        return:
          type: System.String[]
    - id: ZeroFramework.Utility.Example.FileObjExample.list
      commentId: F:ZeroFramework.Utility.Example.FileObjExample.list
      language: CSharp
      name:
        CSharp: list
        VB: list
      nameWithType:
        CSharp: FileObjExample.list
        VB: FileObjExample.list
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.FileObjExample.list
        VB: ZeroFramework.Utility.Example.FileObjExample.list
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: list
        path: ''
        startLine: 70
      syntax:
        content:
          CSharp: public List<string> list
          VB: Public list As List(Of String)
        return:
          type: System.Collections.Generic.List{System.String}
    - id: ZeroFramework.Utility.Example.FileObjExample.dict
      commentId: F:ZeroFramework.Utility.Example.FileObjExample.dict
      language: CSharp
      name:
        CSharp: dict
        VB: dict
      nameWithType:
        CSharp: FileObjExample.dict
        VB: FileObjExample.dict
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.FileObjExample.dict
        VB: ZeroFramework.Utility.Example.FileObjExample.dict
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: dict
        path: ''
        startLine: 75
      syntax:
        content:
          CSharp: public Dictionary<string, string> dict
          VB: Public dict As Dictionary(Of String, String)
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.String}
  - id: ZeroFramework.Utility.Example.FileExample
    commentId: T:ZeroFramework.Utility.Example.FileExample
    language: CSharp
    name:
      CSharp: FileExample
      VB: FileExample
    nameWithType:
      CSharp: FileExample
      VB: FileExample
    qualifiedName:
      CSharp: ZeroFramework.Utility.Example.FileExample
      VB: ZeroFramework.Utility.Example.FileExample
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility.Example
    source:
      id: FileExample
      path: ''
      startLine: 83
    syntax:
      content:
        CSharp: 'public class FileExample : MonoBehaviour'
        VB: Public Class FileExample Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.Example.FileExample.image_web
      commentId: F:ZeroFramework.Utility.Example.FileExample.image_web
      language: CSharp
      name:
        CSharp: image_web
        VB: image_web
      nameWithType:
        CSharp: FileExample.image_web
        VB: FileExample.image_web
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.FileExample.image_web
        VB: ZeroFramework.Utility.Example.FileExample.image_web
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: image_web
        path: ''
        startLine: 85
      syntax:
        content:
          CSharp: public Image image_web
          VB: Public image_web As Image
        return:
          type: Global.Image
    - id: ZeroFramework.Utility.Example.FileExample.image_local
      commentId: F:ZeroFramework.Utility.Example.FileExample.image_local
      language: CSharp
      name:
        CSharp: image_local
        VB: image_local
      nameWithType:
        CSharp: FileExample.image_local
        VB: FileExample.image_local
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.FileExample.image_local
        VB: ZeroFramework.Utility.Example.FileExample.image_local
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: image_local
        path: ''
        startLine: 86
      syntax:
        content:
          CSharp: public Image image_local
          VB: Public image_local As Image
        return:
          type: Global.Image
  - id: ZeroFramework.Utility.Example.LogExample
    commentId: T:ZeroFramework.Utility.Example.LogExample
    language: CSharp
    name:
      CSharp: LogExample
      VB: LogExample
    nameWithType:
      CSharp: LogExample
      VB: LogExample
    qualifiedName:
      CSharp: ZeroFramework.Utility.Example.LogExample
      VB: ZeroFramework.Utility.Example.LogExample
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility.Example
    source:
      id: LogExample
      path: ''
      startLine: 190
    syntax:
      content:
        CSharp: 'public class LogExample : MonoBehaviour'
        VB: Public Class LogExample Inherits MonoBehaviour
    inheritance:
    - System.Object
    items: []
  - id: ZeroFramework.Utility.Example.PoolExample
    commentId: T:ZeroFramework.Utility.Example.PoolExample
    language: CSharp
    name:
      CSharp: PoolExample
      VB: PoolExample
    nameWithType:
      CSharp: PoolExample
      VB: PoolExample
    qualifiedName:
      CSharp: ZeroFramework.Utility.Example.PoolExample
      VB: ZeroFramework.Utility.Example.PoolExample
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility.Example
    source:
      id: PoolExample
      path: ''
      startLine: 231
    syntax:
      content:
        CSharp: 'public class PoolExample : MonoBehaviour'
        VB: Public Class PoolExample Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Utility.Example.PoolExample.prefab
      commentId: F:ZeroFramework.Utility.Example.PoolExample.prefab
      language: CSharp
      name:
        CSharp: prefab
        VB: prefab
      nameWithType:
        CSharp: PoolExample.prefab
        VB: PoolExample.prefab
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.prefab
        VB: ZeroFramework.Utility.Example.PoolExample.prefab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: prefab
        path: ''
        startLine: 233
      syntax:
        content:
          CSharp: public GameObject prefab
          VB: Public prefab As GameObject
        return:
          type: Global.GameObject
    - id: ZeroFramework.Utility.Example.PoolExample.ZeroCountActive
      commentId: F:ZeroFramework.Utility.Example.PoolExample.ZeroCountActive
      language: CSharp
      name:
        CSharp: ZeroCountActive
        VB: ZeroCountActive
      nameWithType:
        CSharp: PoolExample.ZeroCountActive
        VB: PoolExample.ZeroCountActive
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.ZeroCountActive
        VB: ZeroFramework.Utility.Example.PoolExample.ZeroCountActive
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: ZeroCountActive
        path: ''
        startLine: 235
      syntax:
        content:
          CSharp: public int ZeroCountActive
          VB: Public ZeroCountActive As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Utility.Example.PoolExample.ZeroCountAll
      commentId: F:ZeroFramework.Utility.Example.PoolExample.ZeroCountAll
      language: CSharp
      name:
        CSharp: ZeroCountAll
        VB: ZeroCountAll
      nameWithType:
        CSharp: PoolExample.ZeroCountAll
        VB: PoolExample.ZeroCountAll
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.ZeroCountAll
        VB: ZeroFramework.Utility.Example.PoolExample.ZeroCountAll
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: ZeroCountAll
        path: ''
        startLine: 236
      syntax:
        content:
          CSharp: public int ZeroCountAll
          VB: Public ZeroCountAll As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Utility.Example.PoolExample.ZeroCountInactive
      commentId: F:ZeroFramework.Utility.Example.PoolExample.ZeroCountInactive
      language: CSharp
      name:
        CSharp: ZeroCountInactive
        VB: ZeroCountInactive
      nameWithType:
        CSharp: PoolExample.ZeroCountInactive
        VB: PoolExample.ZeroCountInactive
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.ZeroCountInactive
        VB: ZeroFramework.Utility.Example.PoolExample.ZeroCountInactive
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: ZeroCountInactive
        path: ''
        startLine: 237
      syntax:
        content:
          CSharp: public int ZeroCountInactive
          VB: Public ZeroCountInactive As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Utility.Example.PoolExample.UnityCountActive
      commentId: F:ZeroFramework.Utility.Example.PoolExample.UnityCountActive
      language: CSharp
      name:
        CSharp: UnityCountActive
        VB: UnityCountActive
      nameWithType:
        CSharp: PoolExample.UnityCountActive
        VB: PoolExample.UnityCountActive
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.UnityCountActive
        VB: ZeroFramework.Utility.Example.PoolExample.UnityCountActive
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: UnityCountActive
        path: ''
        startLine: 239
      syntax:
        content:
          CSharp: public int UnityCountActive
          VB: Public UnityCountActive As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Utility.Example.PoolExample.UnityCountAll
      commentId: F:ZeroFramework.Utility.Example.PoolExample.UnityCountAll
      language: CSharp
      name:
        CSharp: UnityCountAll
        VB: UnityCountAll
      nameWithType:
        CSharp: PoolExample.UnityCountAll
        VB: PoolExample.UnityCountAll
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.UnityCountAll
        VB: ZeroFramework.Utility.Example.PoolExample.UnityCountAll
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: UnityCountAll
        path: ''
        startLine: 240
      syntax:
        content:
          CSharp: public int UnityCountAll
          VB: Public UnityCountAll As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Utility.Example.PoolExample.UnityCountInactive
      commentId: F:ZeroFramework.Utility.Example.PoolExample.UnityCountInactive
      language: CSharp
      name:
        CSharp: UnityCountInactive
        VB: UnityCountInactive
      nameWithType:
        CSharp: PoolExample.UnityCountInactive
        VB: PoolExample.UnityCountInactive
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.UnityCountInactive
        VB: ZeroFramework.Utility.Example.PoolExample.UnityCountInactive
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: UnityCountInactive
        path: ''
        startLine: 241
      syntax:
        content:
          CSharp: public int UnityCountInactive
          VB: Public UnityCountInactive As Integer
        return:
          type: System.Int32
    - id: ZeroFramework.Utility.Example.PoolExample.zero_x
      commentId: F:ZeroFramework.Utility.Example.PoolExample.zero_x
      language: CSharp
      name:
        CSharp: zero_x
        VB: zero_x
      nameWithType:
        CSharp: PoolExample.zero_x
        VB: PoolExample.zero_x
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.zero_x
        VB: ZeroFramework.Utility.Example.PoolExample.zero_x
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: zero_x
        path: ''
        startLine: 250
      syntax:
        content:
          CSharp: public float zero_x
          VB: Public zero_x As Single
        return:
          type: System.Single
    - id: ZeroFramework.Utility.Example.PoolExample.unity_x
      commentId: F:ZeroFramework.Utility.Example.PoolExample.unity_x
      language: CSharp
      name:
        CSharp: unity_x
        VB: unity_x
      nameWithType:
        CSharp: PoolExample.unity_x
        VB: PoolExample.unity_x
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.unity_x
        VB: ZeroFramework.Utility.Example.PoolExample.unity_x
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: unity_x
        path: ''
        startLine: 251
      syntax:
        content:
          CSharp: public float unity_x
          VB: Public unity_x As Single
        return:
          type: System.Single
    - id: ZeroFramework.Utility.Example.PoolExample.CreateFunc
      commentId: M:ZeroFramework.Utility.Example.PoolExample.CreateFunc
      language: CSharp
      name:
        CSharp: CreateFunc()
        VB: CreateFunc()
      nameWithType:
        CSharp: PoolExample.CreateFunc()
        VB: PoolExample.CreateFunc()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.CreateFunc()
        VB: ZeroFramework.Utility.Example.PoolExample.CreateFunc()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: CreateFunc
        path: ''
        startLine: 307
      syntax:
        content:
          CSharp: public GameObject CreateFunc()
          VB: Public Function CreateFunc() As GameObject
        return:
          type: Global.GameObject
      overload: ZeroFramework.Utility.Example.PoolExample.CreateFunc*
    - id: ZeroFramework.Utility.Example.PoolExample.CreateFuncUnity
      commentId: M:ZeroFramework.Utility.Example.PoolExample.CreateFuncUnity
      language: CSharp
      name:
        CSharp: CreateFuncUnity()
        VB: CreateFuncUnity()
      nameWithType:
        CSharp: PoolExample.CreateFuncUnity()
        VB: PoolExample.CreateFuncUnity()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.CreateFuncUnity()
        VB: ZeroFramework.Utility.Example.PoolExample.CreateFuncUnity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: CreateFuncUnity
        path: ''
        startLine: 316
      syntax:
        content:
          CSharp: public GameObject CreateFuncUnity()
          VB: Public Function CreateFuncUnity() As GameObject
        return:
          type: Global.GameObject
      overload: ZeroFramework.Utility.Example.PoolExample.CreateFuncUnity*
    - id: ZeroFramework.Utility.Example.PoolExample.ActionOnGet(GameObject)
      commentId: M:ZeroFramework.Utility.Example.PoolExample.ActionOnGet(GameObject)
      language: CSharp
      name:
        CSharp: ActionOnGet(GameObject)
        VB: ActionOnGet(GameObject)
      nameWithType:
        CSharp: PoolExample.ActionOnGet(GameObject)
        VB: PoolExample.ActionOnGet(GameObject)
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.ActionOnGet(GameObject)
        VB: ZeroFramework.Utility.Example.PoolExample.ActionOnGet(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: ActionOnGet
        path: ''
        startLine: 325
      syntax:
        content:
          CSharp: public void ActionOnGet(GameObject obj)
          VB: Public Sub ActionOnGet(obj As GameObject)
        parameters:
        - id: obj
          type: Global.GameObject
      overload: ZeroFramework.Utility.Example.PoolExample.ActionOnGet*
    - id: ZeroFramework.Utility.Example.PoolExample.ActionOnRelease(GameObject)
      commentId: M:ZeroFramework.Utility.Example.PoolExample.ActionOnRelease(GameObject)
      language: CSharp
      name:
        CSharp: ActionOnRelease(GameObject)
        VB: ActionOnRelease(GameObject)
      nameWithType:
        CSharp: PoolExample.ActionOnRelease(GameObject)
        VB: PoolExample.ActionOnRelease(GameObject)
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.ActionOnRelease(GameObject)
        VB: ZeroFramework.Utility.Example.PoolExample.ActionOnRelease(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: ActionOnRelease
        path: ''
        startLine: 330
      syntax:
        content:
          CSharp: public void ActionOnRelease(GameObject obj)
          VB: Public Sub ActionOnRelease(obj As GameObject)
        parameters:
        - id: obj
          type: Global.GameObject
      overload: ZeroFramework.Utility.Example.PoolExample.ActionOnRelease*
    - id: ZeroFramework.Utility.Example.PoolExample.ActionOnDestroy(GameObject)
      commentId: M:ZeroFramework.Utility.Example.PoolExample.ActionOnDestroy(GameObject)
      language: CSharp
      name:
        CSharp: ActionOnDestroy(GameObject)
        VB: ActionOnDestroy(GameObject)
      nameWithType:
        CSharp: PoolExample.ActionOnDestroy(GameObject)
        VB: PoolExample.ActionOnDestroy(GameObject)
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.PoolExample.ActionOnDestroy(GameObject)
        VB: ZeroFramework.Utility.Example.PoolExample.ActionOnDestroy(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: ActionOnDestroy
        path: ''
        startLine: 335
      syntax:
        content:
          CSharp: public void ActionOnDestroy(GameObject obj)
          VB: Public Sub ActionOnDestroy(obj As GameObject)
        parameters:
        - id: obj
          type: Global.GameObject
      overload: ZeroFramework.Utility.Example.PoolExample.ActionOnDestroy*
  - id: ZeroFramework.Utility.Example.SingletonExample
    commentId: T:ZeroFramework.Utility.Example.SingletonExample
    language: CSharp
    name:
      CSharp: SingletonExample
      VB: SingletonExample
    nameWithType:
      CSharp: SingletonExample
      VB: SingletonExample
    qualifiedName:
      CSharp: ZeroFramework.Utility.Example.SingletonExample
      VB: ZeroFramework.Utility.Example.SingletonExample
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility.Example
    source:
      id: SingletonExample
      path: ''
      startLine: 360
    syntax:
      content:
        CSharp: 'public class SingletonExample : MonoBehaviour'
        VB: Public Class SingletonExample Inherits MonoBehaviour
    inheritance:
    - System.Object
    items: []
  - id: ZeroFramework.Utility.Example.SingletonMonoExample
    commentId: T:ZeroFramework.Utility.Example.SingletonMonoExample
    language: CSharp
    name:
      CSharp: SingletonMonoExample
      VB: SingletonMonoExample
    nameWithType:
      CSharp: SingletonMonoExample
      VB: SingletonMonoExample
    qualifiedName:
      CSharp: ZeroFramework.Utility.Example.SingletonMonoExample
      VB: ZeroFramework.Utility.Example.SingletonMonoExample
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility.Example
    source:
      id: SingletonMonoExample
      path: ''
      startLine: 392
    syntax:
      content:
        CSharp: >-
          [MonoSingletonPathAttribute]

          public class SingletonMonoExample : SingletonMono<SingletonMonoExample>, ISingleton
        VB: >-
          <MonoSingletonPathAttribute>

          Public Class SingletonMonoExample Inherits SingletonMono(Of SingletonMonoExample) Implements ISingleton
    inheritance:
    - System.Object
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}
    implements:
    - ZeroFramework.ISingleton
    inheritedMembers:
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.mInstance
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Instance
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ID
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnApplicationQuit
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ResetID
    - ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.GetID
    items:
    - id: ZeroFramework.Utility.Example.SingletonMonoExample.OnSingletonInit
      commentId: M:ZeroFramework.Utility.Example.SingletonMonoExample.OnSingletonInit
      language: CSharp
      name:
        CSharp: OnSingletonInit()
        VB: OnSingletonInit()
      nameWithType:
        CSharp: SingletonMonoExample.OnSingletonInit()
        VB: SingletonMonoExample.OnSingletonInit()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.SingletonMonoExample.OnSingletonInit()
        VB: ZeroFramework.Utility.Example.SingletonMonoExample.OnSingletonInit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: OnSingletonInit
        path: ''
        startLine: 395
      syntax:
        content:
          CSharp: public override void OnSingletonInit()
          VB: Public Overrides Sub OnSingletonInit()
      overload: ZeroFramework.Utility.Example.SingletonMonoExample.OnSingletonInit*
      overridden: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnSingletonInit
    - id: ZeroFramework.Utility.Example.SingletonMonoExample.Dispose
      commentId: M:ZeroFramework.Utility.Example.SingletonMonoExample.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: SingletonMonoExample.Dispose()
        VB: SingletonMonoExample.Dispose()
      qualifiedName:
        CSharp: ZeroFramework.Utility.Example.SingletonMonoExample.Dispose()
        VB: ZeroFramework.Utility.Example.SingletonMonoExample.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Utility.Example
      source:
        id: Dispose
        path: ''
        startLine: 409
      syntax:
        content:
          CSharp: public override void Dispose()
          VB: Public Overrides Sub Dispose()
      overload: ZeroFramework.Utility.Example.SingletonMonoExample.Dispose*
      overridden: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Dispose
  - id: ZeroFramework.Utility.Example.TimerExample
    commentId: T:ZeroFramework.Utility.Example.TimerExample
    language: CSharp
    name:
      CSharp: TimerExample
      VB: TimerExample
    nameWithType:
      CSharp: TimerExample
      VB: TimerExample
    qualifiedName:
      CSharp: ZeroFramework.Utility.Example.TimerExample
      VB: ZeroFramework.Utility.Example.TimerExample
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility.Example
    source:
      id: TimerExample
      path: ''
      startLine: 431
    syntax:
      content:
        CSharp: 'public class TimerExample : MonoBehaviour'
        VB: Public Class TimerExample Inherits MonoBehaviour
    inheritance:
    - System.Object
    items: []
  - id: ZeroFramework.Utility.Example.TimestampExample
    commentId: T:ZeroFramework.Utility.Example.TimestampExample
    language: CSharp
    name:
      CSharp: TimestampExample
      VB: TimestampExample
    nameWithType:
      CSharp: TimestampExample
      VB: TimestampExample
    qualifiedName:
      CSharp: ZeroFramework.Utility.Example.TimestampExample
      VB: ZeroFramework.Utility.Example.TimestampExample
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Utility.Example
    source:
      id: TimestampExample
      path: ''
      startLine: 461
    syntax:
      content:
        CSharp: 'public class TimestampExample : MonoBehaviour'
        VB: Public Class TimestampExample Inherits MonoBehaviour
    inheritance:
    - System.Object
    items: []
- id: ZeroFramework.Editor
  commentId: N:ZeroFramework.Editor
  language: CSharp
  name:
    CSharp: ZeroFramework.Editor
    VB: ZeroFramework.Editor
  nameWithType:
    CSharp: ZeroFramework.Editor
    VB: ZeroFramework.Editor
  qualifiedName:
    CSharp: ZeroFramework.Editor
    VB: ZeroFramework.Editor
  type: Namespace
  assemblies:
  - cs.temp.dll
  items:
  - id: ZeroFramework.Editor.ZeroEditorArchitecture
    commentId: T:ZeroFramework.Editor.ZeroEditorArchitecture
    language: CSharp
    name:
      CSharp: ZeroEditorArchitecture
      VB: ZeroEditorArchitecture
    nameWithType:
      CSharp: ZeroEditorArchitecture
      VB: ZeroEditorArchitecture
    qualifiedName:
      CSharp: ZeroFramework.Editor.ZeroEditorArchitecture
      VB: ZeroFramework.Editor.ZeroEditorArchitecture
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Editor
    source:
      id: ZeroEditorArchitecture
      path: ''
      startLine: 505
    syntax:
      content:
        CSharp: 'public class ZeroEditorArchitecture : Architecture<ZeroEditorArchitecture>, IArchitecture'
        VB: Public Class ZeroEditorArchitecture Inherits Architecture(Of ZeroEditorArchitecture) Implements IArchitecture
    inheritance:
    - System.Object
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    implements:
    - ZeroFramework.IArchitecture
    inheritedMembers:
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Initialized
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Interface
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Deinit
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.OnDeinit
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1({TSystem})
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1({TModel})
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1({TUtility})
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterSystem``1
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterModel``1
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterUtility``1
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetSystem``1
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetModel``1
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetUtility``1
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(ZeroFramework.ICommand{{TResult}})
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1({TCommand})
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{{TResult}})
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendQuery``1(ZeroFramework.IQuery{{TResult}})
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.DoQuery``1(ZeroFramework.IQuery{{TResult}})
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1({TEvent})
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterEvent``1(Action{{TEvent}})
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1(Action{{TEvent}})
    - ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1
    items:
    - id: ZeroFramework.Editor.ZeroEditorArchitecture.Init
      commentId: M:ZeroFramework.Editor.ZeroEditorArchitecture.Init
      language: CSharp
      name:
        CSharp: Init()
        VB: Init()
      nameWithType:
        CSharp: ZeroEditorArchitecture.Init()
        VB: ZeroEditorArchitecture.Init()
      qualifiedName:
        CSharp: ZeroFramework.Editor.ZeroEditorArchitecture.Init()
        VB: ZeroFramework.Editor.ZeroEditorArchitecture.Init()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Editor
      source:
        id: Init
        path: ''
        startLine: 507
      syntax:
        content:
          CSharp: protected override void Init()
          VB: Protected Overrides Sub Init()
      overload: ZeroFramework.Editor.ZeroEditorArchitecture.Init*
      overridden: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Init
  - id: ZeroFramework.Editor.ZeroMenuEditorWindow
    commentId: T:ZeroFramework.Editor.ZeroMenuEditorWindow
    language: CSharp
    name:
      CSharp: ZeroMenuEditorWindow
      VB: ZeroMenuEditorWindow
    nameWithType:
      CSharp: ZeroMenuEditorWindow
      VB: ZeroMenuEditorWindow
    qualifiedName:
      CSharp: ZeroFramework.Editor.ZeroMenuEditorWindow
      VB: ZeroFramework.Editor.ZeroMenuEditorWindow
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Editor
    source:
      id: ZeroMenuEditorWindow
      path: ''
      startLine: 634
    syntax:
      content:
        CSharp: public class ZeroMenuEditorWindow
        VB: Public Class ZeroMenuEditorWindow
    inheritance:
    - System.Object
    items: []
- id: ZeroFramework.Core
  commentId: N:ZeroFramework.Core
  language: CSharp
  name:
    CSharp: ZeroFramework.Core
    VB: ZeroFramework.Core
  nameWithType:
    CSharp: ZeroFramework.Core
    VB: ZeroFramework.Core
  qualifiedName:
    CSharp: ZeroFramework.Core
    VB: ZeroFramework.Core
  type: Namespace
  assemblies:
  - cs.temp.dll
  items:
  - id: ZeroFramework.Core.BranchDialogue
    commentId: T:ZeroFramework.Core.BranchDialogue
    language: CSharp
    name:
      CSharp: BranchDialogue
      VB: BranchDialogue
    nameWithType:
      CSharp: BranchDialogue
      VB: BranchDialogue
    qualifiedName:
      CSharp: ZeroFramework.Core.BranchDialogue
      VB: ZeroFramework.Core.BranchDialogue
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Core
    source:
      id: BranchDialogue
      path: ''
      startLine: 2555
    syntax:
      content:
        CSharp: 'public class BranchDialogue : Many2ManyNode'
        VB: Public Class BranchDialogue Inherits Many2ManyNode
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Core.BranchDialogue.OnUpdate
      commentId: M:ZeroFramework.Core.BranchDialogue.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: BranchDialogue.OnUpdate()
        VB: BranchDialogue.OnUpdate()
      qualifiedName:
        CSharp: ZeroFramework.Core.BranchDialogue.OnUpdate()
        VB: ZeroFramework.Core.BranchDialogue.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: OnUpdate
        path: ''
        startLine: 2557
      syntax:
        content:
          CSharp: protected override Node OnUpdate()
          VB: Protected Overrides Function OnUpdate() As Node
        return:
          type: Global.Node
      overload: ZeroFramework.Core.BranchDialogue.OnUpdate*
    - id: ZeroFramework.Core.BranchDialogue.OnStart
      commentId: M:ZeroFramework.Core.BranchDialogue.OnStart
      language: CSharp
      name:
        CSharp: OnStart()
        VB: OnStart()
      nameWithType:
        CSharp: BranchDialogue.OnStart()
        VB: BranchDialogue.OnStart()
      qualifiedName:
        CSharp: ZeroFramework.Core.BranchDialogue.OnStart()
        VB: ZeroFramework.Core.BranchDialogue.OnStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: OnStart
        path: ''
        startLine: 2562
      syntax:
        content:
          CSharp: protected override void OnStart()
          VB: Protected Overrides Sub OnStart()
      overload: ZeroFramework.Core.BranchDialogue.OnStart*
    - id: ZeroFramework.Core.BranchDialogue.OnStop
      commentId: M:ZeroFramework.Core.BranchDialogue.OnStop
      language: CSharp
      name:
        CSharp: OnStop()
        VB: OnStop()
      nameWithType:
        CSharp: BranchDialogue.OnStop()
        VB: BranchDialogue.OnStop()
      qualifiedName:
        CSharp: ZeroFramework.Core.BranchDialogue.OnStop()
        VB: ZeroFramework.Core.BranchDialogue.OnStop()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: OnStop
        path: ''
        startLine: 2567
      syntax:
        content:
          CSharp: protected override void OnStop()
          VB: Protected Overrides Sub OnStop()
      overload: ZeroFramework.Core.BranchDialogue.OnStop*
  - id: ZeroFramework.Core.DialogueTree
    commentId: T:ZeroFramework.Core.DialogueTree
    language: CSharp
    name:
      CSharp: DialogueTree
      VB: DialogueTree
    nameWithType:
      CSharp: DialogueTree
      VB: DialogueTree
    qualifiedName:
      CSharp: ZeroFramework.Core.DialogueTree
      VB: ZeroFramework.Core.DialogueTree
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Core
    source:
      id: DialogueTree
      path: ''
      startLine: 2588
    syntax:
      content:
        CSharp: 'public class DialogueTree : NodeTree'
        VB: Public Class DialogueTree Inherits NodeTree
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Core.DialogueTree.Update
      commentId: M:ZeroFramework.Core.DialogueTree.Update
      language: CSharp
      name:
        CSharp: Update()
        VB: Update()
      nameWithType:
        CSharp: DialogueTree.Update()
        VB: DialogueTree.Update()
      qualifiedName:
        CSharp: ZeroFramework.Core.DialogueTree.Update()
        VB: ZeroFramework.Core.DialogueTree.Update()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: Update
        path: ''
        startLine: 2591
      syntax:
        content:
          CSharp: public override void Update()
          VB: Public Overrides Sub Update()
      overload: ZeroFramework.Core.DialogueTree.Update*
    - id: ZeroFramework.Core.DialogueTree.TreeStart
      commentId: M:ZeroFramework.Core.DialogueTree.TreeStart
      language: CSharp
      name:
        CSharp: TreeStart()
        VB: TreeStart()
      nameWithType:
        CSharp: DialogueTree.TreeStart()
        VB: DialogueTree.TreeStart()
      qualifiedName:
        CSharp: ZeroFramework.Core.DialogueTree.TreeStart()
        VB: ZeroFramework.Core.DialogueTree.TreeStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: TreeStart
        path: ''
        startLine: 2595
      syntax:
        content:
          CSharp: public override void TreeStart()
          VB: Public Overrides Sub TreeStart()
      overload: ZeroFramework.Core.DialogueTree.TreeStart*
    - id: ZeroFramework.Core.DialogueTree.TreeEnd
      commentId: M:ZeroFramework.Core.DialogueTree.TreeEnd
      language: CSharp
      name:
        CSharp: TreeEnd()
        VB: TreeEnd()
      nameWithType:
        CSharp: DialogueTree.TreeEnd()
        VB: DialogueTree.TreeEnd()
      qualifiedName:
        CSharp: ZeroFramework.Core.DialogueTree.TreeEnd()
        VB: ZeroFramework.Core.DialogueTree.TreeEnd()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: TreeEnd
        path: ''
        startLine: 2599
      syntax:
        content:
          CSharp: public override void TreeEnd()
          VB: Public Overrides Sub TreeEnd()
      overload: ZeroFramework.Core.DialogueTree.TreeEnd*
  - id: ZeroFramework.Core.SingleDialogue
    commentId: T:ZeroFramework.Core.SingleDialogue
    language: CSharp
    name:
      CSharp: SingleDialogue
      VB: SingleDialogue
    nameWithType:
      CSharp: SingleDialogue
      VB: SingleDialogue
    qualifiedName:
      CSharp: ZeroFramework.Core.SingleDialogue
      VB: ZeroFramework.Core.SingleDialogue
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Core
    source:
      id: SingleDialogue
      path: ''
      startLine: 2620
    syntax:
      content:
        CSharp: 'public class SingleDialogue : Single2SingleNode'
        VB: Public Class SingleDialogue Inherits Single2SingleNode
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Core.SingleDialogue.content
      commentId: F:ZeroFramework.Core.SingleDialogue.content
      language: CSharp
      name:
        CSharp: content
        VB: content
      nameWithType:
        CSharp: SingleDialogue.content
        VB: SingleDialogue.content
      qualifiedName:
        CSharp: ZeroFramework.Core.SingleDialogue.content
        VB: ZeroFramework.Core.SingleDialogue.content
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: content
        path: ''
        startLine: 2622
      syntax:
        content:
          CSharp: public string content
          VB: Public content As String
        return:
          type: System.String
    - id: ZeroFramework.Core.SingleDialogue.OnUpdate
      commentId: M:ZeroFramework.Core.SingleDialogue.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: SingleDialogue.OnUpdate()
        VB: SingleDialogue.OnUpdate()
      qualifiedName:
        CSharp: ZeroFramework.Core.SingleDialogue.OnUpdate()
        VB: ZeroFramework.Core.SingleDialogue.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: OnUpdate
        path: ''
        startLine: 2623
      syntax:
        content:
          CSharp: protected override Node OnUpdate()
          VB: Protected Overrides Function OnUpdate() As Node
        return:
          type: Global.Node
      overload: ZeroFramework.Core.SingleDialogue.OnUpdate*
    - id: ZeroFramework.Core.SingleDialogue.OnStart
      commentId: M:ZeroFramework.Core.SingleDialogue.OnStart
      language: CSharp
      name:
        CSharp: OnStart()
        VB: OnStart()
      nameWithType:
        CSharp: SingleDialogue.OnStart()
        VB: SingleDialogue.OnStart()
      qualifiedName:
        CSharp: ZeroFramework.Core.SingleDialogue.OnStart()
        VB: ZeroFramework.Core.SingleDialogue.OnStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: OnStart
        path: ''
        startLine: 2633
      syntax:
        content:
          CSharp: protected override void OnStart()
          VB: Protected Overrides Sub OnStart()
      overload: ZeroFramework.Core.SingleDialogue.OnStart*
    - id: ZeroFramework.Core.SingleDialogue.OnStop
      commentId: M:ZeroFramework.Core.SingleDialogue.OnStop
      language: CSharp
      name:
        CSharp: OnStop()
        VB: OnStop()
      nameWithType:
        CSharp: SingleDialogue.OnStop()
        VB: SingleDialogue.OnStop()
      qualifiedName:
        CSharp: ZeroFramework.Core.SingleDialogue.OnStop()
        VB: ZeroFramework.Core.SingleDialogue.OnStop()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: OnStop
        path: ''
        startLine: 2638
      syntax:
        content:
          CSharp: protected override void OnStop()
          VB: Protected Overrides Sub OnStop()
      overload: ZeroFramework.Core.SingleDialogue.OnStop*
  - id: ZeroFramework.Core.ResMethodType
    commentId: T:ZeroFramework.Core.ResMethodType
    language: CSharp
    name:
      CSharp: ResMethodType
      VB: ResMethodType
    nameWithType:
      CSharp: ResMethodType
      VB: ResMethodType
    qualifiedName:
      CSharp: ZeroFramework.Core.ResMethodType
      VB: ZeroFramework.Core.ResMethodType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Core
    source:
      id: ResMethodType
      path: ''
      startLine: 2655
    syntax:
      content:
        CSharp: public enum ResMethodType
        VB: Public Enum ResMethodType
    items:
    - id: ZeroFramework.Core.ResMethodType.Resources
      commentId: F:ZeroFramework.Core.ResMethodType.Resources
      language: CSharp
      name:
        CSharp: Resources
        VB: Resources
      nameWithType:
        CSharp: ResMethodType.Resources
        VB: ResMethodType.Resources
      qualifiedName:
        CSharp: ZeroFramework.Core.ResMethodType.Resources
        VB: ZeroFramework.Core.ResMethodType.Resources
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: Resources
        path: ''
        startLine: 2657
      syntax:
        content:
          CSharp: Resources = 0
          VB: Resources = 0
        return:
          type: ZeroFramework.Core.ResMethodType
    - id: ZeroFramework.Core.ResMethodType.AssetBundle
      commentId: F:ZeroFramework.Core.ResMethodType.AssetBundle
      language: CSharp
      name:
        CSharp: AssetBundle
        VB: AssetBundle
      nameWithType:
        CSharp: ResMethodType.AssetBundle
        VB: ResMethodType.AssetBundle
      qualifiedName:
        CSharp: ZeroFramework.Core.ResMethodType.AssetBundle
        VB: ZeroFramework.Core.ResMethodType.AssetBundle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: AssetBundle
        path: ''
        startLine: 2658
      syntax:
        content:
          CSharp: AssetBundle = 1
          VB: AssetBundle = 1
        return:
          type: ZeroFramework.Core.ResMethodType
    - id: ZeroFramework.Core.ResMethodType.Addressable
      commentId: F:ZeroFramework.Core.ResMethodType.Addressable
      language: CSharp
      name:
        CSharp: Addressable
        VB: Addressable
      nameWithType:
        CSharp: ResMethodType.Addressable
        VB: ResMethodType.Addressable
      qualifiedName:
        CSharp: ZeroFramework.Core.ResMethodType.Addressable
        VB: ZeroFramework.Core.ResMethodType.Addressable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: Addressable
        path: ''
        startLine: 2659
      syntax:
        content:
          CSharp: Addressable = 2
          VB: Addressable = 2
        return:
          type: ZeroFramework.Core.ResMethodType
    - id: ZeroFramework.Core.ResMethodType.UnityWebRequest
      commentId: F:ZeroFramework.Core.ResMethodType.UnityWebRequest
      language: CSharp
      name:
        CSharp: UnityWebRequest
        VB: UnityWebRequest
      nameWithType:
        CSharp: ResMethodType.UnityWebRequest
        VB: ResMethodType.UnityWebRequest
      qualifiedName:
        CSharp: ZeroFramework.Core.ResMethodType.UnityWebRequest
        VB: ZeroFramework.Core.ResMethodType.UnityWebRequest
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: UnityWebRequest
        path: ''
        startLine: 2660
      syntax:
        content:
          CSharp: UnityWebRequest = 3
          VB: UnityWebRequest = 3
        return:
          type: ZeroFramework.Core.ResMethodType
    - id: ZeroFramework.Core.ResMethodType.AssetDatabase
      commentId: F:ZeroFramework.Core.ResMethodType.AssetDatabase
      language: CSharp
      name:
        CSharp: AssetDatabase
        VB: AssetDatabase
      nameWithType:
        CSharp: ResMethodType.AssetDatabase
        VB: ResMethodType.AssetDatabase
      qualifiedName:
        CSharp: ZeroFramework.Core.ResMethodType.AssetDatabase
        VB: ZeroFramework.Core.ResMethodType.AssetDatabase
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: AssetDatabase
        path: ''
        startLine: 2661
      syntax:
        content:
          CSharp: AssetDatabase = 4
          VB: AssetDatabase = 4
        return:
          type: ZeroFramework.Core.ResMethodType
    - id: ZeroFramework.Core.ResMethodType.Custom
      commentId: F:ZeroFramework.Core.ResMethodType.Custom
      language: CSharp
      name:
        CSharp: Custom
        VB: Custom
      nameWithType:
        CSharp: ResMethodType.Custom
        VB: ResMethodType.Custom
      qualifiedName:
        CSharp: ZeroFramework.Core.ResMethodType.Custom
        VB: ZeroFramework.Core.ResMethodType.Custom
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: Custom
        path: ''
        startLine: 2662
      syntax:
        content:
          CSharp: Custom = 5
          VB: Custom = 5
        return:
          type: ZeroFramework.Core.ResMethodType
  - id: ZeroFramework.Core.ResSearchKey
    commentId: T:ZeroFramework.Core.ResSearchKey
    language: CSharp
    name:
      CSharp: ResSearchKey
      VB: ResSearchKey
    nameWithType:
      CSharp: ResSearchKey
      VB: ResSearchKey
    qualifiedName:
      CSharp: ZeroFramework.Core.ResSearchKey
      VB: ZeroFramework.Core.ResSearchKey
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Core
    source:
      id: ResSearchKey
      path: ''
      startLine: 2665
    syntax:
      content:
        CSharp: public class ResSearchKey
        VB: Public Class ResSearchKey
    inheritance:
    - System.Object
    items:
    - id: ZeroFramework.Core.ResSearchKey.type
      commentId: F:ZeroFramework.Core.ResSearchKey.type
      language: CSharp
      name:
        CSharp: type
        VB: type
      nameWithType:
        CSharp: ResSearchKey.type
        VB: ResSearchKey.type
      qualifiedName:
        CSharp: ZeroFramework.Core.ResSearchKey.type
        VB: ZeroFramework.Core.ResSearchKey.type
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: type
        path: ''
        startLine: 2667
      syntax:
        content:
          CSharp: public ResMethodType type
          VB: Public type As ResMethodType
        return:
          type: ZeroFramework.Core.ResMethodType
    - id: ZeroFramework.Core.ResSearchKey.assetName
      commentId: F:ZeroFramework.Core.ResSearchKey.assetName
      language: CSharp
      name:
        CSharp: assetName
        VB: assetName
      nameWithType:
        CSharp: ResSearchKey.assetName
        VB: ResSearchKey.assetName
      qualifiedName:
        CSharp: ZeroFramework.Core.ResSearchKey.assetName
        VB: ZeroFramework.Core.ResSearchKey.assetName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: assetName
        path: ''
        startLine: 2668
      syntax:
        content:
          CSharp: public string assetName
          VB: Public assetName As String
        return:
          type: System.String
  - id: ZeroFramework.Core.ResourcesLoaderCreator
    commentId: T:ZeroFramework.Core.ResourcesLoaderCreator
    language: CSharp
    name:
      CSharp: ResourcesLoaderCreator
      VB: ResourcesLoaderCreator
    nameWithType:
      CSharp: ResourcesLoaderCreator
      VB: ResourcesLoaderCreator
    qualifiedName:
      CSharp: ZeroFramework.Core.ResourcesLoaderCreator
      VB: ZeroFramework.Core.ResourcesLoaderCreator
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Core
    source:
      id: ResourcesLoaderCreator
      path: ''
      startLine: 2681
    syntax:
      content:
        CSharp: 'public class ResourcesLoaderCreator : IResLoaderCreator'
        VB: Public Class ResourcesLoaderCreator Implements IResLoaderCreator
    inheritance:
    - System.Object
    implements:
    - ZeroFramework.Core.IResLoaderCreator
    items:
    - id: ZeroFramework.Core.ResourcesLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
      commentId: M:ZeroFramework.Core.ResourcesLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
      language: CSharp
      name:
        CSharp: Match(ResSearchKey)
        VB: Match(ResSearchKey)
      nameWithType:
        CSharp: ResourcesLoaderCreator.Match(ResSearchKey)
        VB: ResourcesLoaderCreator.Match(ResSearchKey)
      qualifiedName:
        CSharp: ZeroFramework.Core.ResourcesLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
        VB: ZeroFramework.Core.ResourcesLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: Match
        path: ''
        startLine: 2683
      syntax:
        content:
          CSharp: public bool Match(ResSearchKey resSearchKey)
          VB: Public Function Match(resSearchKey As ResSearchKey) As Boolean
        parameters:
        - id: resSearchKey
          type: ZeroFramework.Core.ResSearchKey
        return:
          type: System.Boolean
      overload: ZeroFramework.Core.ResourcesLoaderCreator.Match*
      implements:
      - ZeroFramework.Core.IResLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
    - id: ZeroFramework.Core.ResourcesLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
      commentId: M:ZeroFramework.Core.ResourcesLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
      language: CSharp
      name:
        CSharp: Create(ResSearchKey)
        VB: Create(ResSearchKey)
      nameWithType:
        CSharp: ResourcesLoaderCreator.Create(ResSearchKey)
        VB: ResourcesLoaderCreator.Create(ResSearchKey)
      qualifiedName:
        CSharp: ZeroFramework.Core.ResourcesLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
        VB: ZeroFramework.Core.ResourcesLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: Create
        path: ''
        startLine: 2688
      syntax:
        content:
          CSharp: public IResLoaderCreator Create(ResSearchKey resSearchKey)
          VB: Public Function Create(resSearchKey As ResSearchKey) As IResLoaderCreator
        parameters:
        - id: resSearchKey
          type: ZeroFramework.Core.ResSearchKey
        return:
          type: ZeroFramework.Core.IResLoaderCreator
      overload: ZeroFramework.Core.ResourcesLoaderCreator.Create*
      implements:
      - ZeroFramework.Core.IResLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
  - id: ZeroFramework.Core.IResLoader
    commentId: T:ZeroFramework.Core.IResLoader
    language: CSharp
    name:
      CSharp: IResLoader
      VB: IResLoader
    nameWithType:
      CSharp: IResLoader
      VB: IResLoader
    qualifiedName:
      CSharp: ZeroFramework.Core.IResLoader
      VB: ZeroFramework.Core.IResLoader
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Core
    source:
      id: IResLoader
      path: ''
      startLine: 2706
    syntax:
      content:
        CSharp: public interface IResLoader
        VB: Public Interface IResLoader
    items:
    - id: ZeroFramework.Core.IResLoader.LoadSync``1(ZeroFramework.Core.ResSearchKey)
      commentId: M:ZeroFramework.Core.IResLoader.LoadSync``1(ZeroFramework.Core.ResSearchKey)
      language: CSharp
      name:
        CSharp: LoadSync<T>(ResSearchKey)
        VB: LoadSync(Of T)(ResSearchKey)
      nameWithType:
        CSharp: IResLoader.LoadSync<T>(ResSearchKey)
        VB: IResLoader.LoadSync(Of T)(ResSearchKey)
      qualifiedName:
        CSharp: ZeroFramework.Core.IResLoader.LoadSync<T>(ZeroFramework.Core.ResSearchKey)
        VB: ZeroFramework.Core.IResLoader.LoadSync(Of T)(ZeroFramework.Core.ResSearchKey)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: LoadSync
        path: ''
        startLine: 2708
      syntax:
        content:
          CSharp: T LoadSync<T>(ResSearchKey researchKey)
          VB: Function LoadSync(Of T)(researchKey As ResSearchKey) As T
        parameters:
        - id: researchKey
          type: ZeroFramework.Core.ResSearchKey
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: ZeroFramework.Core.IResLoader.LoadSync*
    - id: ZeroFramework.Core.IResLoader.LoadSync(ZeroFramework.Core.ResSearchKey,Type)
      commentId: M:ZeroFramework.Core.IResLoader.LoadSync(ZeroFramework.Core.ResSearchKey,Type)
      language: CSharp
      name:
        CSharp: LoadSync(ResSearchKey, Type)
        VB: LoadSync(ResSearchKey, Type)
      nameWithType:
        CSharp: IResLoader.LoadSync(ResSearchKey, Type)
        VB: IResLoader.LoadSync(ResSearchKey, Type)
      qualifiedName:
        CSharp: ZeroFramework.Core.IResLoader.LoadSync(ZeroFramework.Core.ResSearchKey, Type)
        VB: ZeroFramework.Core.IResLoader.LoadSync(ZeroFramework.Core.ResSearchKey, Type)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: LoadSync
        path: ''
        startLine: 2710
      syntax:
        content:
          CSharp: object LoadSync(ResSearchKey researchKey, Type type)
          VB: Function LoadSync(researchKey As ResSearchKey, type As Type) As Object
        parameters:
        - id: researchKey
          type: ZeroFramework.Core.ResSearchKey
        - id: type
          type: Global.Type
        return:
          type: System.Object
      overload: ZeroFramework.Core.IResLoader.LoadSync*
    - id: ZeroFramework.Core.IResLoader.LoadAsync``1(ZeroFramework.Core.ResSearchKey,Action{``0})
      commentId: M:ZeroFramework.Core.IResLoader.LoadAsync``1(ZeroFramework.Core.ResSearchKey,Action{``0})
      language: CSharp
      name:
        CSharp: LoadAsync<T>(ResSearchKey, Action<T>)
        VB: LoadAsync(Of T)(ResSearchKey, Action(Of T))
      nameWithType:
        CSharp: IResLoader.LoadAsync<T>(ResSearchKey, Action<T>)
        VB: IResLoader.LoadAsync(Of T)(ResSearchKey, Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.Core.IResLoader.LoadAsync<T>(ZeroFramework.Core.ResSearchKey, Action<T>)
        VB: ZeroFramework.Core.IResLoader.LoadAsync(Of T)(ZeroFramework.Core.ResSearchKey, Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: LoadAsync
        path: ''
        startLine: 2712
      syntax:
        content:
          CSharp: void LoadAsync<T>(ResSearchKey researchKey, Action<T> callback)
          VB: Sub LoadAsync(Of T)(researchKey As ResSearchKey, callback As Action(Of T))
        parameters:
        - id: researchKey
          type: ZeroFramework.Core.ResSearchKey
        - id: callback
          type: Global.Action{{T}}
        typeParameters:
        - id: T
      overload: ZeroFramework.Core.IResLoader.LoadAsync*
    - id: ZeroFramework.Core.IResLoader.LoadAsync(ZeroFramework.Core.ResSearchKey,Type,Action{System.Object})
      commentId: M:ZeroFramework.Core.IResLoader.LoadAsync(ZeroFramework.Core.ResSearchKey,Type,Action{System.Object})
      language: CSharp
      name:
        CSharp: LoadAsync(ResSearchKey, Type, Action<object>)
        VB: LoadAsync(ResSearchKey, Type, Action(Of Object))
      nameWithType:
        CSharp: IResLoader.LoadAsync(ResSearchKey, Type, Action<object>)
        VB: IResLoader.LoadAsync(ResSearchKey, Type, Action(Of Object))
      qualifiedName:
        CSharp: ZeroFramework.Core.IResLoader.LoadAsync(ZeroFramework.Core.ResSearchKey, Type, Action<object>)
        VB: ZeroFramework.Core.IResLoader.LoadAsync(ZeroFramework.Core.ResSearchKey, Type, Action(Of Object))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: LoadAsync
        path: ''
        startLine: 2714
      syntax:
        content:
          CSharp: void LoadAsync(ResSearchKey researchKey, Type type, Action<object> callback)
          VB: Sub LoadAsync(researchKey As ResSearchKey, type As Type, callback As Action(Of Object))
        parameters:
        - id: researchKey
          type: ZeroFramework.Core.ResSearchKey
        - id: type
          type: Global.Type
        - id: callback
          type: Global.Action{System.Object}
      overload: ZeroFramework.Core.IResLoader.LoadAsync*
  - id: ZeroFramework.Core.IResLoaderCreator
    commentId: T:ZeroFramework.Core.IResLoaderCreator
    language: CSharp
    name:
      CSharp: IResLoaderCreator
      VB: IResLoaderCreator
    nameWithType:
      CSharp: IResLoaderCreator
      VB: IResLoaderCreator
    qualifiedName:
      CSharp: ZeroFramework.Core.IResLoaderCreator
      VB: ZeroFramework.Core.IResLoaderCreator
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Core
    source:
      id: IResLoaderCreator
      path: ''
      startLine: 2727
    syntax:
      content:
        CSharp: public interface IResLoaderCreator
        VB: Public Interface IResLoaderCreator
    items:
    - id: ZeroFramework.Core.IResLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
      commentId: M:ZeroFramework.Core.IResLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
      language: CSharp
      name:
        CSharp: Match(ResSearchKey)
        VB: Match(ResSearchKey)
      nameWithType:
        CSharp: IResLoaderCreator.Match(ResSearchKey)
        VB: IResLoaderCreator.Match(ResSearchKey)
      qualifiedName:
        CSharp: ZeroFramework.Core.IResLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
        VB: ZeroFramework.Core.IResLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: Match
        path: ''
        startLine: 2729
      syntax:
        content:
          CSharp: bool Match(ResSearchKey resSearchKeys)
          VB: Function Match(resSearchKeys As ResSearchKey) As Boolean
        parameters:
        - id: resSearchKeys
          type: ZeroFramework.Core.ResSearchKey
        return:
          type: System.Boolean
      overload: ZeroFramework.Core.IResLoaderCreator.Match*
    - id: ZeroFramework.Core.IResLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
      commentId: M:ZeroFramework.Core.IResLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
      language: CSharp
      name:
        CSharp: Create(ResSearchKey)
        VB: Create(ResSearchKey)
      nameWithType:
        CSharp: IResLoaderCreator.Create(ResSearchKey)
        VB: IResLoaderCreator.Create(ResSearchKey)
      qualifiedName:
        CSharp: ZeroFramework.Core.IResLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
        VB: ZeroFramework.Core.IResLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: Create
        path: ''
        startLine: 2731
      syntax:
        content:
          CSharp: IResLoaderCreator Create(ResSearchKey resSearchKeys)
          VB: Function Create(resSearchKeys As ResSearchKey) As IResLoaderCreator
        parameters:
        - id: resSearchKeys
          type: ZeroFramework.Core.ResSearchKey
        return:
          type: ZeroFramework.Core.IResLoaderCreator
      overload: ZeroFramework.Core.IResLoaderCreator.Create*
  - id: ZeroFramework.Core.IResSystem
    commentId: T:ZeroFramework.Core.IResSystem
    language: CSharp
    name:
      CSharp: IResSystem
      VB: IResSystem
    nameWithType:
      CSharp: IResSystem
      VB: IResSystem
    qualifiedName:
      CSharp: ZeroFramework.Core.IResSystem
      VB: ZeroFramework.Core.IResSystem
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Core
    source:
      id: IResSystem
      path: ''
      startLine: 2749
    syntax:
      content:
        CSharp: 'public interface IResSystem : ISystem, ICanSetArchitecture, ICanGetModel, ICanGetUtility, ICanRegisterEvent, ICanSendEvent, ICanGetSystem, IBelongToArchitecture, ICanInit'
        VB: Public Interface IResSystem Inherits ISystem, ICanSetArchitecture, ICanGetModel, ICanGetUtility, ICanRegisterEvent, ICanSendEvent, ICanGetSystem, IBelongToArchitecture, ICanInit
    inheritedMembers:
    - ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
    - ZeroFramework.IBelongToArchitecture.GetArchitecture
    - ZeroFramework.ICanInit.Initialized
    - ZeroFramework.ICanInit.Init
    - ZeroFramework.ICanInit.Deinit
    items:
    - id: ZeroFramework.Core.IResSystem.AllocateSearchKey(System.String)
      commentId: M:ZeroFramework.Core.IResSystem.AllocateSearchKey(System.String)
      language: CSharp
      name:
        CSharp: AllocateSearchKey(string)
        VB: AllocateSearchKey(String)
      nameWithType:
        CSharp: IResSystem.AllocateSearchKey(string)
        VB: IResSystem.AllocateSearchKey(String)
      qualifiedName:
        CSharp: ZeroFramework.Core.IResSystem.AllocateSearchKey(string)
        VB: ZeroFramework.Core.IResSystem.AllocateSearchKey(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: AllocateSearchKey
        path: ''
        startLine: 2751
      syntax:
        content:
          CSharp: ResSearchKey AllocateSearchKey(string url)
          VB: Function AllocateSearchKey(url As String) As ResSearchKey
        parameters:
        - id: url
          type: System.String
        return:
          type: ZeroFramework.Core.ResSearchKey
      overload: ZeroFramework.Core.IResSystem.AllocateSearchKey*
    - id: ZeroFramework.Core.IResSystem.AddLoadQueue``1(ZeroFramework.Core.ResSearchKey,Action{``0})
      commentId: M:ZeroFramework.Core.IResSystem.AddLoadQueue``1(ZeroFramework.Core.ResSearchKey,Action{``0})
      language: CSharp
      name:
        CSharp: AddLoadQueue<T>(ResSearchKey, Action<T>)
        VB: AddLoadQueue(Of T)(ResSearchKey, Action(Of T))
      nameWithType:
        CSharp: IResSystem.AddLoadQueue<T>(ResSearchKey, Action<T>)
        VB: IResSystem.AddLoadQueue(Of T)(ResSearchKey, Action(Of T))
      qualifiedName:
        CSharp: ZeroFramework.Core.IResSystem.AddLoadQueue<T>(ZeroFramework.Core.ResSearchKey, Action<T>)
        VB: ZeroFramework.Core.IResSystem.AddLoadQueue(Of T)(ZeroFramework.Core.ResSearchKey, Action(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: AddLoadQueue
        path: ''
        startLine: 2753
      syntax:
        content:
          CSharp: void AddLoadQueue<T>(ResSearchKey researchKey, Action<T> callback)
          VB: Sub AddLoadQueue(Of T)(researchKey As ResSearchKey, callback As Action(Of T))
        parameters:
        - id: researchKey
          type: ZeroFramework.Core.ResSearchKey
        - id: callback
          type: Global.Action{{T}}
        typeParameters:
        - id: T
      overload: ZeroFramework.Core.IResSystem.AddLoadQueue*
    - id: ZeroFramework.Core.IResSystem.LoadQueueAsync(Func{System.Single})
      commentId: M:ZeroFramework.Core.IResSystem.LoadQueueAsync(Func{System.Single})
      language: CSharp
      name:
        CSharp: LoadQueueAsync(Func<float>)
        VB: LoadQueueAsync(Func(Of Single))
      nameWithType:
        CSharp: IResSystem.LoadQueueAsync(Func<float>)
        VB: IResSystem.LoadQueueAsync(Func(Of Single))
      qualifiedName:
        CSharp: ZeroFramework.Core.IResSystem.LoadQueueAsync(Func<float>)
        VB: ZeroFramework.Core.IResSystem.LoadQueueAsync(Func(Of Single))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Core
      source:
        id: LoadQueueAsync
        path: ''
        startLine: 2755
      syntax:
        content:
          CSharp: void LoadQueueAsync(Func<float> progressCallback)
          VB: Sub LoadQueueAsync(progressCallback As Func(Of Single))
        parameters:
        - id: progressCallback
          type: Global.Func{System.Single}
      overload: ZeroFramework.Core.IResSystem.LoadQueueAsync*
- id: ZeroFramework.Extension
  commentId: N:ZeroFramework.Extension
  language: CSharp
  name:
    CSharp: ZeroFramework.Extension
    VB: ZeroFramework.Extension
  nameWithType:
    CSharp: ZeroFramework.Extension
    VB: ZeroFramework.Extension
  qualifiedName:
    CSharp: ZeroFramework.Extension
    VB: ZeroFramework.Extension
  type: Namespace
  assemblies:
  - cs.temp.dll
  items:
  - id: ZeroFramework.Extension.UniTaskExtension
    commentId: T:ZeroFramework.Extension.UniTaskExtension
    language: CSharp
    name:
      CSharp: UniTaskExtension
      VB: UniTaskExtension
    nameWithType:
      CSharp: UniTaskExtension
      VB: UniTaskExtension
    qualifiedName:
      CSharp: ZeroFramework.Extension.UniTaskExtension
      VB: ZeroFramework.Extension.UniTaskExtension
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: ZeroFramework.Extension
    source:
      id: UniTaskExtension
      path: ''
      startLine: 5419
    syntax:
      content:
        CSharp: public static class UniTaskExtension
        VB: Public Module UniTaskExtension
    inheritance:
    - System.Object
    items:
    - isExtensionMethod: true
      id: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask``1(ImageTool,System.String,UnityAction{Texture2D})
      commentId: M:ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask``1(ImageTool,System.String,UnityAction{Texture2D})
      language: CSharp
      name:
        CSharp: ReadFromUriByUniTask<T>(ImageTool, string, UnityAction<Texture2D>)
        VB: ReadFromUriByUniTask(Of T)(ImageTool, String, UnityAction(Of Texture2D))
      nameWithType:
        CSharp: UniTaskExtension.ReadFromUriByUniTask<T>(ImageTool, string, UnityAction<Texture2D>)
        VB: UniTaskExtension.ReadFromUriByUniTask(Of T)(ImageTool, String, UnityAction(Of Texture2D))
      qualifiedName:
        CSharp: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask<T>(ImageTool, string, UnityAction<Texture2D>)
        VB: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask(Of T)(ImageTool, String, UnityAction(Of Texture2D))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Extension
      source:
        id: ReadFromUriByUniTask
        path: ''
        startLine: 5422
      syntax:
        content:
          CSharp: public static UniTaskVoid ReadFromUriByUniTask<T>(this ImageTool self, string imageUrl, UnityAction<Texture2D> callback)
          VB: Public Shared Function ReadFromUriByUniTask(Of T)(self As ImageTool, imageUrl As String, callback As UnityAction(Of Texture2D)) As UniTaskVoid
        parameters:
        - id: self
          type: Global.ImageTool
        - id: imageUrl
          type: System.String
        - id: callback
          type: Global.UnityAction{Texture2D}
        typeParameters:
        - id: T
        return:
          type: Global.UniTaskVoid
      overload: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask*
    - isExtensionMethod: true
      id: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask``1(ImageTool,System.String,UnityAction{Sprite})
      commentId: M:ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask``1(ImageTool,System.String,UnityAction{Sprite})
      language: CSharp
      name:
        CSharp: ReadFromUriByUniTask<T>(ImageTool, string, UnityAction<Sprite>)
        VB: ReadFromUriByUniTask(Of T)(ImageTool, String, UnityAction(Of Sprite))
      nameWithType:
        CSharp: UniTaskExtension.ReadFromUriByUniTask<T>(ImageTool, string, UnityAction<Sprite>)
        VB: UniTaskExtension.ReadFromUriByUniTask(Of T)(ImageTool, String, UnityAction(Of Sprite))
      qualifiedName:
        CSharp: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask<T>(ImageTool, string, UnityAction<Sprite>)
        VB: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask(Of T)(ImageTool, String, UnityAction(Of Sprite))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Extension
      source:
        id: ReadFromUriByUniTask
        path: ''
        startLine: 5437
      syntax:
        content:
          CSharp: public static UniTaskVoid ReadFromUriByUniTask<T>(this ImageTool self, string imageUrl, UnityAction<Sprite> callback)
          VB: Public Shared Function ReadFromUriByUniTask(Of T)(self As ImageTool, imageUrl As String, callback As UnityAction(Of Sprite)) As UniTaskVoid
        parameters:
        - id: self
          type: Global.ImageTool
        - id: imageUrl
          type: System.String
        - id: callback
          type: Global.UnityAction{Sprite}
        typeParameters:
        - id: T
        return:
          type: Global.UniTaskVoid
      overload: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask*
    - isExtensionMethod: true
      id: ZeroFramework.Extension.UniTaskExtension.ReadAsyncByUniTask(TextTool,System.String,Action{System.String})
      commentId: M:ZeroFramework.Extension.UniTaskExtension.ReadAsyncByUniTask(TextTool,System.String,Action{System.String})
      language: CSharp
      name:
        CSharp: ReadAsyncByUniTask(TextTool, string, Action<string>)
        VB: ReadAsyncByUniTask(TextTool, String, Action(Of String))
      nameWithType:
        CSharp: UniTaskExtension.ReadAsyncByUniTask(TextTool, string, Action<string>)
        VB: UniTaskExtension.ReadAsyncByUniTask(TextTool, String, Action(Of String))
      qualifiedName:
        CSharp: ZeroFramework.Extension.UniTaskExtension.ReadAsyncByUniTask(TextTool, string, Action<string>)
        VB: ZeroFramework.Extension.UniTaskExtension.ReadAsyncByUniTask(TextTool, String, Action(Of String))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Extension
      source:
        id: ReadAsyncByUniTask
        path: ''
        startLine: 5456
      syntax:
        content:
          CSharp: public static UniTaskVoid ReadAsyncByUniTask(this TextTool self, string path, Action<string> readCallback)
          VB: Public Shared Function ReadAsyncByUniTask(self As TextTool, path As String, readCallback As Action(Of String)) As UniTaskVoid
        parameters:
        - id: self
          type: Global.TextTool
        - id: path
          type: System.String
        - id: readCallback
          type: Global.Action{System.String}
        return:
          type: Global.UniTaskVoid
      overload: ZeroFramework.Extension.UniTaskExtension.ReadAsyncByUniTask*
    - isExtensionMethod: true
      id: ZeroFramework.Extension.UniTaskExtension.WriteAsyncByUniTask(TextTool,System.String,System.String,Action)
      commentId: M:ZeroFramework.Extension.UniTaskExtension.WriteAsyncByUniTask(TextTool,System.String,System.String,Action)
      language: CSharp
      name:
        CSharp: WriteAsyncByUniTask(TextTool, string, string, Action)
        VB: WriteAsyncByUniTask(TextTool, String, String, Action)
      nameWithType:
        CSharp: UniTaskExtension.WriteAsyncByUniTask(TextTool, string, string, Action)
        VB: UniTaskExtension.WriteAsyncByUniTask(TextTool, String, String, Action)
      qualifiedName:
        CSharp: ZeroFramework.Extension.UniTaskExtension.WriteAsyncByUniTask(TextTool, string, string, Action)
        VB: ZeroFramework.Extension.UniTaskExtension.WriteAsyncByUniTask(TextTool, String, String, Action)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Extension
      source:
        id: WriteAsyncByUniTask
        path: ''
        startLine: 5465
      syntax:
        content:
          CSharp: public static UniTaskVoid WriteAsyncByUniTask(this TextTool self, string path, string content, Action writeCallback)
          VB: Public Shared Function WriteAsyncByUniTask(self As TextTool, path As String, content As String, writeCallback As Action) As UniTaskVoid
        parameters:
        - id: self
          type: Global.TextTool
        - id: path
          type: System.String
        - id: content
          type: System.String
        - id: writeCallback
          type: Global.Action
        return:
          type: Global.UniTaskVoid
      overload: ZeroFramework.Extension.UniTaskExtension.WriteAsyncByUniTask*
    - isExtensionMethod: true
      id: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask(TextTool,System.String,UnityAction{System.String})
      commentId: M:ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask(TextTool,System.String,UnityAction{System.String})
      language: CSharp
      name:
        CSharp: ReadFromUriByUniTask(TextTool, string, UnityAction<string>)
        VB: ReadFromUriByUniTask(TextTool, String, UnityAction(Of String))
      nameWithType:
        CSharp: UniTaskExtension.ReadFromUriByUniTask(TextTool, string, UnityAction<string>)
        VB: UniTaskExtension.ReadFromUriByUniTask(TextTool, String, UnityAction(Of String))
      qualifiedName:
        CSharp: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask(TextTool, string, UnityAction<string>)
        VB: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask(TextTool, String, UnityAction(Of String))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: ZeroFramework.Extension
      source:
        id: ReadFromUriByUniTask
        path: ''
        startLine: 5476
      syntax:
        content:
          CSharp: public static UniTaskVoid ReadFromUriByUniTask(this TextTool self, string uri, UnityAction<string> callback)
          VB: Public Shared Function ReadFromUriByUniTask(self As TextTool, uri As String, callback As UnityAction(Of String)) As UniTaskVoid
        parameters:
        - id: self
          type: Global.TextTool
        - id: uri
          type: System.String
        - id: callback
          type: Global.UnityAction{System.String}
        return:
          type: Global.UniTaskVoid
      overload: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask*
references:
  ZeroFramework.Architecture`1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.Architecture`1
  ZeroFramework:
    name:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      VB:
      - id: ZeroFramework
        name: ZeroFramework
    nameWithType:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      VB:
      - id: ZeroFramework
        name: ZeroFramework
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      VB:
      - id: ZeroFramework
        name: ZeroFramework
    isDefinition: true
    commentId: N:ZeroFramework
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1
    parent: ZeroFramework
    commentId: T:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
  ZeroFramework.Architecture`1.Initialized:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework.Architecture`1.Initialized
        name: Initialized
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Initialized
        name: Initialized
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Initialized
        name: Initialized
    isDefinition: true
    commentId: P:ZeroFramework.Architecture`1.Initialized
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Initialized:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Initialized
        name: Initialized
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Initialized
        name: Initialized
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Initialized
        name: Initialized
    isDefinition: false
    definition: ZeroFramework.Architecture`1.Initialized
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: P:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Initialized
  ZeroFramework.Architecture`1.Interface:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.Interface
        name: Interface
      VB:
      - id: ZeroFramework.Architecture`1.Interface
        name: Interface
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Interface
        name: Interface
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Interface
        name: Interface
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Interface
        name: Interface
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Interface
        name: Interface
    isDefinition: true
    commentId: P:ZeroFramework.Architecture`1.Interface
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Interface:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Interface
        name: Interface
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Interface
        name: Interface
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Interface
        name: Interface
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Interface
        name: Interface
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Interface
        name: Interface
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Interface
        name: Interface
    isDefinition: false
    definition: ZeroFramework.Architecture`1.Interface
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: P:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Interface
  ZeroFramework.Architecture`1.Deinit:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.Deinit
        name: Deinit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Deinit
        name: Deinit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Deinit
        name: Deinit
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.Deinit
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Deinit:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Deinit
        name: Deinit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Deinit
        name: Deinit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Deinit
        name: Deinit
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.Deinit
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Deinit
  ZeroFramework.Architecture`1.OnDeinit:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.OnDeinit
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.OnDeinit:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.OnDeinit
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.OnDeinit
  ZeroFramework.Architecture`1.RegisterSystem``1(``0):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: TSystem
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: TSystem
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: TSystem
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: TSystem
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: TSystem
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: TSystem
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.RegisterSystem``1(``0)
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1({TSystem}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: TSystem
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: TSystem
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: TSystem
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: TSystem
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: TSystem
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: TSystem
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterSystem``1(``0)
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(``0)
  ZeroFramework.Architecture`1.RegisterSystem``1(ZeroFramework.IZeroFactory):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.RegisterSystem``1(ZeroFramework.IZeroFactory)
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterSystem``1(ZeroFramework.IZeroFactory)
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
  ZeroFramework.Architecture`1.RegisterModel``1(``0):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: TModel
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: TModel
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: TModel
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: TModel
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: TModel
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: TModel
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.RegisterModel``1(``0)
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1({TModel}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: TModel
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: TModel
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: TModel
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: TModel
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: TModel
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: TModel
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterModel``1(``0)
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(``0)
  ZeroFramework.Architecture`1.RegisterModel``1(ZeroFramework.IZeroFactory):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.RegisterModel``1(ZeroFramework.IZeroFactory)
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterModel``1(ZeroFramework.IZeroFactory)
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
  ZeroFramework.Architecture`1.RegisterUtility``1(``0):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: TUtility
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: TUtility
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: TUtility
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: TUtility
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: TUtility
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: TUtility
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.RegisterUtility``1(``0)
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1({TUtility}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: TUtility
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: TUtility
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: TUtility
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: TUtility
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: TUtility
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: TUtility
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterUtility``1(``0)
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(``0)
  ZeroFramework.Architecture`1.RegisterUtility``1(ZeroFramework.IZeroFactory):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.RegisterUtility``1(ZeroFramework.IZeroFactory)
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterUtility``1(ZeroFramework.IZeroFactory)
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
  ZeroFramework.Architecture`1.UnRegisterSystem``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.UnRegisterSystem``1
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterSystem``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.UnRegisterSystem``1
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterSystem``1
  ZeroFramework.Architecture`1.UnRegisterModel``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.UnRegisterModel``1
        name: UnRegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.UnRegisterModel``1
        name: UnRegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterModel``1
        name: UnRegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterModel``1
        name: UnRegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterModel``1
        name: UnRegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterModel``1
        name: UnRegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.UnRegisterModel``1
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterModel``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterModel``1
        name: UnRegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterModel``1
        name: UnRegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterModel``1
        name: UnRegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterModel``1
        name: UnRegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterModel``1
        name: UnRegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterModel``1
        name: UnRegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.UnRegisterModel``1
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterModel``1
  ZeroFramework.Architecture`1.UnRegisterUtility``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.UnRegisterUtility``1
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterUtility``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.UnRegisterUtility``1
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterUtility``1
  ZeroFramework.Architecture`1.GetSystem``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.GetSystem``1
        name: GetSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.GetSystem``1
        name: GetSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.GetSystem``1
        name: GetSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.GetSystem``1
        name: GetSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.GetSystem``1
        name: GetSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.GetSystem``1
        name: GetSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.GetSystem``1
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetSystem``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetSystem``1
        name: GetSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetSystem``1
        name: GetSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetSystem``1
        name: GetSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetSystem``1
        name: GetSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetSystem``1
        name: GetSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetSystem``1
        name: GetSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.GetSystem``1
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetSystem``1
  ZeroFramework.Architecture`1.GetModel``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.GetModel``1
        name: GetModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.GetModel``1
        name: GetModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.GetModel``1
        name: GetModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.GetModel``1
        name: GetModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.GetModel``1
        name: GetModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.GetModel``1
        name: GetModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.GetModel``1
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetModel``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetModel``1
        name: GetModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetModel``1
        name: GetModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetModel``1
        name: GetModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetModel``1
        name: GetModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetModel``1
        name: GetModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetModel``1
        name: GetModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.GetModel``1
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetModel``1
  ZeroFramework.Architecture`1.GetUtility``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.GetUtility``1
        name: GetUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.GetUtility``1
        name: GetUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.GetUtility``1
        name: GetUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.GetUtility``1
        name: GetUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.GetUtility``1
        name: GetUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.GetUtility``1
        name: GetUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.GetUtility``1
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetUtility``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetUtility``1
        name: GetUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetUtility``1
        name: GetUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetUtility``1
        name: GetUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetUtility``1
        name: GetUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetUtility``1
        name: GetUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetUtility``1
        name: GetUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.GetUtility``1
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.GetUtility``1
  ZeroFramework.Architecture`1.SendCommand``1(ZeroFramework.ICommand{``0}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.SendCommand``1(ZeroFramework.ICommand{``0})
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(ZeroFramework.ICommand{{TResult}}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.SendCommand``1(ZeroFramework.ICommand{``0})
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
  ZeroFramework.Architecture`1.SendCommand``1(``0):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: TCommand
      - name: '>'
      - name: (
      - name: TCommand
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TCommand
      - name: )
      - name: (
      - name: TCommand
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: TCommand
      - name: '>'
      - name: (
      - name: TCommand
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TCommand
      - name: )
      - name: (
      - name: TCommand
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: TCommand
      - name: '>'
      - name: (
      - name: TCommand
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TCommand
      - name: )
      - name: (
      - name: TCommand
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.SendCommand``1(``0)
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1({TCommand}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: TCommand
      - name: '>'
      - name: (
      - name: TCommand
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TCommand
      - name: )
      - name: (
      - name: TCommand
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: TCommand
      - name: '>'
      - name: (
      - name: TCommand
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TCommand
      - name: )
      - name: (
      - name: TCommand
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: TCommand
      - name: '>'
      - name: (
      - name: TCommand
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TCommand
      - name: )
      - name: (
      - name: TCommand
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.SendCommand``1(``0)
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendCommand``1(``0)
  ZeroFramework.Architecture`1.ExecuteCommand``1(ZeroFramework.ICommand{``0}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.ExecuteCommand``1(ZeroFramework.ICommand{``0})
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{{TResult}}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.ExecuteCommand``1(ZeroFramework.ICommand{``0})
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
  ZeroFramework.Architecture`1.ExecuteCommand(ZeroFramework.ICommand):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.ExecuteCommand(ZeroFramework.ICommand)
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand(ZeroFramework.ICommand):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.ExecuteCommand(ZeroFramework.ICommand)
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
  ZeroFramework.Architecture`1.SendQuery``1(ZeroFramework.IQuery{``0}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.SendQuery``1(ZeroFramework.IQuery{``0})
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendQuery``1(ZeroFramework.IQuery{{TResult}}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.SendQuery``1(ZeroFramework.IQuery{``0})
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
  ZeroFramework.Architecture`1.DoQuery``1(ZeroFramework.IQuery{``0}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.DoQuery``1(ZeroFramework.IQuery{``0})
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.DoQuery``1(ZeroFramework.IQuery{{TResult}}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.DoQuery``1(ZeroFramework.IQuery{``0})
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
  ZeroFramework.Architecture`1.SendEvent``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.SendEvent``1
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.SendEvent``1
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendEvent``1
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendEvent``1
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendEvent``1
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendEvent``1
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.SendEvent``1
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.SendEvent``1
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1
  ZeroFramework.Architecture`1.SendEvent``1(``0):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: TEvent
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: TEvent
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: TEvent
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: TEvent
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: TEvent
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: TEvent
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.SendEvent``1(``0)
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1({TEvent}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: TEvent
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: TEvent
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: TEvent
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: TEvent
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: TEvent
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: TEvent
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.SendEvent``1(``0)
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.SendEvent``1(``0)
  ZeroFramework.Architecture`1.RegisterEvent``1(Action{``0}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.RegisterEvent``1(Action{``0})
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterEvent``1(Action{{TEvent}}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterEvent``1(Action{``0})
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.RegisterEvent``1(Action{``0})
  ZeroFramework.Architecture`1.UnRegisterEvent``1(Action{``0}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.UnRegisterEvent``1(Action{``0})
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1(Action{{TEvent}}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.UnRegisterEvent``1(Action{``0})
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1(Action{``0})
  ZeroFramework.Architecture`1.UnRegisterEvent``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.UnRegisterEvent``1
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.UnRegisterEvent``1
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.UnRegisterEvent``1
  System:
    name:
      CSharp:
      - id: System
        name: System
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
    nameWithType:
      CSharp:
      - id: System
        name: System
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  ZeroFramework.IArchitecture:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.IArchitecture
  ZeroFramework.Architecture`1.Init:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.Init
        name: Init
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1.Init
        name: Init
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Init
        name: Init
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Init
        name: Init
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Init
        name: Init
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Init
        name: Init
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Architecture`1.Init
  ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Init:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Init
        name: Init
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Init
        name: Init
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Init
        name: Init
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Init
        name: Init
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Init
        name: Init
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Init
        name: Init
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.Init
    parent: ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.ZeroArchitecture}.Init
  ZeroFramework.ZeroArchitecture.Init*:
    name:
      CSharp:
      - id: ZeroFramework.ZeroArchitecture.Init*
        name: Init
      VB:
      - id: ZeroFramework.ZeroArchitecture.Init*
        name: Init
    nameWithType:
      CSharp:
      - id: ZeroFramework.ZeroArchitecture*
        name: ZeroArchitecture
      - name: .
      - id: ZeroFramework.ZeroArchitecture.Init*
        name: Init
      VB:
      - id: ZeroFramework.ZeroArchitecture*
        name: ZeroArchitecture
      - name: .
      - id: ZeroFramework.ZeroArchitecture.Init*
        name: Init
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture*
        name: ZeroArchitecture
      - name: .
      - id: ZeroFramework.ZeroArchitecture.Init*
        name: Init
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture*
        name: ZeroArchitecture
      - name: .
      - id: ZeroFramework.ZeroArchitecture.Init*
        name: Init
    isDefinition: true
    commentId: Overload:ZeroFramework.ZeroArchitecture.Init
  ZeroFramework.ZeroArchitecture:
    name:
      CSharp:
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      VB:
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
    nameWithType:
      CSharp:
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      VB:
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroArchitecture
        name: ZeroArchitecture
    isDefinition: true
    commentId: T:ZeroFramework.ZeroArchitecture
  ZeroFramework.IBelongToArchitecture:
    name:
      CSharp:
      - id: ZeroFramework.IBelongToArchitecture
        name: IBelongToArchitecture
      VB:
      - id: ZeroFramework.IBelongToArchitecture
        name: IBelongToArchitecture
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBelongToArchitecture
        name: IBelongToArchitecture
      VB:
      - id: ZeroFramework.IBelongToArchitecture
        name: IBelongToArchitecture
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBelongToArchitecture
        name: IBelongToArchitecture
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBelongToArchitecture
        name: IBelongToArchitecture
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.IBelongToArchitecture
  ZeroFramework.IBelongToArchitecture.GetArchitecture:
    name:
      CSharp:
      - id: ZeroFramework.IBelongToArchitecture.GetArchitecture
        name: GetArchitecture
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IBelongToArchitecture.GetArchitecture
        name: GetArchitecture
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBelongToArchitecture
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.IBelongToArchitecture.GetArchitecture
        name: GetArchitecture
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IBelongToArchitecture
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.IBelongToArchitecture.GetArchitecture
        name: GetArchitecture
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBelongToArchitecture
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.IBelongToArchitecture.GetArchitecture
        name: GetArchitecture
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBelongToArchitecture
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.IBelongToArchitecture.GetArchitecture
        name: GetArchitecture
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IBelongToArchitecture
    commentId: M:ZeroFramework.IBelongToArchitecture.GetArchitecture
  ZeroFramework.IZeroController:
    name:
      CSharp:
      - id: ZeroFramework.IZeroController
        name: IZeroController
      VB:
      - id: ZeroFramework.IZeroController
        name: IZeroController
    nameWithType:
      CSharp:
      - id: ZeroFramework.IZeroController
        name: IZeroController
      VB:
      - id: ZeroFramework.IZeroController
        name: IZeroController
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroController
        name: IZeroController
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroController
        name: IZeroController
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.IZeroController
  Global.ZeroToolKits:
    name:
      CSharp:
      - id: Global.ZeroToolKits
        name: ZeroToolKits
        isExternal: true
      VB:
      - id: Global.ZeroToolKits
        name: ZeroToolKits
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.ZeroToolKits
        name: ZeroToolKits
        isExternal: true
      VB:
      - id: Global.ZeroToolKits
        name: ZeroToolKits
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.ZeroToolKits
        name: ZeroToolKits
        isExternal: true
      VB:
      - id: Global.ZeroToolKits
        name: ZeroToolKits
        isExternal: true
    isDefinition: true
    commentId: '!:Global.ZeroToolKits'
  ZeroFramework.ZeroControllerExtension.GetZeroToolKits*:
    name:
      CSharp:
      - id: ZeroFramework.ZeroControllerExtension.GetZeroToolKits*
        name: GetZeroToolKits
      VB:
      - id: ZeroFramework.ZeroControllerExtension.GetZeroToolKits*
        name: GetZeroToolKits
    nameWithType:
      CSharp:
      - id: ZeroFramework.ZeroControllerExtension*
        name: ZeroControllerExtension
      - name: .
      - id: ZeroFramework.ZeroControllerExtension.GetZeroToolKits*
        name: GetZeroToolKits
      VB:
      - id: ZeroFramework.ZeroControllerExtension*
        name: ZeroControllerExtension
      - name: .
      - id: ZeroFramework.ZeroControllerExtension.GetZeroToolKits*
        name: GetZeroToolKits
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroControllerExtension*
        name: ZeroControllerExtension
      - name: .
      - id: ZeroFramework.ZeroControllerExtension.GetZeroToolKits*
        name: GetZeroToolKits
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroControllerExtension*
        name: ZeroControllerExtension
      - name: .
      - id: ZeroFramework.ZeroControllerExtension.GetZeroToolKits*
        name: GetZeroToolKits
    isDefinition: true
    commentId: Overload:ZeroFramework.ZeroControllerExtension.GetZeroToolKits
  ZeroFramework.ZeroControllerExtension:
    name:
      CSharp:
      - id: ZeroFramework.ZeroControllerExtension
        name: ZeroControllerExtension
      VB:
      - id: ZeroFramework.ZeroControllerExtension
        name: ZeroControllerExtension
    nameWithType:
      CSharp:
      - id: ZeroFramework.ZeroControllerExtension
        name: ZeroControllerExtension
      VB:
      - id: ZeroFramework.ZeroControllerExtension
        name: ZeroControllerExtension
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroControllerExtension
        name: ZeroControllerExtension
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroControllerExtension
        name: ZeroControllerExtension
    isDefinition: true
    commentId: T:ZeroFramework.ZeroControllerExtension
  ZeroFramework.IController:
    name:
      CSharp:
      - id: ZeroFramework.IController
        name: IController
      VB:
      - id: ZeroFramework.IController
        name: IController
    nameWithType:
      CSharp:
      - id: ZeroFramework.IController
        name: IController
      VB:
      - id: ZeroFramework.IController
        name: IController
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IController
        name: IController
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IController
        name: IController
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.IController
  ZeroFramework.ICanSendCommand:
    name:
      CSharp:
      - id: ZeroFramework.ICanSendCommand
        name: ICanSendCommand
      VB:
      - id: ZeroFramework.ICanSendCommand
        name: ICanSendCommand
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanSendCommand
        name: ICanSendCommand
      VB:
      - id: ZeroFramework.ICanSendCommand
        name: ICanSendCommand
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSendCommand
        name: ICanSendCommand
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSendCommand
        name: ICanSendCommand
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.ICanSendCommand
  ZeroFramework.ICanGetSystem:
    name:
      CSharp:
      - id: ZeroFramework.ICanGetSystem
        name: ICanGetSystem
      VB:
      - id: ZeroFramework.ICanGetSystem
        name: ICanGetSystem
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanGetSystem
        name: ICanGetSystem
      VB:
      - id: ZeroFramework.ICanGetSystem
        name: ICanGetSystem
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanGetSystem
        name: ICanGetSystem
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanGetSystem
        name: ICanGetSystem
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.ICanGetSystem
  ZeroFramework.ICanGetModel:
    name:
      CSharp:
      - id: ZeroFramework.ICanGetModel
        name: ICanGetModel
      VB:
      - id: ZeroFramework.ICanGetModel
        name: ICanGetModel
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanGetModel
        name: ICanGetModel
      VB:
      - id: ZeroFramework.ICanGetModel
        name: ICanGetModel
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanGetModel
        name: ICanGetModel
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanGetModel
        name: ICanGetModel
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.ICanGetModel
  ZeroFramework.ICanRegisterEvent:
    name:
      CSharp:
      - id: ZeroFramework.ICanRegisterEvent
        name: ICanRegisterEvent
      VB:
      - id: ZeroFramework.ICanRegisterEvent
        name: ICanRegisterEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanRegisterEvent
        name: ICanRegisterEvent
      VB:
      - id: ZeroFramework.ICanRegisterEvent
        name: ICanRegisterEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanRegisterEvent
        name: ICanRegisterEvent
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanRegisterEvent
        name: ICanRegisterEvent
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.ICanRegisterEvent
  ZeroFramework.ICanSendQuery:
    name:
      CSharp:
      - id: ZeroFramework.ICanSendQuery
        name: ICanSendQuery
      VB:
      - id: ZeroFramework.ICanSendQuery
        name: ICanSendQuery
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanSendQuery
        name: ICanSendQuery
      VB:
      - id: ZeroFramework.ICanSendQuery
        name: ICanSendQuery
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSendQuery
        name: ICanSendQuery
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSendQuery
        name: ICanSendQuery
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.ICanSendQuery
  ZeroFramework.ICanGetUtility:
    name:
      CSharp:
      - id: ZeroFramework.ICanGetUtility
        name: ICanGetUtility
      VB:
      - id: ZeroFramework.ICanGetUtility
        name: ICanGetUtility
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanGetUtility
        name: ICanGetUtility
      VB:
      - id: ZeroFramework.ICanGetUtility
        name: ICanGetUtility
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanGetUtility
        name: ICanGetUtility
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanGetUtility
        name: ICanGetUtility
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.ICanGetUtility
  Global.ILogger:
    name:
      CSharp:
      - id: Global.ILogger
        name: ILogger
        isExternal: true
      VB:
      - id: Global.ILogger
        name: ILogger
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.ILogger
        name: ILogger
        isExternal: true
      VB:
      - id: Global.ILogger
        name: ILogger
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.ILogger
        name: ILogger
        isExternal: true
      VB:
      - id: Global.ILogger
        name: ILogger
        isExternal: true
    isDefinition: true
  ZeroFramework.ZeroMonoController`1.logger*:
    name:
      CSharp:
      - id: ZeroFramework.ZeroMonoController`1.logger*
        name: logger
      VB:
      - id: ZeroFramework.ZeroMonoController`1.logger*
        name: logger
    nameWithType:
      CSharp:
      - id: ZeroFramework.ZeroMonoController`1*
        name: ZeroMonoController
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.ZeroMonoController`1.logger*
        name: logger
      VB:
      - id: ZeroFramework.ZeroMonoController`1*
        name: ZeroMonoController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.ZeroMonoController`1.logger*
        name: logger
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroMonoController`1*
        name: ZeroMonoController
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.ZeroMonoController`1.logger*
        name: logger
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroMonoController`1*
        name: ZeroMonoController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.ZeroMonoController`1.logger*
        name: logger
    isDefinition: true
    commentId: Overload:ZeroFramework.ZeroMonoController`1.logger
  ZeroFramework.ZeroMonoController`1.GetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.ZeroMonoController`1.GetArchitecture*
        name: GetArchitecture
      VB:
      - id: ZeroFramework.ZeroMonoController`1.GetArchitecture*
        name: GetArchitecture
    nameWithType:
      CSharp:
      - id: ZeroFramework.ZeroMonoController`1*
        name: ZeroMonoController
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.ZeroMonoController`1.GetArchitecture*
        name: GetArchitecture
      VB:
      - id: ZeroFramework.ZeroMonoController`1*
        name: ZeroMonoController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.ZeroMonoController`1.GetArchitecture*
        name: GetArchitecture
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroMonoController`1*
        name: ZeroMonoController
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.ZeroMonoController`1.GetArchitecture*
        name: GetArchitecture
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroMonoController`1*
        name: ZeroMonoController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.ZeroMonoController`1.GetArchitecture*
        name: GetArchitecture
    isDefinition: true
    commentId: Overload:ZeroFramework.ZeroMonoController`1.GetArchitecture
  ZeroFramework.ZeroMonoController`1:
    name:
      CSharp:
      - id: ZeroFramework.ZeroMonoController`1
        name: ZeroMonoController
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.ZeroMonoController`1
        name: ZeroMonoController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ZeroMonoController`1
        name: ZeroMonoController
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.ZeroMonoController`1
        name: ZeroMonoController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroMonoController`1
        name: ZeroMonoController
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroMonoController`1
        name: ZeroMonoController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.ZeroMonoController`1
  ZeroFramework.ZeroController`1.logger*:
    name:
      CSharp:
      - id: ZeroFramework.ZeroController`1.logger*
        name: logger
      VB:
      - id: ZeroFramework.ZeroController`1.logger*
        name: logger
    nameWithType:
      CSharp:
      - id: ZeroFramework.ZeroController`1*
        name: ZeroController
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.ZeroController`1.logger*
        name: logger
      VB:
      - id: ZeroFramework.ZeroController`1*
        name: ZeroController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.ZeroController`1.logger*
        name: logger
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroController`1*
        name: ZeroController
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.ZeroController`1.logger*
        name: logger
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroController`1*
        name: ZeroController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.ZeroController`1.logger*
        name: logger
    isDefinition: true
    commentId: Overload:ZeroFramework.ZeroController`1.logger
  ZeroFramework.ZeroController`1.GetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.ZeroController`1.GetArchitecture*
        name: GetArchitecture
      VB:
      - id: ZeroFramework.ZeroController`1.GetArchitecture*
        name: GetArchitecture
    nameWithType:
      CSharp:
      - id: ZeroFramework.ZeroController`1*
        name: ZeroController
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.ZeroController`1.GetArchitecture*
        name: GetArchitecture
      VB:
      - id: ZeroFramework.ZeroController`1*
        name: ZeroController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.ZeroController`1.GetArchitecture*
        name: GetArchitecture
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroController`1*
        name: ZeroController
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.ZeroController`1.GetArchitecture*
        name: GetArchitecture
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroController`1*
        name: ZeroController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.ZeroController`1.GetArchitecture*
        name: GetArchitecture
    isDefinition: true
    commentId: Overload:ZeroFramework.ZeroController`1.GetArchitecture
  ZeroFramework.ZeroController`1:
    name:
      CSharp:
      - id: ZeroFramework.ZeroController`1
        name: ZeroController
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.ZeroController`1
        name: ZeroController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ZeroController`1
        name: ZeroController
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.ZeroController`1
        name: ZeroController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroController`1
        name: ZeroController
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ZeroController`1
        name: ZeroController
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.ZeroController`1
  ZeroFramework.IZeroFactory.Create*:
    name:
      CSharp:
      - id: ZeroFramework.IZeroFactory.Create*
        name: Create
      VB:
      - id: ZeroFramework.IZeroFactory.Create*
        name: Create
    nameWithType:
      CSharp:
      - id: ZeroFramework.IZeroFactory*
        name: IZeroFactory
      - name: .
      - id: ZeroFramework.IZeroFactory.Create*
        name: Create
      VB:
      - id: ZeroFramework.IZeroFactory*
        name: IZeroFactory
      - name: .
      - id: ZeroFramework.IZeroFactory.Create*
        name: Create
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory*
        name: IZeroFactory
      - name: .
      - id: ZeroFramework.IZeroFactory.Create*
        name: Create
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory*
        name: IZeroFactory
      - name: .
      - id: ZeroFramework.IZeroFactory.Create*
        name: Create
    isDefinition: true
    commentId: Overload:ZeroFramework.IZeroFactory.Create
  ZeroFramework.IZeroFactory:
    name:
      CSharp:
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      VB:
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
    nameWithType:
      CSharp:
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      VB:
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.IZeroFactory
  T:
    name:
      CSharp:
      - name: T
      VB:
      - name: T
    nameWithType:
      CSharp:
      - name: T
      VB:
      - name: T
    qualifiedName:
      CSharp:
      - name: T
      VB:
      - name: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
      VB:
      - name: T
    nameWithType:
      CSharp:
      - name: T
      VB:
      - name: T
    qualifiedName:
      CSharp:
      - name: T
      VB:
      - name: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  ZeroFramework.IArchitecture.RegisterSystem*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterSystem*
        name: RegisterSystem
      VB:
      - id: ZeroFramework.IArchitecture.RegisterSystem*
        name: RegisterSystem
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem*
        name: RegisterSystem
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem*
        name: RegisterSystem
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem*
        name: RegisterSystem
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem*
        name: RegisterSystem
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.RegisterSystem
  ZeroFramework.IArchitecture.RegisterModel*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterModel*
        name: RegisterModel
      VB:
      - id: ZeroFramework.IArchitecture.RegisterModel*
        name: RegisterModel
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel*
        name: RegisterModel
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel*
        name: RegisterModel
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel*
        name: RegisterModel
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel*
        name: RegisterModel
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.RegisterModel
  ZeroFramework.IArchitecture.RegisterUtility*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterUtility*
        name: RegisterUtility
      VB:
      - id: ZeroFramework.IArchitecture.RegisterUtility*
        name: RegisterUtility
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility*
        name: RegisterUtility
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility*
        name: RegisterUtility
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility*
        name: RegisterUtility
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility*
        name: RegisterUtility
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.RegisterUtility
  ZeroFramework.IArchitecture.UnRegisterSystem*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.UnRegisterSystem*
        name: UnRegisterSystem
      VB:
      - id: ZeroFramework.IArchitecture.UnRegisterSystem*
        name: UnRegisterSystem
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterSystem*
        name: UnRegisterSystem
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterSystem*
        name: UnRegisterSystem
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterSystem*
        name: UnRegisterSystem
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterSystem*
        name: UnRegisterSystem
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.UnRegisterSystem
  ZeroFramework.IArchitecture.UnRegisterModel*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.UnRegisterModel*
        name: UnRegisterModel
      VB:
      - id: ZeroFramework.IArchitecture.UnRegisterModel*
        name: UnRegisterModel
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterModel*
        name: UnRegisterModel
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterModel*
        name: UnRegisterModel
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterModel*
        name: UnRegisterModel
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterModel*
        name: UnRegisterModel
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.UnRegisterModel
  ZeroFramework.IArchitecture.UnRegisterUtility*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.UnRegisterUtility*
        name: UnRegisterUtility
      VB:
      - id: ZeroFramework.IArchitecture.UnRegisterUtility*
        name: UnRegisterUtility
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterUtility*
        name: UnRegisterUtility
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterUtility*
        name: UnRegisterUtility
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterUtility*
        name: UnRegisterUtility
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterUtility*
        name: UnRegisterUtility
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.UnRegisterUtility
  ZeroFramework.IArchitecture.GetSystem*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.GetSystem*
        name: GetSystem
      VB:
      - id: ZeroFramework.IArchitecture.GetSystem*
        name: GetSystem
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetSystem*
        name: GetSystem
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetSystem*
        name: GetSystem
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetSystem*
        name: GetSystem
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetSystem*
        name: GetSystem
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.GetSystem
  ZeroFramework.IArchitecture.GetModel*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.GetModel*
        name: GetModel
      VB:
      - id: ZeroFramework.IArchitecture.GetModel*
        name: GetModel
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetModel*
        name: GetModel
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetModel*
        name: GetModel
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetModel*
        name: GetModel
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetModel*
        name: GetModel
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.GetModel
  ZeroFramework.IArchitecture.GetUtility*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.GetUtility*
        name: GetUtility
      VB:
      - id: ZeroFramework.IArchitecture.GetUtility*
        name: GetUtility
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetUtility*
        name: GetUtility
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetUtility*
        name: GetUtility
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetUtility*
        name: GetUtility
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetUtility*
        name: GetUtility
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.GetUtility
  ZeroFramework.IArchitecture.SendCommand*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.SendCommand*
        name: SendCommand
      VB:
      - id: ZeroFramework.IArchitecture.SendCommand*
        name: SendCommand
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand*
        name: SendCommand
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand*
        name: SendCommand
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand*
        name: SendCommand
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand*
        name: SendCommand
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.SendCommand
  TResult:
    name:
      CSharp:
      - name: TResult
      VB:
      - name: TResult
    nameWithType:
      CSharp:
      - name: TResult
      VB:
      - name: TResult
    qualifiedName:
      CSharp:
      - name: TResult
      VB:
      - name: TResult
    isDefinition: true
  '{TResult}':
    name:
      CSharp:
      - name: TResult
      VB:
      - name: TResult
    nameWithType:
      CSharp:
      - name: TResult
      VB:
      - name: TResult
    qualifiedName:
      CSharp:
      - name: TResult
      VB:
      - name: TResult
    isDefinition: false
    definition: TResult
    commentId: '!:TResult'
  ZeroFramework.ICommand`1:
    name:
      CSharp:
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.ICommand`1
  ZeroFramework.ICommand{{TResult}}:
    name:
      CSharp:
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    isDefinition: false
    definition: ZeroFramework.ICommand`1
    parent: ZeroFramework
    commentId: T:ZeroFramework.ICommand{``0}
  ZeroFramework.IQuery`1:
    name:
      CSharp:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.IQuery`1
  ZeroFramework.IQuery{{TResult}}:
    name:
      CSharp:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    isDefinition: false
    definition: ZeroFramework.IQuery`1
    parent: ZeroFramework
    commentId: T:ZeroFramework.IQuery{``0}
  ZeroFramework.IArchitecture.SendQuery*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.SendQuery*
        name: SendQuery
      VB:
      - id: ZeroFramework.IArchitecture.SendQuery*
        name: SendQuery
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendQuery*
        name: SendQuery
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendQuery*
        name: SendQuery
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendQuery*
        name: SendQuery
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendQuery*
        name: SendQuery
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.SendQuery
  ZeroFramework.IArchitecture.SendEvent*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.SendEvent*
        name: SendEvent
      VB:
      - id: ZeroFramework.IArchitecture.SendEvent*
        name: SendEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent*
        name: SendEvent
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent*
        name: SendEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent*
        name: SendEvent
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent*
        name: SendEvent
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.SendEvent
  ZeroFramework.IUnRegister:
    name:
      CSharp:
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      VB:
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      VB:
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.IUnRegister
  Global.Action`1:
    name:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    isDefinition: true
  Global.Action{{T}}:
    name:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: Global.Action`1
    commentId: '!:Global.Action{``0}'
  ZeroFramework.IArchitecture.RegisterEvent*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterEvent*
        name: RegisterEvent
      VB:
      - id: ZeroFramework.IArchitecture.RegisterEvent*
        name: RegisterEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterEvent*
        name: RegisterEvent
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterEvent*
        name: RegisterEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterEvent*
        name: RegisterEvent
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterEvent*
        name: RegisterEvent
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.RegisterEvent
  ZeroFramework.IArchitecture.UnRegisterEvent*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.UnRegisterEvent*
        name: UnRegisterEvent
      VB:
      - id: ZeroFramework.IArchitecture.UnRegisterEvent*
        name: UnRegisterEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent*
        name: UnRegisterEvent
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent*
        name: UnRegisterEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent*
        name: UnRegisterEvent
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent*
        name: UnRegisterEvent
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.UnRegisterEvent
  ZeroFramework.IArchitecture.Deinit*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework.IArchitecture.Deinit*
        name: Deinit
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Deinit*
        name: Deinit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Deinit*
        name: Deinit
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.Deinit
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: bool
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Boolean
        name: bool
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Boolean
        name: bool
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  ZeroFramework.IArchitecture.Initialized*:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework.IArchitecture.Initialized*
        name: Initialized
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Initialized*
        name: Initialized
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture*
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Initialized*
        name: Initialized
    isDefinition: true
    commentId: Overload:ZeroFramework.IArchitecture.Initialized
  ZeroFramework.Architecture`1.Initialized*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework.Architecture`1.Initialized*
        name: Initialized
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Initialized*
        name: Initialized
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Initialized*
        name: Initialized
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.Initialized
  ZeroFramework.IArchitecture.Initialized:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework.IArchitecture.Initialized
        name: Initialized
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Initialized
        name: Initialized
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Initialized
        name: Initialized
    isDefinition: true
    parent: ZeroFramework.IArchitecture
    commentId: P:ZeroFramework.IArchitecture.Initialized
  ZeroFramework.Architecture`1.Interface*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.Interface*
        name: Interface
      VB:
      - id: ZeroFramework.Architecture`1.Interface*
        name: Interface
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Interface*
        name: Interface
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Interface*
        name: Interface
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Interface*
        name: Interface
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Interface*
        name: Interface
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.Interface
  ZeroFramework.Architecture`1.Init*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.Init*
        name: Init
      VB:
      - id: ZeroFramework.Architecture`1.Init*
        name: Init
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Init*
        name: Init
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Init*
        name: Init
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Init*
        name: Init
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Init*
        name: Init
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.Init
  ZeroFramework.Architecture`1.Deinit*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework.Architecture`1.Deinit*
        name: Deinit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Deinit*
        name: Deinit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.Deinit*
        name: Deinit
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.Deinit
  ZeroFramework.IArchitecture.Deinit:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.Deinit
        name: Deinit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Deinit
        name: Deinit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.Deinit
        name: Deinit
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.Deinit
  ZeroFramework.Architecture`1.OnDeinit*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.OnDeinit*
        name: OnDeinit
      VB:
      - id: ZeroFramework.Architecture`1.OnDeinit*
        name: OnDeinit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.OnDeinit*
        name: OnDeinit
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.OnDeinit*
        name: OnDeinit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.OnDeinit*
        name: OnDeinit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.OnDeinit*
        name: OnDeinit
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.OnDeinit
  TSystem:
    name:
      CSharp:
      - name: TSystem
      VB:
      - name: TSystem
    nameWithType:
      CSharp:
      - name: TSystem
      VB:
      - name: TSystem
    qualifiedName:
      CSharp:
      - name: TSystem
      VB:
      - name: TSystem
    isDefinition: true
  '{TSystem}':
    name:
      CSharp:
      - name: TSystem
      VB:
      - name: TSystem
    nameWithType:
      CSharp:
      - name: TSystem
      VB:
      - name: TSystem
    qualifiedName:
      CSharp:
      - name: TSystem
      VB:
      - name: TSystem
    isDefinition: false
    definition: TSystem
    commentId: '!:TSystem'
  ZeroFramework.Architecture`1.RegisterSystem*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.RegisterSystem*
        name: RegisterSystem
      VB:
      - id: ZeroFramework.Architecture`1.RegisterSystem*
        name: RegisterSystem
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterSystem*
        name: RegisterSystem
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterSystem*
        name: RegisterSystem
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterSystem*
        name: RegisterSystem
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterSystem*
        name: RegisterSystem
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.RegisterSystem
  ZeroFramework.IArchitecture.RegisterSystem``1(``0):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IArchitecture.RegisterSystem``1(``0)
  ZeroFramework.IArchitecture.RegisterSystem``1({TSystem}):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: TSystem
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: TSystem
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: TSystem
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: TSystem
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: TSystem
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: TSystem
      - name: )
    isDefinition: false
    definition: ZeroFramework.IArchitecture.RegisterSystem``1(``0)
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.RegisterSystem``1(``0)
  ZeroFramework.IArchitecture.RegisterSystem``1(ZeroFramework.IZeroFactory):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    isDefinition: true
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.RegisterSystem``1(ZeroFramework.IZeroFactory)
  TModel:
    name:
      CSharp:
      - name: TModel
      VB:
      - name: TModel
    nameWithType:
      CSharp:
      - name: TModel
      VB:
      - name: TModel
    qualifiedName:
      CSharp:
      - name: TModel
      VB:
      - name: TModel
    isDefinition: true
  '{TModel}':
    name:
      CSharp:
      - name: TModel
      VB:
      - name: TModel
    nameWithType:
      CSharp:
      - name: TModel
      VB:
      - name: TModel
    qualifiedName:
      CSharp:
      - name: TModel
      VB:
      - name: TModel
    isDefinition: false
    definition: TModel
    commentId: '!:TModel'
  ZeroFramework.Architecture`1.RegisterModel*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.RegisterModel*
        name: RegisterModel
      VB:
      - id: ZeroFramework.Architecture`1.RegisterModel*
        name: RegisterModel
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterModel*
        name: RegisterModel
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterModel*
        name: RegisterModel
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterModel*
        name: RegisterModel
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterModel*
        name: RegisterModel
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.RegisterModel
  ZeroFramework.IArchitecture.RegisterModel``1(``0):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IArchitecture.RegisterModel``1(``0)
  ZeroFramework.IArchitecture.RegisterModel``1({TModel}):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: TModel
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: TModel
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: TModel
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: TModel
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: TModel
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: TModel
      - name: )
    isDefinition: false
    definition: ZeroFramework.IArchitecture.RegisterModel``1(``0)
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.RegisterModel``1(``0)
  ZeroFramework.IArchitecture.RegisterModel``1(ZeroFramework.IZeroFactory):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    isDefinition: true
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.RegisterModel``1(ZeroFramework.IZeroFactory)
  TUtility:
    name:
      CSharp:
      - name: TUtility
      VB:
      - name: TUtility
    nameWithType:
      CSharp:
      - name: TUtility
      VB:
      - name: TUtility
    qualifiedName:
      CSharp:
      - name: TUtility
      VB:
      - name: TUtility
    isDefinition: true
  '{TUtility}':
    name:
      CSharp:
      - name: TUtility
      VB:
      - name: TUtility
    nameWithType:
      CSharp:
      - name: TUtility
      VB:
      - name: TUtility
    qualifiedName:
      CSharp:
      - name: TUtility
      VB:
      - name: TUtility
    isDefinition: false
    definition: TUtility
    commentId: '!:TUtility'
  ZeroFramework.Architecture`1.RegisterUtility*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.RegisterUtility*
        name: RegisterUtility
      VB:
      - id: ZeroFramework.Architecture`1.RegisterUtility*
        name: RegisterUtility
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterUtility*
        name: RegisterUtility
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterUtility*
        name: RegisterUtility
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterUtility*
        name: RegisterUtility
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterUtility*
        name: RegisterUtility
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.RegisterUtility
  ZeroFramework.IArchitecture.RegisterUtility``1(``0):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IArchitecture.RegisterUtility``1(``0)
  ZeroFramework.IArchitecture.RegisterUtility``1({TUtility}):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: TUtility
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: TUtility
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: TUtility
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: TUtility
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: TUtility
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: TUtility
      - name: )
    isDefinition: false
    definition: ZeroFramework.IArchitecture.RegisterUtility``1(``0)
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.RegisterUtility``1(``0)
  ZeroFramework.IArchitecture.RegisterUtility``1(ZeroFramework.IZeroFactory):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    isDefinition: true
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.RegisterUtility``1(ZeroFramework.IZeroFactory)
  ZeroFramework.Architecture`1.UnRegisterSystem*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.UnRegisterSystem*
        name: UnRegisterSystem
      VB:
      - id: ZeroFramework.Architecture`1.UnRegisterSystem*
        name: UnRegisterSystem
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterSystem*
        name: UnRegisterSystem
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterSystem*
        name: UnRegisterSystem
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterSystem*
        name: UnRegisterSystem
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterSystem*
        name: UnRegisterSystem
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.UnRegisterSystem
  ZeroFramework.IArchitecture.UnRegisterSystem``1:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.UnRegisterSystem``1
  ZeroFramework.Architecture`1.UnRegisterModel*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.UnRegisterModel*
        name: UnRegisterModel
      VB:
      - id: ZeroFramework.Architecture`1.UnRegisterModel*
        name: UnRegisterModel
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterModel*
        name: UnRegisterModel
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterModel*
        name: UnRegisterModel
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterModel*
        name: UnRegisterModel
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterModel*
        name: UnRegisterModel
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.UnRegisterModel
  ZeroFramework.IArchitecture.UnRegisterModel``1:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.UnRegisterModel``1
        name: UnRegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.UnRegisterModel``1
        name: UnRegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterModel``1
        name: UnRegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterModel``1
        name: UnRegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterModel``1
        name: UnRegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterModel``1
        name: UnRegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.UnRegisterModel``1
  ZeroFramework.Architecture`1.UnRegisterUtility*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.UnRegisterUtility*
        name: UnRegisterUtility
      VB:
      - id: ZeroFramework.Architecture`1.UnRegisterUtility*
        name: UnRegisterUtility
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterUtility*
        name: UnRegisterUtility
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterUtility*
        name: UnRegisterUtility
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterUtility*
        name: UnRegisterUtility
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterUtility*
        name: UnRegisterUtility
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.UnRegisterUtility
  ZeroFramework.IArchitecture.UnRegisterUtility``1:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.UnRegisterUtility``1
  ZeroFramework.Architecture`1.GetSystem*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.GetSystem*
        name: GetSystem
      VB:
      - id: ZeroFramework.Architecture`1.GetSystem*
        name: GetSystem
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.GetSystem*
        name: GetSystem
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.GetSystem*
        name: GetSystem
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.GetSystem*
        name: GetSystem
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.GetSystem*
        name: GetSystem
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.GetSystem
  ZeroFramework.IArchitecture.GetSystem``1:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.GetSystem``1
        name: GetSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.GetSystem``1
        name: GetSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetSystem``1
        name: GetSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetSystem``1
        name: GetSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetSystem``1
        name: GetSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetSystem``1
        name: GetSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.GetSystem``1
  ZeroFramework.Architecture`1.GetModel*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.GetModel*
        name: GetModel
      VB:
      - id: ZeroFramework.Architecture`1.GetModel*
        name: GetModel
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.GetModel*
        name: GetModel
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.GetModel*
        name: GetModel
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.GetModel*
        name: GetModel
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.GetModel*
        name: GetModel
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.GetModel
  ZeroFramework.IArchitecture.GetModel``1:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.GetModel``1
        name: GetModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.GetModel``1
        name: GetModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetModel``1
        name: GetModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetModel``1
        name: GetModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetModel``1
        name: GetModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetModel``1
        name: GetModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.GetModel``1
  ZeroFramework.Architecture`1.GetUtility*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.GetUtility*
        name: GetUtility
      VB:
      - id: ZeroFramework.Architecture`1.GetUtility*
        name: GetUtility
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.GetUtility*
        name: GetUtility
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.GetUtility*
        name: GetUtility
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.GetUtility*
        name: GetUtility
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.GetUtility*
        name: GetUtility
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.GetUtility
  ZeroFramework.IArchitecture.GetUtility``1:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.GetUtility``1
        name: GetUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.GetUtility``1
        name: GetUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetUtility``1
        name: GetUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetUtility``1
        name: GetUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetUtility``1
        name: GetUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.GetUtility``1
        name: GetUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.GetUtility``1
  ZeroFramework.Architecture`1.SendCommand*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.SendCommand*
        name: SendCommand
      VB:
      - id: ZeroFramework.Architecture`1.SendCommand*
        name: SendCommand
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendCommand*
        name: SendCommand
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendCommand*
        name: SendCommand
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendCommand*
        name: SendCommand
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendCommand*
        name: SendCommand
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.SendCommand
  ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0}):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
  ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{{TResult}}):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.SendCommand``1(ZeroFramework.ICommand{``0})
  TCommand:
    name:
      CSharp:
      - name: TCommand
      VB:
      - name: TCommand
    nameWithType:
      CSharp:
      - name: TCommand
      VB:
      - name: TCommand
    qualifiedName:
      CSharp:
      - name: TCommand
      VB:
      - name: TCommand
    isDefinition: true
    commentId: '!:TCommand'
  '{TCommand}':
    name:
      CSharp:
      - name: TCommand
      VB:
      - name: TCommand
    nameWithType:
      CSharp:
      - name: TCommand
      VB:
      - name: TCommand
    qualifiedName:
      CSharp:
      - name: TCommand
      VB:
      - name: TCommand
    isDefinition: false
    definition: TCommand
    commentId: '!:TCommand'
  ZeroFramework.IArchitecture.SendCommand``1(``0):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IArchitecture.SendCommand``1(``0)
  ZeroFramework.IArchitecture.SendCommand``1({TCommand}):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: TCommand
      - name: '>'
      - name: (
      - name: TCommand
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TCommand
      - name: )
      - name: (
      - name: TCommand
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: TCommand
      - name: '>'
      - name: (
      - name: TCommand
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TCommand
      - name: )
      - name: (
      - name: TCommand
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: TCommand
      - name: '>'
      - name: (
      - name: TCommand
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TCommand
      - name: )
      - name: (
      - name: TCommand
      - name: )
    isDefinition: false
    definition: ZeroFramework.IArchitecture.SendCommand``1(``0)
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.SendCommand``1(``0)
  ZeroFramework.Architecture`1.ExecuteCommand*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.ExecuteCommand*
        name: ExecuteCommand
      VB:
      - id: ZeroFramework.Architecture`1.ExecuteCommand*
        name: ExecuteCommand
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.ExecuteCommand*
        name: ExecuteCommand
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.ExecuteCommand*
        name: ExecuteCommand
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.ExecuteCommand*
        name: ExecuteCommand
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.ExecuteCommand*
        name: ExecuteCommand
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.ExecuteCommand
  ZeroFramework.ICommand:
    name:
      CSharp:
      - id: ZeroFramework.ICommand
        name: ICommand
      VB:
      - id: ZeroFramework.ICommand
        name: ICommand
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommand
        name: ICommand
      VB:
      - id: ZeroFramework.ICommand
        name: ICommand
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand
        name: ICommand
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand
        name: ICommand
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.ICommand
  ZeroFramework.Architecture`1.SendQuery*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.SendQuery*
        name: SendQuery
      VB:
      - id: ZeroFramework.Architecture`1.SendQuery*
        name: SendQuery
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendQuery*
        name: SendQuery
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendQuery*
        name: SendQuery
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendQuery*
        name: SendQuery
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendQuery*
        name: SendQuery
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.SendQuery
  ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0}):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
  ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{{TResult}}):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.SendQuery``1(ZeroFramework.IQuery{``0})
  ZeroFramework.Architecture`1.DoQuery*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.DoQuery*
        name: DoQuery
      VB:
      - id: ZeroFramework.Architecture`1.DoQuery*
        name: DoQuery
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.DoQuery*
        name: DoQuery
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.DoQuery*
        name: DoQuery
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.DoQuery*
        name: DoQuery
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.DoQuery*
        name: DoQuery
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.DoQuery
  ZeroFramework.Architecture`1.SendEvent*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.SendEvent*
        name: SendEvent
      VB:
      - id: ZeroFramework.Architecture`1.SendEvent*
        name: SendEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendEvent*
        name: SendEvent
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendEvent*
        name: SendEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.SendEvent*
        name: SendEvent
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.SendEvent*
        name: SendEvent
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.SendEvent
  ZeroFramework.IArchitecture.SendEvent``1:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.SendEvent``1
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.SendEvent``1
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent``1
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent``1
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent``1
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent``1
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.SendEvent``1
  TEvent:
    name:
      CSharp:
      - name: TEvent
      VB:
      - name: TEvent
    nameWithType:
      CSharp:
      - name: TEvent
      VB:
      - name: TEvent
    qualifiedName:
      CSharp:
      - name: TEvent
      VB:
      - name: TEvent
    isDefinition: true
    commentId: '!:TEvent'
  '{TEvent}':
    name:
      CSharp:
      - name: TEvent
      VB:
      - name: TEvent
    nameWithType:
      CSharp:
      - name: TEvent
      VB:
      - name: TEvent
    qualifiedName:
      CSharp:
      - name: TEvent
      VB:
      - name: TEvent
    isDefinition: false
    definition: TEvent
    commentId: '!:TEvent'
  ZeroFramework.IArchitecture.SendEvent``1(``0):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IArchitecture.SendEvent``1(``0)
  ZeroFramework.IArchitecture.SendEvent``1({TEvent}):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: TEvent
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: TEvent
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: TEvent
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: TEvent
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: TEvent
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: TEvent
      - name: )
    isDefinition: false
    definition: ZeroFramework.IArchitecture.SendEvent``1(``0)
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.SendEvent``1(``0)
  Global.Action{{TEvent}}:
    name:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
    isDefinition: false
    definition: Global.Action`1
    commentId: '!:Global.Action{``0}'
  ZeroFramework.Architecture`1.RegisterEvent*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.RegisterEvent*
        name: RegisterEvent
      VB:
      - id: ZeroFramework.Architecture`1.RegisterEvent*
        name: RegisterEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterEvent*
        name: RegisterEvent
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterEvent*
        name: RegisterEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterEvent*
        name: RegisterEvent
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.RegisterEvent*
        name: RegisterEvent
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.RegisterEvent
  ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0}):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
  ZeroFramework.IArchitecture.RegisterEvent``1(Action{{TEvent}}):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.RegisterEvent``1(Action{``0})
  ZeroFramework.Architecture`1.UnRegisterEvent*:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1.UnRegisterEvent*
        name: UnRegisterEvent
      VB:
      - id: ZeroFramework.Architecture`1.UnRegisterEvent*
        name: UnRegisterEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterEvent*
        name: UnRegisterEvent
      VB:
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterEvent*
        name: UnRegisterEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterEvent*
        name: UnRegisterEvent
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1*
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Architecture`1.UnRegisterEvent*
        name: UnRegisterEvent
    isDefinition: true
    commentId: Overload:ZeroFramework.Architecture`1.UnRegisterEvent
  ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0}):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
  ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{{TEvent}}):
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.UnRegisterEvent``1(Action{``0})
  ZeroFramework.IArchitecture.UnRegisterEvent``1:
    name:
      CSharp:
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: .
      - id: ZeroFramework.IArchitecture.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IArchitecture
    commentId: M:ZeroFramework.IArchitecture.UnRegisterEvent``1
  ZeroFramework.ICanSetArchitecture:
    name:
      CSharp:
      - id: ZeroFramework.ICanSetArchitecture
        name: ICanSetArchitecture
      VB:
      - id: ZeroFramework.ICanSetArchitecture
        name: ICanSetArchitecture
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanSetArchitecture
        name: ICanSetArchitecture
      VB:
      - id: ZeroFramework.ICanSetArchitecture
        name: ICanSetArchitecture
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSetArchitecture
        name: ICanSetArchitecture
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSetArchitecture
        name: ICanSetArchitecture
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.ICanSetArchitecture
  ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture):
    name:
      CSharp:
      - id: ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
        name: SetArchitecture
      - name: (
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: )
      VB:
      - id: ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
        name: SetArchitecture
      - name: (
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanSetArchitecture
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
        name: SetArchitecture
      - name: (
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: )
      VB:
      - id: ZeroFramework.ICanSetArchitecture
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
        name: SetArchitecture
      - name: (
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSetArchitecture
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
        name: SetArchitecture
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSetArchitecture
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
        name: SetArchitecture
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IArchitecture
        name: IArchitecture
      - name: )
    isDefinition: true
    parent: ZeroFramework.ICanSetArchitecture
    commentId: M:ZeroFramework.ICanSetArchitecture.SetArchitecture(ZeroFramework.IArchitecture)
  ZeroFramework.ICommand.Execute*:
    name:
      CSharp:
      - id: ZeroFramework.ICommand.Execute*
        name: Execute
      VB:
      - id: ZeroFramework.ICommand.Execute*
        name: Execute
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommand*
        name: ICommand
      - name: .
      - id: ZeroFramework.ICommand.Execute*
        name: Execute
      VB:
      - id: ZeroFramework.ICommand*
        name: ICommand
      - name: .
      - id: ZeroFramework.ICommand.Execute*
        name: Execute
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand*
        name: ICommand
      - name: .
      - id: ZeroFramework.ICommand.Execute*
        name: Execute
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand*
        name: ICommand
      - name: .
      - id: ZeroFramework.ICommand.Execute*
        name: Execute
    isDefinition: true
    commentId: Overload:ZeroFramework.ICommand.Execute
  ZeroFramework.ICommand`1.Execute*:
    name:
      CSharp:
      - id: ZeroFramework.ICommand`1.Execute*
        name: Execute
      VB:
      - id: ZeroFramework.ICommand`1.Execute*
        name: Execute
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommand`1*
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommand`1.Execute*
        name: Execute
      VB:
      - id: ZeroFramework.ICommand`1*
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: .
      - id: ZeroFramework.ICommand`1.Execute*
        name: Execute
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1*
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommand`1.Execute*
        name: Execute
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1*
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: .
      - id: ZeroFramework.ICommand`1.Execute*
        name: Execute
    isDefinition: true
    commentId: Overload:ZeroFramework.ICommand`1.Execute
  ZeroFramework.ICanSendEvent:
    name:
      CSharp:
      - id: ZeroFramework.ICanSendEvent
        name: ICanSendEvent
      VB:
      - id: ZeroFramework.ICanSendEvent
        name: ICanSendEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanSendEvent
        name: ICanSendEvent
      VB:
      - id: ZeroFramework.ICanSendEvent
        name: ICanSendEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSendEvent
        name: ICanSendEvent
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSendEvent
        name: ICanSendEvent
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.ICanSendEvent
  ZeroFramework.AbstractCommand.ZeroFramework#IBelongToArchitecture#GetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.AbstractCommand.ZeroFramework#IBelongToArchitecture#GetArchitecture*
        name: GetArchitecture
      VB: []
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractCommand*
        name: AbstractCommand
      - name: .
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.AbstractCommand.ZeroFramework#IBelongToArchitecture#GetArchitecture*
        name: GetArchitecture
      VB: []
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand*
        name: AbstractCommand
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.AbstractCommand.ZeroFramework#IBelongToArchitecture#GetArchitecture*
        name: GetArchitecture
      VB: []
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractCommand.ZeroFramework#IBelongToArchitecture#GetArchitecture
  ZeroFramework.AbstractCommand.ZeroFramework#ICanSetArchitecture#SetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.AbstractCommand.ZeroFramework#ICanSetArchitecture#SetArchitecture*
        name: SetArchitecture
      VB: []
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractCommand*
        name: AbstractCommand
      - name: .
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.AbstractCommand.ZeroFramework#ICanSetArchitecture#SetArchitecture*
        name: SetArchitecture
      VB: []
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand*
        name: AbstractCommand
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.AbstractCommand.ZeroFramework#ICanSetArchitecture#SetArchitecture*
        name: SetArchitecture
      VB: []
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractCommand.ZeroFramework#ICanSetArchitecture#SetArchitecture
  ZeroFramework.AbstractCommand.ZeroFramework#ICommand#Execute*:
    name:
      CSharp:
      - id: ZeroFramework.ICommand*
        name: ICommand
      - name: .
      - id: ZeroFramework.AbstractCommand.ZeroFramework#ICommand#Execute*
        name: Execute
      VB: []
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractCommand*
        name: AbstractCommand
      - name: .
      - id: ZeroFramework.ICommand*
        name: ICommand
      - name: .
      - id: ZeroFramework.AbstractCommand.ZeroFramework#ICommand#Execute*
        name: Execute
      VB: []
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand*
        name: AbstractCommand
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand*
        name: ICommand
      - name: .
      - id: ZeroFramework.AbstractCommand.ZeroFramework#ICommand#Execute*
        name: Execute
      VB: []
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractCommand.ZeroFramework#ICommand#Execute
  ZeroFramework.ICommand.Execute:
    name:
      CSharp:
      - id: ZeroFramework.ICommand.Execute
        name: Execute
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICommand.Execute
        name: Execute
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: .
      - id: ZeroFramework.ICommand.Execute
        name: Execute
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: .
      - id: ZeroFramework.ICommand.Execute
        name: Execute
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: .
      - id: ZeroFramework.ICommand.Execute
        name: Execute
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: .
      - id: ZeroFramework.ICommand.Execute
        name: Execute
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.ICommand
    commentId: M:ZeroFramework.ICommand.Execute
  ZeroFramework.AbstractCommand.OnExecute*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractCommand.OnExecute*
        name: OnExecute
      VB:
      - id: ZeroFramework.AbstractCommand.OnExecute*
        name: OnExecute
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractCommand*
        name: AbstractCommand
      - name: .
      - id: ZeroFramework.AbstractCommand.OnExecute*
        name: OnExecute
      VB:
      - id: ZeroFramework.AbstractCommand*
        name: AbstractCommand
      - name: .
      - id: ZeroFramework.AbstractCommand.OnExecute*
        name: OnExecute
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand*
        name: AbstractCommand
      - name: .
      - id: ZeroFramework.AbstractCommand.OnExecute*
        name: OnExecute
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand*
        name: AbstractCommand
      - name: .
      - id: ZeroFramework.AbstractCommand.OnExecute*
        name: OnExecute
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractCommand.OnExecute
  ZeroFramework.AbstractCommand:
    name:
      CSharp:
      - id: ZeroFramework.AbstractCommand
        name: AbstractCommand
      VB:
      - id: ZeroFramework.AbstractCommand
        name: AbstractCommand
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractCommand
        name: AbstractCommand
      VB:
      - id: ZeroFramework.AbstractCommand
        name: AbstractCommand
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand
        name: AbstractCommand
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand
        name: AbstractCommand
    isDefinition: true
    commentId: T:ZeroFramework.AbstractCommand
  ZeroFramework.AbstractCommand`1.ZeroFramework#IBelongToArchitecture#GetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.AbstractCommand`1.ZeroFramework#IBelongToArchitecture#GetArchitecture*
        name: GetArchitecture
      VB: []
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractCommand`1*
        name: AbstractCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.AbstractCommand`1.ZeroFramework#IBelongToArchitecture#GetArchitecture*
        name: GetArchitecture
      VB: []
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand`1*
        name: AbstractCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.AbstractCommand`1.ZeroFramework#IBelongToArchitecture#GetArchitecture*
        name: GetArchitecture
      VB: []
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractCommand`1.ZeroFramework#IBelongToArchitecture#GetArchitecture
  ZeroFramework.AbstractCommand`1.ZeroFramework#ICanSetArchitecture#SetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.AbstractCommand`1.ZeroFramework#ICanSetArchitecture#SetArchitecture*
        name: SetArchitecture
      VB: []
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractCommand`1*
        name: AbstractCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.AbstractCommand`1.ZeroFramework#ICanSetArchitecture#SetArchitecture*
        name: SetArchitecture
      VB: []
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand`1*
        name: AbstractCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.AbstractCommand`1.ZeroFramework#ICanSetArchitecture#SetArchitecture*
        name: SetArchitecture
      VB: []
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractCommand`1.ZeroFramework#ICanSetArchitecture#SetArchitecture
  ZeroFramework.AbstractCommand`1.ZeroFramework#ICommand{TResult}#Execute*:
    name:
      CSharp:
      - id: ZeroFramework.ICommand`1*
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.AbstractCommand`1.ZeroFramework#ICommand{TResult}#Execute*
        name: Execute
      VB: []
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractCommand`1*
        name: AbstractCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommand`1*
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.AbstractCommand`1.ZeroFramework#ICommand{TResult}#Execute*
        name: Execute
      VB: []
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand`1*
        name: AbstractCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1*
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.AbstractCommand`1.ZeroFramework#ICommand{TResult}#Execute*
        name: Execute
      VB: []
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractCommand`1.ZeroFramework#ICommand{TResult}#Execute
  ZeroFramework.ICommand`1.Execute:
    name:
      CSharp:
      - id: ZeroFramework.ICommand`1.Execute
        name: Execute
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICommand`1.Execute
        name: Execute
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommand`1.Execute
        name: Execute
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: .
      - id: ZeroFramework.ICommand`1.Execute
        name: Execute
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommand`1.Execute
        name: Execute
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: .
      - id: ZeroFramework.ICommand`1.Execute
        name: Execute
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.ICommand`1.Execute
  ZeroFramework.ICommand{{TResult}}.Execute:
    name:
      CSharp:
      - id: ZeroFramework.ICommand{`0}.Execute
        name: Execute
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICommand{`0}.Execute
        name: Execute
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommand{`0}.Execute
        name: Execute
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: .
      - id: ZeroFramework.ICommand{`0}.Execute
        name: Execute
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommand{`0}.Execute
        name: Execute
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: .
      - id: ZeroFramework.ICommand{`0}.Execute
        name: Execute
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.ICommand`1.Execute
    parent: ZeroFramework.ICommand{{TResult}}
    commentId: M:ZeroFramework.ICommand{`0}.Execute
  ZeroFramework.AbstractCommand`1.OnExecute*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractCommand`1.OnExecute*
        name: OnExecute
      VB:
      - id: ZeroFramework.AbstractCommand`1.OnExecute*
        name: OnExecute
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractCommand`1*
        name: AbstractCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.AbstractCommand`1.OnExecute*
        name: OnExecute
      VB:
      - id: ZeroFramework.AbstractCommand`1*
        name: AbstractCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: .
      - id: ZeroFramework.AbstractCommand`1.OnExecute*
        name: OnExecute
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand`1*
        name: AbstractCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.AbstractCommand`1.OnExecute*
        name: OnExecute
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand`1*
        name: AbstractCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: .
      - id: ZeroFramework.AbstractCommand`1.OnExecute*
        name: OnExecute
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractCommand`1.OnExecute
  ZeroFramework.AbstractCommand`1:
    name:
      CSharp:
      - id: ZeroFramework.AbstractCommand`1
        name: AbstractCommand
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework.AbstractCommand`1
        name: AbstractCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractCommand`1
        name: AbstractCommand
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework.AbstractCommand`1
        name: AbstractCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand`1
        name: AbstractCommand
      - name: <
      - name: TResult
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractCommand`1
        name: AbstractCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.AbstractCommand`1
  ZeroFramework.IOCTypeContainer.Register*:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer.Register*
        name: Register
      VB:
      - id: ZeroFramework.IOCTypeContainer.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Register*
        name: Register
      VB:
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCTypeContainer.Register
  ZeroFramework.IOCTypeContainer.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IOCTypeContainer.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCTypeContainer.UnRegister
  ZeroFramework.IOCTypeContainer.Containes*:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer.Containes*
        name: Containes
      VB:
      - id: ZeroFramework.IOCTypeContainer.Containes*
        name: Containes
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Containes*
        name: Containes
      VB:
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Containes*
        name: Containes
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Containes*
        name: Containes
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Containes*
        name: Containes
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCTypeContainer.Containes
  ZeroFramework.IOCTypeContainer.Get*:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer.Get*
        name: Get
      VB:
      - id: ZeroFramework.IOCTypeContainer.Get*
        name: Get
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Get*
        name: Get
      VB:
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Get*
        name: Get
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Get*
        name: Get
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Get*
        name: Get
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCTypeContainer.Get
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic:
    name:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
    nameWithType:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.IEnumerable{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{``0}
  ZeroFramework.IOCTypeContainer.GetInstancesByType*:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer.GetInstancesByType*
        name: GetInstancesByType
      VB:
      - id: ZeroFramework.IOCTypeContainer.GetInstancesByType*
        name: GetInstancesByType
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.GetInstancesByType*
        name: GetInstancesByType
      VB:
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.GetInstancesByType*
        name: GetInstancesByType
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.GetInstancesByType*
        name: GetInstancesByType
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.GetInstancesByType*
        name: GetInstancesByType
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCTypeContainer.GetInstancesByType
  ZeroFramework.IOCTypeContainer.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.IOCTypeContainer.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer*
        name: IOCTypeContainer
      - name: .
      - id: ZeroFramework.IOCTypeContainer.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCTypeContainer.Clear
  ZeroFramework.IOCTypeContainer:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer
        name: IOCTypeContainer
      VB:
      - id: ZeroFramework.IOCTypeContainer
        name: IOCTypeContainer
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer
        name: IOCTypeContainer
      VB:
      - id: ZeroFramework.IOCTypeContainer
        name: IOCTypeContainer
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer
        name: IOCTypeContainer
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer
        name: IOCTypeContainer
    isDefinition: true
    commentId: T:ZeroFramework.IOCTypeContainer
  System.String:
    name:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      VB:
      - id: System.String
        name: String
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      VB:
      - id: System.String
        name: String
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      VB:
      - id: System.String
        name: String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  ZeroFramework.IOCStrContainer.Register*:
    name:
      CSharp:
      - id: ZeroFramework.IOCStrContainer.Register*
        name: Register
      VB:
      - id: ZeroFramework.IOCStrContainer.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Register*
        name: Register
      VB:
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCStrContainer.Register
  ZeroFramework.IOCStrContainer.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.IOCStrContainer.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IOCStrContainer.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCStrContainer.UnRegister
  ZeroFramework.IOCStrContainer.Containes*:
    name:
      CSharp:
      - id: ZeroFramework.IOCStrContainer.Containes*
        name: Containes
      VB:
      - id: ZeroFramework.IOCStrContainer.Containes*
        name: Containes
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Containes*
        name: Containes
      VB:
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Containes*
        name: Containes
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Containes*
        name: Containes
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Containes*
        name: Containes
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCStrContainer.Containes
  ZeroFramework.IOCStrContainer.Get*:
    name:
      CSharp:
      - id: ZeroFramework.IOCStrContainer.Get*
        name: Get
      VB:
      - id: ZeroFramework.IOCStrContainer.Get*
        name: Get
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Get*
        name: Get
      VB:
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Get*
        name: Get
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Get*
        name: Get
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Get*
        name: Get
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCStrContainer.Get
  ZeroFramework.IOCStrContainer.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.IOCStrContainer.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.IOCStrContainer.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCStrContainer*
        name: IOCStrContainer
      - name: .
      - id: ZeroFramework.IOCStrContainer.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCStrContainer.Clear
  ZeroFramework.IOCStrContainer:
    name:
      CSharp:
      - id: ZeroFramework.IOCStrContainer
        name: IOCStrContainer
      VB:
      - id: ZeroFramework.IOCStrContainer
        name: IOCStrContainer
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCStrContainer
        name: IOCStrContainer
      VB:
      - id: ZeroFramework.IOCStrContainer
        name: IOCStrContainer
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCStrContainer
        name: IOCStrContainer
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCStrContainer
        name: IOCStrContainer
    isDefinition: true
    commentId: T:ZeroFramework.IOCStrContainer
  TValue:
    name:
      CSharp:
      - name: TValue
      VB:
      - name: TValue
    nameWithType:
      CSharp:
      - name: TValue
      VB:
      - name: TValue
    qualifiedName:
      CSharp:
      - name: TValue
      VB:
      - name: TValue
    isDefinition: true
  '{TValue}':
    name:
      CSharp:
      - name: TValue
      VB:
      - name: TValue
    nameWithType:
      CSharp:
      - name: TValue
      VB:
      - name: TValue
    qualifiedName:
      CSharp:
      - name: TValue
      VB:
      - name: TValue
    isDefinition: false
    definition: TValue
    commentId: '!:TValue'
  ZeroFramework.IOCTypeContainer`1.Register*:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.IOCTypeContainer`1.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCTypeContainer`1.Register
  ZeroFramework.IOCTypeContainer`1.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IOCTypeContainer`1.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCTypeContainer`1.UnRegister
  ZeroFramework.IOCTypeContainer`1.Containes*:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1.Containes*
        name: Containes
      VB:
      - id: ZeroFramework.IOCTypeContainer`1.Containes*
        name: Containes
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Containes*
        name: Containes
      VB:
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Containes*
        name: Containes
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Containes*
        name: Containes
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Containes*
        name: Containes
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCTypeContainer`1.Containes
  ZeroFramework.IOCTypeContainer`1.Get*:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1.Get*
        name: Get
      VB:
      - id: ZeroFramework.IOCTypeContainer`1.Get*
        name: Get
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Get*
        name: Get
      VB:
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Get*
        name: Get
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Get*
        name: Get
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Get*
        name: Get
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCTypeContainer`1.Get
  System.Collections.Generic.IEnumerable{{TValue}}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - name: TValue
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - name: TValue
      - name: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: <
      - name: TValue
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{`0}
  ZeroFramework.IOCTypeContainer`1.GetInstancesByType*:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1.GetInstancesByType*
        name: GetInstancesByType
      VB:
      - id: ZeroFramework.IOCTypeContainer`1.GetInstancesByType*
        name: GetInstancesByType
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.GetInstancesByType*
        name: GetInstancesByType
      VB:
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.GetInstancesByType*
        name: GetInstancesByType
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.GetInstancesByType*
        name: GetInstancesByType
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.GetInstancesByType*
        name: GetInstancesByType
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCTypeContainer`1.GetInstancesByType
  ZeroFramework.IOCTypeContainer`1.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.IOCTypeContainer`1.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1*
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.IOCTypeContainer`1.Clear
  ZeroFramework.IOCTypeContainer`1:
    name:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      VB:
      - id: ZeroFramework.IOCTypeContainer`1
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IOCTypeContainer`1
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      VB:
      - id: ZeroFramework.IOCTypeContainer`1
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1
        name: IOCTypeContainer
      - name: <
      - name: TValue
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IOCTypeContainer`1
        name: IOCTypeContainer
      - name: (
      - name: Of
      - name: " "
      - name: TValue
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.IOCTypeContainer`1
  ZeroFramework.ICanInit:
    name:
      CSharp:
      - id: ZeroFramework.ICanInit
        name: ICanInit
      VB:
      - id: ZeroFramework.ICanInit
        name: ICanInit
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanInit
        name: ICanInit
      VB:
      - id: ZeroFramework.ICanInit
        name: ICanInit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit
        name: ICanInit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit
        name: ICanInit
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.ICanInit
  ZeroFramework.ICanInit.Initialized:
    name:
      CSharp:
      - id: ZeroFramework.ICanInit.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework.ICanInit.Initialized
        name: Initialized
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanInit
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework.ICanInit
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Initialized
        name: Initialized
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Initialized
        name: Initialized
    isDefinition: true
    parent: ZeroFramework.ICanInit
    commentId: P:ZeroFramework.ICanInit.Initialized
  ZeroFramework.ICanInit.Init:
    name:
      CSharp:
      - id: ZeroFramework.ICanInit.Init
        name: Init
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICanInit.Init
        name: Init
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanInit
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Init
        name: Init
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICanInit
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Init
        name: Init
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Init
        name: Init
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Init
        name: Init
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.ICanInit
    commentId: M:ZeroFramework.ICanInit.Init
  ZeroFramework.ICanInit.Deinit:
    name:
      CSharp:
      - id: ZeroFramework.ICanInit.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICanInit.Deinit
        name: Deinit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanInit
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICanInit
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Deinit
        name: Deinit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Deinit
        name: Deinit
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.ICanInit
    commentId: M:ZeroFramework.ICanInit.Deinit
  ZeroFramework.IModel:
    name:
      CSharp:
      - id: ZeroFramework.IModel
        name: IModel
      VB:
      - id: ZeroFramework.IModel
        name: IModel
    nameWithType:
      CSharp:
      - id: ZeroFramework.IModel
        name: IModel
      VB:
      - id: ZeroFramework.IModel
        name: IModel
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IModel
        name: IModel
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IModel
        name: IModel
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.IModel
  ZeroFramework.AbstractModel.ZeroFramework#IBelongToArchitecture#GetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.AbstractModel.ZeroFramework#IBelongToArchitecture#GetArchitecture*
        name: GetArchitecture
      VB: []
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.AbstractModel.ZeroFramework#IBelongToArchitecture#GetArchitecture*
        name: GetArchitecture
      VB: []
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.AbstractModel.ZeroFramework#IBelongToArchitecture#GetArchitecture*
        name: GetArchitecture
      VB: []
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractModel.ZeroFramework#IBelongToArchitecture#GetArchitecture
  ZeroFramework.AbstractModel.ZeroFramework#ICanSetArchitecture#SetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.AbstractModel.ZeroFramework#ICanSetArchitecture#SetArchitecture*
        name: SetArchitecture
      VB: []
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.AbstractModel.ZeroFramework#ICanSetArchitecture#SetArchitecture*
        name: SetArchitecture
      VB: []
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.AbstractModel.ZeroFramework#ICanSetArchitecture#SetArchitecture*
        name: SetArchitecture
      VB: []
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractModel.ZeroFramework#ICanSetArchitecture#SetArchitecture
  ZeroFramework.AbstractModel.Initialized*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractModel.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework.AbstractModel.Initialized*
        name: Initialized
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.Initialized*
        name: Initialized
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.Initialized*
        name: Initialized
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractModel.Initialized
  ZeroFramework.AbstractModel.ZeroFramework#ICanInit#Init*:
    name:
      CSharp:
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.AbstractModel.ZeroFramework#ICanInit#Init*
        name: Init
      VB: []
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.AbstractModel.ZeroFramework#ICanInit#Init*
        name: Init
      VB: []
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.AbstractModel.ZeroFramework#ICanInit#Init*
        name: Init
      VB: []
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractModel.ZeroFramework#ICanInit#Init
  ZeroFramework.AbstractModel.Deinit*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractModel.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework.AbstractModel.Deinit*
        name: Deinit
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.Deinit*
        name: Deinit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.Deinit*
        name: Deinit
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractModel.Deinit
  ZeroFramework.AbstractModel.OnDeinit*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractModel.OnDeinit*
        name: OnDeinit
      VB:
      - id: ZeroFramework.AbstractModel.OnDeinit*
        name: OnDeinit
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.OnDeinit*
        name: OnDeinit
      VB:
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.OnDeinit*
        name: OnDeinit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.OnDeinit*
        name: OnDeinit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.OnDeinit*
        name: OnDeinit
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractModel.OnDeinit
  ZeroFramework.AbstractModel.OnInit*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractModel.OnInit*
        name: OnInit
      VB:
      - id: ZeroFramework.AbstractModel.OnInit*
        name: OnInit
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.OnInit*
        name: OnInit
      VB:
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.OnInit*
        name: OnInit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.OnInit*
        name: OnInit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractModel*
        name: AbstractModel
      - name: .
      - id: ZeroFramework.AbstractModel.OnInit*
        name: OnInit
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractModel.OnInit
  ZeroFramework.AbstractModel:
    name:
      CSharp:
      - id: ZeroFramework.AbstractModel
        name: AbstractModel
      VB:
      - id: ZeroFramework.AbstractModel
        name: AbstractModel
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractModel
        name: AbstractModel
      VB:
      - id: ZeroFramework.AbstractModel
        name: AbstractModel
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractModel
        name: AbstractModel
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractModel
        name: AbstractModel
    isDefinition: true
    commentId: T:ZeroFramework.AbstractModel
  ZeroFramework.IQuery`1.Do*:
    name:
      CSharp:
      - id: ZeroFramework.IQuery`1.Do*
        name: Do
      VB:
      - id: ZeroFramework.IQuery`1.Do*
        name: Do
    nameWithType:
      CSharp:
      - id: ZeroFramework.IQuery`1*
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.IQuery`1.Do*
        name: Do
      VB:
      - id: ZeroFramework.IQuery`1*
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: .
      - id: ZeroFramework.IQuery`1.Do*
        name: Do
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1*
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.IQuery`1.Do*
        name: Do
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1*
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: .
      - id: ZeroFramework.IQuery`1.Do*
        name: Do
    isDefinition: true
    commentId: Overload:ZeroFramework.IQuery`1.Do
  ZeroFramework.IQuery{{T}}:
    name:
      CSharp:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: ZeroFramework.IQuery`1
    parent: ZeroFramework
    commentId: T:ZeroFramework.IQuery{`0}
  ZeroFramework.AbstractQuery`1.Do*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractQuery`1.Do*
        name: Do
      VB:
      - id: ZeroFramework.AbstractQuery`1.Do*
        name: Do
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.AbstractQuery`1.Do*
        name: Do
      VB:
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.AbstractQuery`1.Do*
        name: Do
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.AbstractQuery`1.Do*
        name: Do
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.AbstractQuery`1.Do*
        name: Do
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractQuery`1.Do
  ZeroFramework.IQuery`1.Do:
    name:
      CSharp:
      - id: ZeroFramework.IQuery`1.Do
        name: Do
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IQuery`1.Do
        name: Do
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.IQuery`1.Do
        name: Do
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: .
      - id: ZeroFramework.IQuery`1.Do
        name: Do
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: .
      - id: ZeroFramework.IQuery`1.Do
        name: Do
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: .
      - id: ZeroFramework.IQuery`1.Do
        name: Do
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IQuery`1.Do
  ZeroFramework.IQuery{{T}}.Do:
    name:
      CSharp:
      - id: ZeroFramework.IQuery{`0}.Do
        name: Do
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IQuery{`0}.Do
        name: Do
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IQuery{`0}.Do
        name: Do
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IQuery{`0}.Do
        name: Do
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IQuery{`0}.Do
        name: Do
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IQuery{`0}.Do
        name: Do
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.IQuery`1.Do
    parent: ZeroFramework.IQuery{{T}}
    commentId: M:ZeroFramework.IQuery{`0}.Do
  ZeroFramework.AbstractQuery`1.OnDo*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractQuery`1.OnDo*
        name: OnDo
      VB:
      - id: ZeroFramework.AbstractQuery`1.OnDo*
        name: OnDo
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.AbstractQuery`1.OnDo*
        name: OnDo
      VB:
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.AbstractQuery`1.OnDo*
        name: OnDo
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.AbstractQuery`1.OnDo*
        name: OnDo
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.AbstractQuery`1.OnDo*
        name: OnDo
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractQuery`1.OnDo
  ZeroFramework.AbstractQuery`1.GetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractQuery`1.GetArchitecture*
        name: GetArchitecture
      VB:
      - id: ZeroFramework.AbstractQuery`1.GetArchitecture*
        name: GetArchitecture
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.AbstractQuery`1.GetArchitecture*
        name: GetArchitecture
      VB:
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.AbstractQuery`1.GetArchitecture*
        name: GetArchitecture
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.AbstractQuery`1.GetArchitecture*
        name: GetArchitecture
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.AbstractQuery`1.GetArchitecture*
        name: GetArchitecture
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractQuery`1.GetArchitecture
  ZeroFramework.AbstractQuery`1.SetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractQuery`1.SetArchitecture*
        name: SetArchitecture
      VB:
      - id: ZeroFramework.AbstractQuery`1.SetArchitecture*
        name: SetArchitecture
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.AbstractQuery`1.SetArchitecture*
        name: SetArchitecture
      VB:
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.AbstractQuery`1.SetArchitecture*
        name: SetArchitecture
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.AbstractQuery`1.SetArchitecture*
        name: SetArchitecture
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractQuery`1*
        name: AbstractQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.AbstractQuery`1.SetArchitecture*
        name: SetArchitecture
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractQuery`1.SetArchitecture
  ZeroFramework.AbstractQuery`1:
    name:
      CSharp:
      - id: ZeroFramework.AbstractQuery`1
        name: AbstractQuery
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.AbstractQuery`1
        name: AbstractQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractQuery`1
        name: AbstractQuery
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.AbstractQuery`1
        name: AbstractQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractQuery`1
        name: AbstractQuery
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractQuery`1
        name: AbstractQuery
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.AbstractQuery`1
  ZeroFramework.IBelongToArchitecture.GetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.IBelongToArchitecture.GetArchitecture*
        name: GetArchitecture
      VB:
      - id: ZeroFramework.IBelongToArchitecture.GetArchitecture*
        name: GetArchitecture
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.IBelongToArchitecture.GetArchitecture*
        name: GetArchitecture
      VB:
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.IBelongToArchitecture.GetArchitecture*
        name: GetArchitecture
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.IBelongToArchitecture.GetArchitecture*
        name: GetArchitecture
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.IBelongToArchitecture.GetArchitecture*
        name: GetArchitecture
    isDefinition: true
    commentId: Overload:ZeroFramework.IBelongToArchitecture.GetArchitecture
  ZeroFramework.ICanSetArchitecture.SetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.ICanSetArchitecture.SetArchitecture*
        name: SetArchitecture
      VB:
      - id: ZeroFramework.ICanSetArchitecture.SetArchitecture*
        name: SetArchitecture
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.ICanSetArchitecture.SetArchitecture*
        name: SetArchitecture
      VB:
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.ICanSetArchitecture.SetArchitecture*
        name: SetArchitecture
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.ICanSetArchitecture.SetArchitecture*
        name: SetArchitecture
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.ICanSetArchitecture.SetArchitecture*
        name: SetArchitecture
    isDefinition: true
    commentId: Overload:ZeroFramework.ICanSetArchitecture.SetArchitecture
  ZeroFramework.CanGetModelExtension.GetModel*:
    name:
      CSharp:
      - id: ZeroFramework.CanGetModelExtension.GetModel*
        name: GetModel
      VB:
      - id: ZeroFramework.CanGetModelExtension.GetModel*
        name: GetModel
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanGetModelExtension*
        name: CanGetModelExtension
      - name: .
      - id: ZeroFramework.CanGetModelExtension.GetModel*
        name: GetModel
      VB:
      - id: ZeroFramework.CanGetModelExtension*
        name: CanGetModelExtension
      - name: .
      - id: ZeroFramework.CanGetModelExtension.GetModel*
        name: GetModel
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanGetModelExtension*
        name: CanGetModelExtension
      - name: .
      - id: ZeroFramework.CanGetModelExtension.GetModel*
        name: GetModel
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanGetModelExtension*
        name: CanGetModelExtension
      - name: .
      - id: ZeroFramework.CanGetModelExtension.GetModel*
        name: GetModel
    isDefinition: true
    commentId: Overload:ZeroFramework.CanGetModelExtension.GetModel
  ZeroFramework.CanGetModelExtension:
    name:
      CSharp:
      - id: ZeroFramework.CanGetModelExtension
        name: CanGetModelExtension
      VB:
      - id: ZeroFramework.CanGetModelExtension
        name: CanGetModelExtension
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanGetModelExtension
        name: CanGetModelExtension
      VB:
      - id: ZeroFramework.CanGetModelExtension
        name: CanGetModelExtension
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanGetModelExtension
        name: CanGetModelExtension
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanGetModelExtension
        name: CanGetModelExtension
    isDefinition: true
    commentId: T:ZeroFramework.CanGetModelExtension
  ZeroFramework.CanGetSystemExtension.GetSystem*:
    name:
      CSharp:
      - id: ZeroFramework.CanGetSystemExtension.GetSystem*
        name: GetSystem
      VB:
      - id: ZeroFramework.CanGetSystemExtension.GetSystem*
        name: GetSystem
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanGetSystemExtension*
        name: CanGetSystemExtension
      - name: .
      - id: ZeroFramework.CanGetSystemExtension.GetSystem*
        name: GetSystem
      VB:
      - id: ZeroFramework.CanGetSystemExtension*
        name: CanGetSystemExtension
      - name: .
      - id: ZeroFramework.CanGetSystemExtension.GetSystem*
        name: GetSystem
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanGetSystemExtension*
        name: CanGetSystemExtension
      - name: .
      - id: ZeroFramework.CanGetSystemExtension.GetSystem*
        name: GetSystem
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanGetSystemExtension*
        name: CanGetSystemExtension
      - name: .
      - id: ZeroFramework.CanGetSystemExtension.GetSystem*
        name: GetSystem
    isDefinition: true
    commentId: Overload:ZeroFramework.CanGetSystemExtension.GetSystem
  ZeroFramework.CanGetSystemExtension:
    name:
      CSharp:
      - id: ZeroFramework.CanGetSystemExtension
        name: CanGetSystemExtension
      VB:
      - id: ZeroFramework.CanGetSystemExtension
        name: CanGetSystemExtension
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanGetSystemExtension
        name: CanGetSystemExtension
      VB:
      - id: ZeroFramework.CanGetSystemExtension
        name: CanGetSystemExtension
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanGetSystemExtension
        name: CanGetSystemExtension
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanGetSystemExtension
        name: CanGetSystemExtension
    isDefinition: true
    commentId: T:ZeroFramework.CanGetSystemExtension
  ZeroFramework.CanGetUtilityExtension.GetUtility*:
    name:
      CSharp:
      - id: ZeroFramework.CanGetUtilityExtension.GetUtility*
        name: GetUtility
      VB:
      - id: ZeroFramework.CanGetUtilityExtension.GetUtility*
        name: GetUtility
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanGetUtilityExtension*
        name: CanGetUtilityExtension
      - name: .
      - id: ZeroFramework.CanGetUtilityExtension.GetUtility*
        name: GetUtility
      VB:
      - id: ZeroFramework.CanGetUtilityExtension*
        name: CanGetUtilityExtension
      - name: .
      - id: ZeroFramework.CanGetUtilityExtension.GetUtility*
        name: GetUtility
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanGetUtilityExtension*
        name: CanGetUtilityExtension
      - name: .
      - id: ZeroFramework.CanGetUtilityExtension.GetUtility*
        name: GetUtility
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanGetUtilityExtension*
        name: CanGetUtilityExtension
      - name: .
      - id: ZeroFramework.CanGetUtilityExtension.GetUtility*
        name: GetUtility
    isDefinition: true
    commentId: Overload:ZeroFramework.CanGetUtilityExtension.GetUtility
  ZeroFramework.CanGetUtilityExtension:
    name:
      CSharp:
      - id: ZeroFramework.CanGetUtilityExtension
        name: CanGetUtilityExtension
      VB:
      - id: ZeroFramework.CanGetUtilityExtension
        name: CanGetUtilityExtension
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanGetUtilityExtension
        name: CanGetUtilityExtension
      VB:
      - id: ZeroFramework.CanGetUtilityExtension
        name: CanGetUtilityExtension
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanGetUtilityExtension
        name: CanGetUtilityExtension
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanGetUtilityExtension
        name: CanGetUtilityExtension
    isDefinition: true
    commentId: T:ZeroFramework.CanGetUtilityExtension
  ZeroFramework.CanRegisterEventExtension.RegisterEvent*:
    name:
      CSharp:
      - id: ZeroFramework.CanRegisterEventExtension.RegisterEvent*
        name: RegisterEvent
      VB:
      - id: ZeroFramework.CanRegisterEventExtension.RegisterEvent*
        name: RegisterEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanRegisterEventExtension*
        name: CanRegisterEventExtension
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension.RegisterEvent*
        name: RegisterEvent
      VB:
      - id: ZeroFramework.CanRegisterEventExtension*
        name: CanRegisterEventExtension
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension.RegisterEvent*
        name: RegisterEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension*
        name: CanRegisterEventExtension
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension.RegisterEvent*
        name: RegisterEvent
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension*
        name: CanRegisterEventExtension
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension.RegisterEvent*
        name: RegisterEvent
    isDefinition: true
    commentId: Overload:ZeroFramework.CanRegisterEventExtension.RegisterEvent
  ZeroFramework.CanRegisterEventExtension.UnRegisterEvent*:
    name:
      CSharp:
      - id: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent*
        name: UnRegisterEvent
      VB:
      - id: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent*
        name: UnRegisterEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanRegisterEventExtension*
        name: CanRegisterEventExtension
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent*
        name: UnRegisterEvent
      VB:
      - id: ZeroFramework.CanRegisterEventExtension*
        name: CanRegisterEventExtension
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent*
        name: UnRegisterEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension*
        name: CanRegisterEventExtension
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent*
        name: UnRegisterEvent
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension*
        name: CanRegisterEventExtension
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension.UnRegisterEvent*
        name: UnRegisterEvent
    isDefinition: true
    commentId: Overload:ZeroFramework.CanRegisterEventExtension.UnRegisterEvent
  ZeroFramework.CanRegisterEventExtension:
    name:
      CSharp:
      - id: ZeroFramework.CanRegisterEventExtension
        name: CanRegisterEventExtension
      VB:
      - id: ZeroFramework.CanRegisterEventExtension
        name: CanRegisterEventExtension
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanRegisterEventExtension
        name: CanRegisterEventExtension
      VB:
      - id: ZeroFramework.CanRegisterEventExtension
        name: CanRegisterEventExtension
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension
        name: CanRegisterEventExtension
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanRegisterEventExtension
        name: CanRegisterEventExtension
    isDefinition: true
    commentId: T:ZeroFramework.CanRegisterEventExtension
  ZeroFramework.CanSendEventExtension.SendEvent*:
    name:
      CSharp:
      - id: ZeroFramework.CanSendEventExtension.SendEvent*
        name: SendEvent
      VB:
      - id: ZeroFramework.CanSendEventExtension.SendEvent*
        name: SendEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanSendEventExtension*
        name: CanSendEventExtension
      - name: .
      - id: ZeroFramework.CanSendEventExtension.SendEvent*
        name: SendEvent
      VB:
      - id: ZeroFramework.CanSendEventExtension*
        name: CanSendEventExtension
      - name: .
      - id: ZeroFramework.CanSendEventExtension.SendEvent*
        name: SendEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanSendEventExtension*
        name: CanSendEventExtension
      - name: .
      - id: ZeroFramework.CanSendEventExtension.SendEvent*
        name: SendEvent
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanSendEventExtension*
        name: CanSendEventExtension
      - name: .
      - id: ZeroFramework.CanSendEventExtension.SendEvent*
        name: SendEvent
    isDefinition: true
    commentId: Overload:ZeroFramework.CanSendEventExtension.SendEvent
  ZeroFramework.CanSendEventExtension:
    name:
      CSharp:
      - id: ZeroFramework.CanSendEventExtension
        name: CanSendEventExtension
      VB:
      - id: ZeroFramework.CanSendEventExtension
        name: CanSendEventExtension
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanSendEventExtension
        name: CanSendEventExtension
      VB:
      - id: ZeroFramework.CanSendEventExtension
        name: CanSendEventExtension
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanSendEventExtension
        name: CanSendEventExtension
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanSendEventExtension
        name: CanSendEventExtension
    isDefinition: true
    commentId: T:ZeroFramework.CanSendEventExtension
  ZeroFramework.CanSendCommandExtension.SendCommand*:
    name:
      CSharp:
      - id: ZeroFramework.CanSendCommandExtension.SendCommand*
        name: SendCommand
      VB:
      - id: ZeroFramework.CanSendCommandExtension.SendCommand*
        name: SendCommand
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanSendCommandExtension*
        name: CanSendCommandExtension
      - name: .
      - id: ZeroFramework.CanSendCommandExtension.SendCommand*
        name: SendCommand
      VB:
      - id: ZeroFramework.CanSendCommandExtension*
        name: CanSendCommandExtension
      - name: .
      - id: ZeroFramework.CanSendCommandExtension.SendCommand*
        name: SendCommand
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanSendCommandExtension*
        name: CanSendCommandExtension
      - name: .
      - id: ZeroFramework.CanSendCommandExtension.SendCommand*
        name: SendCommand
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanSendCommandExtension*
        name: CanSendCommandExtension
      - name: .
      - id: ZeroFramework.CanSendCommandExtension.SendCommand*
        name: SendCommand
    isDefinition: true
    commentId: Overload:ZeroFramework.CanSendCommandExtension.SendCommand
  ZeroFramework.CanSendCommandExtension:
    name:
      CSharp:
      - id: ZeroFramework.CanSendCommandExtension
        name: CanSendCommandExtension
      VB:
      - id: ZeroFramework.CanSendCommandExtension
        name: CanSendCommandExtension
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanSendCommandExtension
        name: CanSendCommandExtension
      VB:
      - id: ZeroFramework.CanSendCommandExtension
        name: CanSendCommandExtension
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanSendCommandExtension
        name: CanSendCommandExtension
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanSendCommandExtension
        name: CanSendCommandExtension
    isDefinition: true
    commentId: T:ZeroFramework.CanSendCommandExtension
  ZeroFramework.CanSendQueryExtension.SendQuery*:
    name:
      CSharp:
      - id: ZeroFramework.CanSendQueryExtension.SendQuery*
        name: SendQuery
      VB:
      - id: ZeroFramework.CanSendQueryExtension.SendQuery*
        name: SendQuery
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanSendQueryExtension*
        name: CanSendQueryExtension
      - name: .
      - id: ZeroFramework.CanSendQueryExtension.SendQuery*
        name: SendQuery
      VB:
      - id: ZeroFramework.CanSendQueryExtension*
        name: CanSendQueryExtension
      - name: .
      - id: ZeroFramework.CanSendQueryExtension.SendQuery*
        name: SendQuery
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanSendQueryExtension*
        name: CanSendQueryExtension
      - name: .
      - id: ZeroFramework.CanSendQueryExtension.SendQuery*
        name: SendQuery
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanSendQueryExtension*
        name: CanSendQueryExtension
      - name: .
      - id: ZeroFramework.CanSendQueryExtension.SendQuery*
        name: SendQuery
    isDefinition: true
    commentId: Overload:ZeroFramework.CanSendQueryExtension.SendQuery
  ZeroFramework.CanSendQueryExtension:
    name:
      CSharp:
      - id: ZeroFramework.CanSendQueryExtension
        name: CanSendQueryExtension
      VB:
      - id: ZeroFramework.CanSendQueryExtension
        name: CanSendQueryExtension
    nameWithType:
      CSharp:
      - id: ZeroFramework.CanSendQueryExtension
        name: CanSendQueryExtension
      VB:
      - id: ZeroFramework.CanSendQueryExtension
        name: CanSendQueryExtension
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanSendQueryExtension
        name: CanSendQueryExtension
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CanSendQueryExtension
        name: CanSendQueryExtension
    isDefinition: true
    commentId: T:ZeroFramework.CanSendQueryExtension
  ZeroFramework.ICanInit.Initialized*:
    name:
      CSharp:
      - id: ZeroFramework.ICanInit.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework.ICanInit.Initialized*
        name: Initialized
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Initialized*
        name: Initialized
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Initialized*
        name: Initialized
    isDefinition: true
    commentId: Overload:ZeroFramework.ICanInit.Initialized
  ZeroFramework.ICanInit.Init*:
    name:
      CSharp:
      - id: ZeroFramework.ICanInit.Init*
        name: Init
      VB:
      - id: ZeroFramework.ICanInit.Init*
        name: Init
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Init*
        name: Init
      VB:
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Init*
        name: Init
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Init*
        name: Init
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Init*
        name: Init
    isDefinition: true
    commentId: Overload:ZeroFramework.ICanInit.Init
  ZeroFramework.ICanInit.Deinit*:
    name:
      CSharp:
      - id: ZeroFramework.ICanInit.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework.ICanInit.Deinit*
        name: Deinit
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Deinit*
        name: Deinit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.ICanInit.Deinit*
        name: Deinit
    isDefinition: true
    commentId: Overload:ZeroFramework.ICanInit.Deinit
  ZeroFramework.ISystem:
    name:
      CSharp:
      - id: ZeroFramework.ISystem
        name: ISystem
      VB:
      - id: ZeroFramework.ISystem
        name: ISystem
    nameWithType:
      CSharp:
      - id: ZeroFramework.ISystem
        name: ISystem
      VB:
      - id: ZeroFramework.ISystem
        name: ISystem
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISystem
        name: ISystem
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISystem
        name: ISystem
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.ISystem
  ZeroFramework.AbstractSystem.ZeroFramework#IBelongToArchitecture#GetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.AbstractSystem.ZeroFramework#IBelongToArchitecture#GetArchitecture*
        name: GetArchitecture
      VB: []
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.AbstractSystem.ZeroFramework#IBelongToArchitecture#GetArchitecture*
        name: GetArchitecture
      VB: []
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBelongToArchitecture*
        name: IBelongToArchitecture
      - name: .
      - id: ZeroFramework.AbstractSystem.ZeroFramework#IBelongToArchitecture#GetArchitecture*
        name: GetArchitecture
      VB: []
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractSystem.ZeroFramework#IBelongToArchitecture#GetArchitecture
  ZeroFramework.AbstractSystem.ZeroFramework#ICanSetArchitecture#SetArchitecture*:
    name:
      CSharp:
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.AbstractSystem.ZeroFramework#ICanSetArchitecture#SetArchitecture*
        name: SetArchitecture
      VB: []
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.AbstractSystem.ZeroFramework#ICanSetArchitecture#SetArchitecture*
        name: SetArchitecture
      VB: []
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanSetArchitecture*
        name: ICanSetArchitecture
      - name: .
      - id: ZeroFramework.AbstractSystem.ZeroFramework#ICanSetArchitecture#SetArchitecture*
        name: SetArchitecture
      VB: []
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractSystem.ZeroFramework#ICanSetArchitecture#SetArchitecture
  ZeroFramework.AbstractSystem.Initialized*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractSystem.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework.AbstractSystem.Initialized*
        name: Initialized
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.Initialized*
        name: Initialized
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.Initialized*
        name: Initialized
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.Initialized*
        name: Initialized
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractSystem.Initialized
  ZeroFramework.AbstractSystem.ZeroFramework#ICanInit#Init*:
    name:
      CSharp:
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.AbstractSystem.ZeroFramework#ICanInit#Init*
        name: Init
      VB: []
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.AbstractSystem.ZeroFramework#ICanInit#Init*
        name: Init
      VB: []
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICanInit*
        name: ICanInit
      - name: .
      - id: ZeroFramework.AbstractSystem.ZeroFramework#ICanInit#Init*
        name: Init
      VB: []
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractSystem.ZeroFramework#ICanInit#Init
  ZeroFramework.AbstractSystem.Deinit*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractSystem.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework.AbstractSystem.Deinit*
        name: Deinit
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.Deinit*
        name: Deinit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.Deinit*
        name: Deinit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.Deinit*
        name: Deinit
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractSystem.Deinit
  ZeroFramework.AbstractSystem.OnDeinit*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractSystem.OnDeinit*
        name: OnDeinit
      VB:
      - id: ZeroFramework.AbstractSystem.OnDeinit*
        name: OnDeinit
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.OnDeinit*
        name: OnDeinit
      VB:
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.OnDeinit*
        name: OnDeinit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.OnDeinit*
        name: OnDeinit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.OnDeinit*
        name: OnDeinit
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractSystem.OnDeinit
  ZeroFramework.AbstractSystem.OnInit*:
    name:
      CSharp:
      - id: ZeroFramework.AbstractSystem.OnInit*
        name: OnInit
      VB:
      - id: ZeroFramework.AbstractSystem.OnInit*
        name: OnInit
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.OnInit*
        name: OnInit
      VB:
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.OnInit*
        name: OnInit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.OnInit*
        name: OnInit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractSystem*
        name: AbstractSystem
      - name: .
      - id: ZeroFramework.AbstractSystem.OnInit*
        name: OnInit
    isDefinition: true
    commentId: Overload:ZeroFramework.AbstractSystem.OnInit
  ZeroFramework.AbstractSystem:
    name:
      CSharp:
      - id: ZeroFramework.AbstractSystem
        name: AbstractSystem
      VB:
      - id: ZeroFramework.AbstractSystem
        name: AbstractSystem
    nameWithType:
      CSharp:
      - id: ZeroFramework.AbstractSystem
        name: AbstractSystem
      VB:
      - id: ZeroFramework.AbstractSystem
        name: AbstractSystem
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractSystem
        name: AbstractSystem
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.AbstractSystem
        name: AbstractSystem
    isDefinition: true
    commentId: T:ZeroFramework.AbstractSystem
  ZeroFramework.IUtility:
    name:
      CSharp:
      - id: ZeroFramework.IUtility
        name: IUtility
      VB:
      - id: ZeroFramework.IUtility
        name: IUtility
    nameWithType:
      CSharp:
      - id: ZeroFramework.IUtility
        name: IUtility
      VB:
      - id: ZeroFramework.IUtility
        name: IUtility
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IUtility
        name: IUtility
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IUtility
        name: IUtility
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.IUtility
  ZeroFramework.IBindableProperty`1:
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.IBindableProperty`1
  ZeroFramework.IBindableProperty{{T}}:
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: ZeroFramework.IBindableProperty`1
    parent: ZeroFramework
    commentId: T:ZeroFramework.IBindableProperty{`0}
  ZeroFramework.BindableProperty`1.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1.#ctor*
        name: BindableProperty
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.#ctor*
        name: BindableProperty
      VB:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.#ctor*
        name: BindableProperty
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.BindableProperty`1.#ctor
  ZeroFramework.BindableProperty`1.GetValue*:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1.GetValue*
        name: GetValue
      VB:
      - id: ZeroFramework.BindableProperty`1.GetValue*
        name: GetValue
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.GetValue*
        name: GetValue
      VB:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.GetValue*
        name: GetValue
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.GetValue*
        name: GetValue
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.GetValue*
        name: GetValue
    isDefinition: true
    commentId: Overload:ZeroFramework.BindableProperty`1.GetValue
  ZeroFramework.BindableProperty`1.SetValue*:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1.SetValue*
        name: SetValue
      VB:
      - id: ZeroFramework.BindableProperty`1.SetValue*
        name: SetValue
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.SetValue*
        name: SetValue
      VB:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.SetValue*
        name: SetValue
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.SetValue*
        name: SetValue
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.SetValue*
        name: SetValue
    isDefinition: true
    commentId: Overload:ZeroFramework.BindableProperty`1.SetValue
  Global.Func`3:
    name:
      CSharp:
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    isDefinition: true
  Global.Func{{T},{T},System.Boolean}:
    name:
      CSharp:
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.Func`3
    commentId: '!:Global.Func{`0,`0,System.Boolean}'
  ZeroFramework.BindableProperty`1.Comparer*:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1.Comparer*
        name: Comparer
      VB:
      - id: ZeroFramework.BindableProperty`1.Comparer*
        name: Comparer
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.Comparer*
        name: Comparer
      VB:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.Comparer*
        name: Comparer
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.Comparer*
        name: Comparer
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.Comparer*
        name: Comparer
    isDefinition: true
    commentId: Overload:ZeroFramework.BindableProperty`1.Comparer
  ZeroFramework.BindableProperty`1:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.BindableProperty`1
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.BindableProperty`1
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.BindableProperty`1
  ZeroFramework.BindableProperty`1.WithComparer*:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1.WithComparer*
        name: WithComparer
      VB:
      - id: ZeroFramework.BindableProperty`1.WithComparer*
        name: WithComparer
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.WithComparer*
        name: WithComparer
      VB:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.WithComparer*
        name: WithComparer
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.WithComparer*
        name: WithComparer
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.WithComparer*
        name: WithComparer
    isDefinition: true
    commentId: Overload:ZeroFramework.BindableProperty`1.WithComparer
  ZeroFramework.IBindableProperty`1.WithComparer(Func{`0,`0,System.Boolean}):
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.WithComparer(Func{`0,`0,System.Boolean})
        name: WithComparer
      - name: (
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1.WithComparer(Func{`0,`0,System.Boolean})
        name: WithComparer
      - name: (
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.WithComparer(Func{`0,`0,System.Boolean})
        name: WithComparer
      - name: (
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.WithComparer(Func{`0,`0,System.Boolean})
        name: WithComparer
      - name: (
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.WithComparer(Func{`0,`0,System.Boolean})
        name: WithComparer
      - name: (
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.WithComparer(Func{`0,`0,System.Boolean})
        name: WithComparer
      - name: (
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IBindableProperty`1.WithComparer(Func{`0,`0,System.Boolean})
  ZeroFramework.IBindableProperty{{T}}.WithComparer(Func{{T},{T},System.Boolean}):
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty{`0}.WithComparer(Func{`0,`0,System.Boolean})
        name: WithComparer
      - name: (
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty{`0}.WithComparer(Func{`0,`0,System.Boolean})
        name: WithComparer
      - name: (
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.WithComparer(Func{`0,`0,System.Boolean})
        name: WithComparer
      - name: (
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.WithComparer(Func{`0,`0,System.Boolean})
        name: WithComparer
      - name: (
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.WithComparer(Func{`0,`0,System.Boolean})
        name: WithComparer
      - name: (
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.WithComparer(Func{`0,`0,System.Boolean})
        name: WithComparer
      - name: (
      - id: Global.Func`3
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.IBindableProperty`1.WithComparer(Func{`0,`0,System.Boolean})
    parent: ZeroFramework.IBindableProperty{{T}}
    commentId: M:ZeroFramework.IBindableProperty{`0}.WithComparer(Func{`0,`0,System.Boolean})
  ZeroFramework.BindableProperty`1.Value*:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1.Value*
        name: Value
      VB:
      - id: ZeroFramework.BindableProperty`1.Value*
        name: Value
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.Value*
        name: Value
      VB:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.Value*
        name: Value
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.Value*
        name: Value
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.Value*
        name: Value
    isDefinition: true
    commentId: Overload:ZeroFramework.BindableProperty`1.Value
  ZeroFramework.IBindableProperty`1.Value:
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.Value
        name: Value
      VB:
      - id: ZeroFramework.IBindableProperty`1.Value
        name: Value
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Value
        name: Value
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Value
        name: Value
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Value
        name: Value
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Value
        name: Value
    isDefinition: true
    commentId: P:ZeroFramework.IBindableProperty`1.Value
  ZeroFramework.IBindableProperty{{T}}.Value:
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty{`0}.Value
        name: Value
      VB:
      - id: ZeroFramework.IBindableProperty{`0}.Value
        name: Value
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.Value
        name: Value
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.Value
        name: Value
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.Value
        name: Value
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.Value
        name: Value
    isDefinition: false
    definition: ZeroFramework.IBindableProperty`1.Value
    parent: ZeroFramework.IBindableProperty{{T}}
    commentId: P:ZeroFramework.IBindableProperty{`0}.Value
  ZeroFramework.BindableProperty`1.SetValueWithoutEvent*:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1.SetValueWithoutEvent*
        name: SetValueWithoutEvent
      VB:
      - id: ZeroFramework.BindableProperty`1.SetValueWithoutEvent*
        name: SetValueWithoutEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.SetValueWithoutEvent*
        name: SetValueWithoutEvent
      VB:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.SetValueWithoutEvent*
        name: SetValueWithoutEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.SetValueWithoutEvent*
        name: SetValueWithoutEvent
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.SetValueWithoutEvent*
        name: SetValueWithoutEvent
    isDefinition: true
    commentId: Overload:ZeroFramework.BindableProperty`1.SetValueWithoutEvent
  ZeroFramework.IBindableProperty`1.SetValueWithoutEvent(`0):
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent(`0)
        name: SetValueWithoutEvent
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent(`0)
        name: SetValueWithoutEvent
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent(`0)
        name: SetValueWithoutEvent
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent(`0)
        name: SetValueWithoutEvent
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent(`0)
        name: SetValueWithoutEvent
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent(`0)
        name: SetValueWithoutEvent
      - name: (
      - name: T
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IBindableProperty`1.SetValueWithoutEvent(`0)
  ZeroFramework.IBindableProperty{{T}}.SetValueWithoutEvent({T}):
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty{`0}.SetValueWithoutEvent(`0)
        name: SetValueWithoutEvent
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty{`0}.SetValueWithoutEvent(`0)
        name: SetValueWithoutEvent
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.SetValueWithoutEvent(`0)
        name: SetValueWithoutEvent
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.SetValueWithoutEvent(`0)
        name: SetValueWithoutEvent
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.SetValueWithoutEvent(`0)
        name: SetValueWithoutEvent
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.SetValueWithoutEvent(`0)
        name: SetValueWithoutEvent
      - name: (
      - name: T
      - name: )
    isDefinition: false
    definition: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent(`0)
    parent: ZeroFramework.IBindableProperty{{T}}
    commentId: M:ZeroFramework.IBindableProperty{`0}.SetValueWithoutEvent(`0)
  Global.Action`2:
    name:
      CSharp:
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    isDefinition: true
  Global.Action{{T},{T}}:
    name:
      CSharp:
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      VB:
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      VB:
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      VB:
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: Global.Action`2
    commentId: '!:Global.Action{`0,`0}'
  ZeroFramework.BindableProperty`1.Register*:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.BindableProperty`1.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.BindableProperty`1.Register
  ZeroFramework.IBindableProperty`1.Register(Action{`0,`0}):
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.Register(Action{`0,`0})
        name: Register
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1.Register(Action{`0,`0})
        name: Register
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Register(Action{`0,`0})
        name: Register
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Register(Action{`0,`0})
        name: Register
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Register(Action{`0,`0})
        name: Register
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Register(Action{`0,`0})
        name: Register
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IBindableProperty`1.Register(Action{`0,`0})
  ZeroFramework.IBindableProperty{{T}}.Register(Action{{T},{T}}):
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty{`0}.Register(Action{`0,`0})
        name: Register
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty{`0}.Register(Action{`0,`0})
        name: Register
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.Register(Action{`0,`0})
        name: Register
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.Register(Action{`0,`0})
        name: Register
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.Register(Action{`0,`0})
        name: Register
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.Register(Action{`0,`0})
        name: Register
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.IBindableProperty`1.Register(Action{`0,`0})
    parent: ZeroFramework.IBindableProperty{{T}}
    commentId: M:ZeroFramework.IBindableProperty{`0}.Register(Action{`0,`0})
  ZeroFramework.BindableProperty`1.RegisterWithInitValue*:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1.RegisterWithInitValue*
        name: RegisterWithInitValue
      VB:
      - id: ZeroFramework.BindableProperty`1.RegisterWithInitValue*
        name: RegisterWithInitValue
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.RegisterWithInitValue*
        name: RegisterWithInitValue
      VB:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.RegisterWithInitValue*
        name: RegisterWithInitValue
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.RegisterWithInitValue*
        name: RegisterWithInitValue
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.RegisterWithInitValue*
        name: RegisterWithInitValue
    isDefinition: true
    commentId: Overload:ZeroFramework.BindableProperty`1.RegisterWithInitValue
  ZeroFramework.IBindableProperty`1.RegisterWithInitValue(Action{`0,`0}):
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.RegisterWithInitValue(Action{`0,`0})
        name: RegisterWithInitValue
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1.RegisterWithInitValue(Action{`0,`0})
        name: RegisterWithInitValue
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.RegisterWithInitValue(Action{`0,`0})
        name: RegisterWithInitValue
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.RegisterWithInitValue(Action{`0,`0})
        name: RegisterWithInitValue
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.RegisterWithInitValue(Action{`0,`0})
        name: RegisterWithInitValue
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.RegisterWithInitValue(Action{`0,`0})
        name: RegisterWithInitValue
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IBindableProperty`1.RegisterWithInitValue(Action{`0,`0})
  ZeroFramework.IBindableProperty{{T}}.RegisterWithInitValue(Action{{T},{T}}):
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty{`0}.RegisterWithInitValue(Action{`0,`0})
        name: RegisterWithInitValue
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty{`0}.RegisterWithInitValue(Action{`0,`0})
        name: RegisterWithInitValue
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.RegisterWithInitValue(Action{`0,`0})
        name: RegisterWithInitValue
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.RegisterWithInitValue(Action{`0,`0})
        name: RegisterWithInitValue
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.RegisterWithInitValue(Action{`0,`0})
        name: RegisterWithInitValue
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.RegisterWithInitValue(Action{`0,`0})
        name: RegisterWithInitValue
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.IBindableProperty`1.RegisterWithInitValue(Action{`0,`0})
    parent: ZeroFramework.IBindableProperty{{T}}
    commentId: M:ZeroFramework.IBindableProperty{`0}.RegisterWithInitValue(Action{`0,`0})
  ZeroFramework.BindableProperty`1.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.BindableProperty`1.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.BindableProperty`1.UnRegister
  ZeroFramework.IBindableProperty`1.UnRegister(Action{`0,`0}):
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.UnRegister(Action{`0,`0})
        name: UnRegister
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1.UnRegister(Action{`0,`0})
        name: UnRegister
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.UnRegister(Action{`0,`0})
        name: UnRegister
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.UnRegister(Action{`0,`0})
        name: UnRegister
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.UnRegister(Action{`0,`0})
        name: UnRegister
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.UnRegister(Action{`0,`0})
        name: UnRegister
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IBindableProperty`1.UnRegister(Action{`0,`0})
  ZeroFramework.IBindableProperty{{T}}.UnRegister(Action{{T},{T}}):
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty{`0}.UnRegister(Action{`0,`0})
        name: UnRegister
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty{`0}.UnRegister(Action{`0,`0})
        name: UnRegister
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.UnRegister(Action{`0,`0})
        name: UnRegister
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.UnRegister(Action{`0,`0})
        name: UnRegister
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.UnRegister(Action{`0,`0})
        name: UnRegister
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.UnRegister(Action{`0,`0})
        name: UnRegister
      - name: (
      - id: Global.Action`2
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.IBindableProperty`1.UnRegister(Action{`0,`0})
    parent: ZeroFramework.IBindableProperty{{T}}
    commentId: M:ZeroFramework.IBindableProperty{`0}.UnRegister(Action{`0,`0})
  ZeroFramework.BindableProperty`1.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.BindableProperty`1.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.BindableProperty`1.Clear
  ZeroFramework.IBindableProperty`1.Clear:
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1.Clear
        name: Clear
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Clear
        name: Clear
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Clear
        name: Clear
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IBindableProperty`1.Clear
  ZeroFramework.IBindableProperty{{T}}.Clear:
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty{`0}.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty{`0}.Clear
        name: Clear
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.Clear
        name: Clear
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty{`0}.Clear
        name: Clear
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.IBindableProperty`1.Clear
    parent: ZeroFramework.IBindableProperty{{T}}
    commentId: M:ZeroFramework.IBindableProperty{`0}.Clear
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  ZeroFramework.BindableProperty`1.ToString*:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1.ToString*
        name: ToString
      VB:
      - id: ZeroFramework.BindableProperty`1.ToString*
        name: ToString
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.ToString*
        name: ToString
      VB:
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.ToString*
        name: ToString
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindableProperty`1.ToString*
        name: ToString
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1*
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindableProperty`1.ToString*
        name: ToString
    isDefinition: true
    commentId: Overload:ZeroFramework.BindableProperty`1.ToString
  ZeroFramework.BindableProperty{{T}}:
    name:
      CSharp:
      - id: ZeroFramework.BindableProperty`1
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.BindableProperty`1
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindableProperty`1
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.BindableProperty`1
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1
        name: BindableProperty
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindableProperty`1
        name: BindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: ZeroFramework.BindableProperty`1
    parent: ZeroFramework
    commentId: T:ZeroFramework.BindableProperty{`0}
  ZeroFramework.BindablePropertyUnRegister`1.BindableProperty*:
    name:
      CSharp:
      - id: ZeroFramework.BindablePropertyUnRegister`1.BindableProperty*
        name: BindableProperty
      VB:
      - id: ZeroFramework.BindablePropertyUnRegister`1.BindableProperty*
        name: BindableProperty
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.BindableProperty*
        name: BindableProperty
      VB:
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.BindableProperty*
        name: BindableProperty
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.BindableProperty*
        name: BindableProperty
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.BindableProperty*
        name: BindableProperty
    isDefinition: true
    commentId: Overload:ZeroFramework.BindablePropertyUnRegister`1.BindableProperty
  ZeroFramework.BindablePropertyUnRegister`1.OnValueChanged*:
    name:
      CSharp:
      - id: ZeroFramework.BindablePropertyUnRegister`1.OnValueChanged*
        name: OnValueChanged
      VB:
      - id: ZeroFramework.BindablePropertyUnRegister`1.OnValueChanged*
        name: OnValueChanged
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.OnValueChanged*
        name: OnValueChanged
      VB:
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.OnValueChanged*
        name: OnValueChanged
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.OnValueChanged*
        name: OnValueChanged
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.OnValueChanged*
        name: OnValueChanged
    isDefinition: true
    commentId: Overload:ZeroFramework.BindablePropertyUnRegister`1.OnValueChanged
  ZeroFramework.BindablePropertyUnRegister`1.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.BindablePropertyUnRegister`1.#ctor*
        name: BindablePropertyUnRegister
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.#ctor*
        name: BindablePropertyUnRegister
      VB:
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.#ctor*
        name: BindablePropertyUnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.BindablePropertyUnRegister`1.#ctor
  ZeroFramework.BindablePropertyUnRegister`1.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.BindablePropertyUnRegister`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.BindablePropertyUnRegister`1.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1*
        name: BindablePropertyUnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.BindablePropertyUnRegister`1.UnRegister
  ZeroFramework.IUnRegister.UnRegister:
    name:
      CSharp:
      - id: ZeroFramework.IUnRegister.UnRegister
        name: UnRegister
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IUnRegister.UnRegister
        name: UnRegister
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: .
      - id: ZeroFramework.IUnRegister.UnRegister
        name: UnRegister
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: .
      - id: ZeroFramework.IUnRegister.UnRegister
        name: UnRegister
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: .
      - id: ZeroFramework.IUnRegister.UnRegister
        name: UnRegister
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: .
      - id: ZeroFramework.IUnRegister.UnRegister
        name: UnRegister
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IUnRegister
    commentId: M:ZeroFramework.IUnRegister.UnRegister
  ZeroFramework.BindablePropertyUnRegister`1:
    name:
      CSharp:
      - id: ZeroFramework.BindablePropertyUnRegister`1
        name: BindablePropertyUnRegister
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.BindablePropertyUnRegister`1
        name: BindablePropertyUnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.BindablePropertyUnRegister`1
        name: BindablePropertyUnRegister
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.BindablePropertyUnRegister`1
        name: BindablePropertyUnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1
        name: BindablePropertyUnRegister
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.BindablePropertyUnRegister`1
        name: BindablePropertyUnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.BindablePropertyUnRegister`1
  ZeroFramework.IBindableProperty`1.WithComparer*:
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.WithComparer*
        name: WithComparer
      VB:
      - id: ZeroFramework.IBindableProperty`1.WithComparer*
        name: WithComparer
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.WithComparer*
        name: WithComparer
      VB:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.WithComparer*
        name: WithComparer
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.WithComparer*
        name: WithComparer
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.WithComparer*
        name: WithComparer
    isDefinition: true
    commentId: Overload:ZeroFramework.IBindableProperty`1.WithComparer
  ZeroFramework.IBindableProperty`1.Value*:
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.Value*
        name: Value
      VB:
      - id: ZeroFramework.IBindableProperty`1.Value*
        name: Value
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Value*
        name: Value
      VB:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Value*
        name: Value
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Value*
        name: Value
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Value*
        name: Value
    isDefinition: true
    commentId: Overload:ZeroFramework.IBindableProperty`1.Value
  ZeroFramework.IBindableProperty`1.SetValueWithoutEvent*:
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent*
        name: SetValueWithoutEvent
      VB:
      - id: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent*
        name: SetValueWithoutEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent*
        name: SetValueWithoutEvent
      VB:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent*
        name: SetValueWithoutEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent*
        name: SetValueWithoutEvent
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.SetValueWithoutEvent*
        name: SetValueWithoutEvent
    isDefinition: true
    commentId: Overload:ZeroFramework.IBindableProperty`1.SetValueWithoutEvent
  ZeroFramework.IBindableProperty`1.Register*:
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.IBindableProperty`1.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.IBindableProperty`1.Register
  ZeroFramework.IBindableProperty`1.RegisterWithInitValue*:
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.RegisterWithInitValue*
        name: RegisterWithInitValue
      VB:
      - id: ZeroFramework.IBindableProperty`1.RegisterWithInitValue*
        name: RegisterWithInitValue
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.RegisterWithInitValue*
        name: RegisterWithInitValue
      VB:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.RegisterWithInitValue*
        name: RegisterWithInitValue
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.RegisterWithInitValue*
        name: RegisterWithInitValue
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.RegisterWithInitValue*
        name: RegisterWithInitValue
    isDefinition: true
    commentId: Overload:ZeroFramework.IBindableProperty`1.RegisterWithInitValue
  ZeroFramework.IBindableProperty`1.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IBindableProperty`1.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.IBindableProperty`1.UnRegister
  ZeroFramework.IBindableProperty`1.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.IBindableProperty`1.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IBindableProperty`1*
        name: IBindableProperty
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IBindableProperty`1.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.IBindableProperty`1.Clear
  ZeroFramework.IEasyEvent:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      VB:
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      VB:
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.IEasyEvent
  ZeroFramework.IEasyEventCommon:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
      VB:
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
      VB:
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.IEasyEventCommon
  Global.Action:
    name:
      CSharp:
      - id: Global.Action
        name: Action
        isExternal: true
      VB:
      - id: Global.Action
        name: Action
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Action
        name: Action
        isExternal: true
      VB:
      - id: Global.Action
        name: Action
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Action
        name: Action
        isExternal: true
      VB:
      - id: Global.Action
        name: Action
        isExternal: true
    isDefinition: true
  ZeroFramework.EasyEvent.Register*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent.Register*
        name: Register
      VB:
      - id: ZeroFramework.EasyEvent.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.Register*
        name: Register
      VB:
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent.Register
  ZeroFramework.IEasyEvent.Register(Action):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent.Register(Action)
        name: Register
      - name: (
      - id: Global.Action
        name: Action
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent.Register(Action)
        name: Register
      - name: (
      - id: Global.Action
        name: Action
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Register(Action)
        name: Register
      - name: (
      - id: Global.Action
        name: Action
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Register(Action)
        name: Register
      - name: (
      - id: Global.Action
        name: Action
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Register(Action)
        name: Register
      - name: (
      - id: Global.Action
        name: Action
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Register(Action)
        name: Register
      - name: (
      - id: Global.Action
        name: Action
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.IEasyEvent
    commentId: M:ZeroFramework.IEasyEvent.Register(Action)
  ZeroFramework.EasyEvent.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.EasyEvent.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent.UnRegister
  ZeroFramework.IEasyEvent.UnRegister(Action):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent.UnRegister(Action)
        name: UnRegister
      - name: (
      - id: Global.Action
        name: Action
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent.UnRegister(Action)
        name: UnRegister
      - name: (
      - id: Global.Action
        name: Action
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.UnRegister(Action)
        name: UnRegister
      - name: (
      - id: Global.Action
        name: Action
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.UnRegister(Action)
        name: UnRegister
      - name: (
      - id: Global.Action
        name: Action
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.UnRegister(Action)
        name: UnRegister
      - name: (
      - id: Global.Action
        name: Action
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.UnRegister(Action)
        name: UnRegister
      - name: (
      - id: Global.Action
        name: Action
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.IEasyEvent
    commentId: M:ZeroFramework.IEasyEvent.UnRegister(Action)
  ZeroFramework.EasyEvent.Trigger*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework.EasyEvent.Trigger*
        name: Trigger
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.Trigger*
        name: Trigger
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.Trigger*
        name: Trigger
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent.Trigger
  ZeroFramework.IEasyEvent.Trigger:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent.Trigger
        name: Trigger
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent.Trigger
        name: Trigger
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Trigger
        name: Trigger
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Trigger
        name: Trigger
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Trigger
        name: Trigger
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Trigger
        name: Trigger
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IEasyEvent
    commentId: M:ZeroFramework.IEasyEvent.Trigger
  ZeroFramework.EasyEvent.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.EasyEvent.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent.Clear
  ZeroFramework.IEasyEventCommon.Clear:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEventCommon.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IEasyEventCommon.Clear
        name: Clear
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.Clear
        name: Clear
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.Clear
        name: Clear
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IEasyEventCommon
    commentId: M:ZeroFramework.IEasyEventCommon.Clear
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: int
        isExternal: true
      VB:
      - id: System.Int32
        name: Integer
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Int32
        name: int
        isExternal: true
      VB:
      - id: System.Int32
        name: Integer
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Int32
        name: int
        isExternal: true
      VB:
      - id: System.Int32
        name: Integer
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  ZeroFramework.EasyEvent.GetInvocationList*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent.GetInvocationList*
        name: GetInvocationList
      VB:
      - id: ZeroFramework.EasyEvent.GetInvocationList*
        name: GetInvocationList
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.GetInvocationList*
        name: GetInvocationList
      VB:
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.GetInvocationList*
        name: GetInvocationList
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.GetInvocationList*
        name: GetInvocationList
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent*
        name: EasyEvent
      - name: .
      - id: ZeroFramework.EasyEvent.GetInvocationList*
        name: GetInvocationList
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent.GetInvocationList
  ZeroFramework.IEasyEventCommon.GetInvocationList:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEventCommon.GetInvocationList
        name: GetInvocationList
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IEasyEventCommon.GetInvocationList
        name: GetInvocationList
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.GetInvocationList
        name: GetInvocationList
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.GetInvocationList
        name: GetInvocationList
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.GetInvocationList
        name: GetInvocationList
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEventCommon
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.GetInvocationList
        name: GetInvocationList
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.IEasyEventCommon
    commentId: M:ZeroFramework.IEasyEventCommon.GetInvocationList
  ZeroFramework.EasyEvent:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent
        name: EasyEvent
      VB:
      - id: ZeroFramework.EasyEvent
        name: EasyEvent
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent
        name: EasyEvent
      VB:
      - id: ZeroFramework.EasyEvent
        name: EasyEvent
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent
        name: EasyEvent
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent
        name: EasyEvent
    isDefinition: true
    commentId: T:ZeroFramework.EasyEvent
  ZeroFramework.IEasyEvent`1:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.IEasyEvent`1
  ZeroFramework.IEasyEvent{{T}}:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: ZeroFramework.IEasyEvent`1
    parent: ZeroFramework
    commentId: T:ZeroFramework.IEasyEvent{`0}
  ZeroFramework.EasyEvent`1.Register*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.EasyEvent`1.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`1.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`1.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`1.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent`1.Register
  ZeroFramework.IEasyEvent`1.Register(Action{`0}):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1.Register(Action{`0})
        name: Register
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`1.Register(Action{`0})
        name: Register
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Register(Action{`0})
        name: Register
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Register(Action{`0})
        name: Register
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Register(Action{`0})
        name: Register
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Register(Action{`0})
        name: Register
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IEasyEvent`1.Register(Action{`0})
  ZeroFramework.IEasyEvent{{T}}.Register(Action{{T}}):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent{`0}.Register(Action{`0})
        name: Register
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent{`0}.Register(Action{`0})
        name: Register
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent{`0}.Register(Action{`0})
        name: Register
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent{`0}.Register(Action{`0})
        name: Register
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent{`0}.Register(Action{`0})
        name: Register
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent{`0}.Register(Action{`0})
        name: Register
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.IEasyEvent`1.Register(Action{`0})
    parent: ZeroFramework.IEasyEvent{{T}}
    commentId: M:ZeroFramework.IEasyEvent{`0}.Register(Action{`0})
  ZeroFramework.EasyEvent`1.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.EasyEvent`1.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`1.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`1.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent`1.UnRegister
  ZeroFramework.IEasyEvent`1.UnRegister(Action{`0}):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1.UnRegister(Action{`0})
        name: UnRegister
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`1.UnRegister(Action{`0})
        name: UnRegister
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`1.UnRegister(Action{`0})
        name: UnRegister
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`1.UnRegister(Action{`0})
        name: UnRegister
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`1.UnRegister(Action{`0})
        name: UnRegister
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`1.UnRegister(Action{`0})
        name: UnRegister
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IEasyEvent`1.UnRegister(Action{`0})
  ZeroFramework.IEasyEvent{{T}}.UnRegister(Action{{T}}):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent{`0}.UnRegister(Action{`0})
        name: UnRegister
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent{`0}.UnRegister(Action{`0})
        name: UnRegister
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent{`0}.UnRegister(Action{`0})
        name: UnRegister
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent{`0}.UnRegister(Action{`0})
        name: UnRegister
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent{`0}.UnRegister(Action{`0})
        name: UnRegister
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent{`0}.UnRegister(Action{`0})
        name: UnRegister
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.IEasyEvent`1.UnRegister(Action{`0})
    parent: ZeroFramework.IEasyEvent{{T}}
    commentId: M:ZeroFramework.IEasyEvent{`0}.UnRegister(Action{`0})
  ZeroFramework.EasyEvent`1.Trigger*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent`1.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework.EasyEvent`1.Trigger*
        name: Trigger
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`1.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`1.Trigger*
        name: Trigger
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`1.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`1.Trigger*
        name: Trigger
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent`1.Trigger
  ZeroFramework.IEasyEvent`1.Trigger(`0):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`1.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IEasyEvent`1.Trigger(`0)
  ZeroFramework.IEasyEvent{{T}}.Trigger({T}):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent{`0}.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent{`0}.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent{`0}.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent{`0}.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent{`0}.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent{`0}.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
    isDefinition: false
    definition: ZeroFramework.IEasyEvent`1.Trigger(`0)
    parent: ZeroFramework.IEasyEvent{{T}}
    commentId: M:ZeroFramework.IEasyEvent{`0}.Trigger(`0)
  ZeroFramework.EasyEvent`1.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.EasyEvent`1.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`1.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`1.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent`1.Clear
  ZeroFramework.EasyEvent`1.GetInvocationList*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent`1.GetInvocationList*
        name: GetInvocationList
      VB:
      - id: ZeroFramework.EasyEvent`1.GetInvocationList*
        name: GetInvocationList
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`1.GetInvocationList*
        name: GetInvocationList
      VB:
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`1.GetInvocationList*
        name: GetInvocationList
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`1.GetInvocationList*
        name: GetInvocationList
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`1*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`1.GetInvocationList*
        name: GetInvocationList
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent`1.GetInvocationList
  ZeroFramework.EasyEvent`1:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent`1
        name: EasyEvent
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.EasyEvent`1
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent`1
        name: EasyEvent
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.EasyEvent`1
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`1
        name: EasyEvent
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`1
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.EasyEvent`1
  ZeroFramework.IEasyEvent`2:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      VB:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      VB:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.IEasyEvent`2
  ZeroFramework.IEasyEvent{{T},{TR}}:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      VB:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      VB:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
    isDefinition: false
    definition: ZeroFramework.IEasyEvent`2
    parent: ZeroFramework
    commentId: T:ZeroFramework.IEasyEvent{`0,`1}
  Global.Func`2:
    name:
      CSharp:
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    isDefinition: true
  Global.Func{{T},{TR}}:
    name:
      CSharp:
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      VB:
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      VB:
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      VB:
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
    isDefinition: false
    definition: Global.Func`2
    commentId: '!:Global.Func{`0,`1}'
  ZeroFramework.EasyEvent`2.Register*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent`2.Register*
        name: Register
      VB:
      - id: ZeroFramework.EasyEvent`2.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`2.Register*
        name: Register
      VB:
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`2.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`2.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`2.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent`2.Register
  ZeroFramework.IEasyEvent`2.Register(Func{`0,`1}):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2.Register(Func{`0,`1})
        name: Register
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`2.Register(Func{`0,`1})
        name: Register
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Register(Func{`0,`1})
        name: Register
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Register(Func{`0,`1})
        name: Register
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Register(Func{`0,`1})
        name: Register
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Register(Func{`0,`1})
        name: Register
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IEasyEvent`2.Register(Func{`0,`1})
  ZeroFramework.IEasyEvent{{T},{TR}}.Register(Func{{T},{TR}}):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent{`0,`1}.Register(Func{`0,`1})
        name: Register
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent{`0,`1}.Register(Func{`0,`1})
        name: Register
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent{`0,`1}.Register(Func{`0,`1})
        name: Register
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent{`0,`1}.Register(Func{`0,`1})
        name: Register
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent{`0,`1}.Register(Func{`0,`1})
        name: Register
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent{`0,`1}.Register(Func{`0,`1})
        name: Register
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.IEasyEvent`2.Register(Func{`0,`1})
    parent: ZeroFramework.IEasyEvent{{T},{TR}}
    commentId: M:ZeroFramework.IEasyEvent{`0,`1}.Register(Func{`0,`1})
  ZeroFramework.EasyEvent`2.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent`2.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.EasyEvent`2.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`2.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`2.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`2.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`2.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent`2.UnRegister
  ZeroFramework.IEasyEvent`2.UnRegister(Func{`0,`1}):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2.UnRegister(Func{`0,`1})
        name: UnRegister
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`2.UnRegister(Func{`0,`1})
        name: UnRegister
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`2.UnRegister(Func{`0,`1})
        name: UnRegister
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`2.UnRegister(Func{`0,`1})
        name: UnRegister
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`2.UnRegister(Func{`0,`1})
        name: UnRegister
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`2.UnRegister(Func{`0,`1})
        name: UnRegister
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IEasyEvent`2.UnRegister(Func{`0,`1})
  ZeroFramework.IEasyEvent{{T},{TR}}.UnRegister(Func{{T},{TR}}):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent{`0,`1}.UnRegister(Func{`0,`1})
        name: UnRegister
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent{`0,`1}.UnRegister(Func{`0,`1})
        name: UnRegister
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent{`0,`1}.UnRegister(Func{`0,`1})
        name: UnRegister
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent{`0,`1}.UnRegister(Func{`0,`1})
        name: UnRegister
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent{`0,`1}.UnRegister(Func{`0,`1})
        name: UnRegister
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent{`0,`1}.UnRegister(Func{`0,`1})
        name: UnRegister
      - name: (
      - id: Global.Func`2
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.IEasyEvent`2.UnRegister(Func{`0,`1})
    parent: ZeroFramework.IEasyEvent{{T},{TR}}
    commentId: M:ZeroFramework.IEasyEvent{`0,`1}.UnRegister(Func{`0,`1})
  TR:
    name:
      CSharp:
      - name: TR
      VB:
      - name: TR
    nameWithType:
      CSharp:
      - name: TR
      VB:
      - name: TR
    qualifiedName:
      CSharp:
      - name: TR
      VB:
      - name: TR
    isDefinition: true
  '{TR}':
    name:
      CSharp:
      - name: TR
      VB:
      - name: TR
    nameWithType:
      CSharp:
      - name: TR
      VB:
      - name: TR
    qualifiedName:
      CSharp:
      - name: TR
      VB:
      - name: TR
    isDefinition: false
    definition: TR
    commentId: '!:TR'
  ZeroFramework.EasyEvent`2.Trigger*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent`2.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework.EasyEvent`2.Trigger*
        name: Trigger
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`2.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`2.Trigger*
        name: Trigger
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`2.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`2.Trigger*
        name: Trigger
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent`2.Trigger
  ZeroFramework.IEasyEvent`2.Trigger(`0):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`2.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.IEasyEvent`2.Trigger(`0)
  ZeroFramework.IEasyEvent{{T},{TR}}.Trigger({T}):
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent{`0,`1}.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent{`0,`1}.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent{`0,`1}.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent{`0,`1}.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent{`0,`1}.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent{`0,`1}.Trigger(`0)
        name: Trigger
      - name: (
      - name: T
      - name: )
    isDefinition: false
    definition: ZeroFramework.IEasyEvent`2.Trigger(`0)
    parent: ZeroFramework.IEasyEvent{{T},{TR}}
    commentId: M:ZeroFramework.IEasyEvent{`0,`1}.Trigger(`0)
  ZeroFramework.EasyEvent`2.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent`2.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.EasyEvent`2.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`2.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`2.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`2.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`2.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent`2.Clear
  ZeroFramework.EasyEvent`2.GetInvocationList*:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent`2.GetInvocationList*
        name: GetInvocationList
      VB:
      - id: ZeroFramework.EasyEvent`2.GetInvocationList*
        name: GetInvocationList
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`2.GetInvocationList*
        name: GetInvocationList
      VB:
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`2.GetInvocationList*
        name: GetInvocationList
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.EasyEvent`2.GetInvocationList*
        name: GetInvocationList
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`2*
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.EasyEvent`2.GetInvocationList*
        name: GetInvocationList
    isDefinition: true
    commentId: Overload:ZeroFramework.EasyEvent`2.GetInvocationList
  ZeroFramework.EasyEvent`2:
    name:
      CSharp:
      - id: ZeroFramework.EasyEvent`2
        name: EasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      VB:
      - id: ZeroFramework.EasyEvent`2
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.EasyEvent`2
        name: EasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      VB:
      - id: ZeroFramework.EasyEvent`2
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`2
        name: EasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.EasyEvent`2
        name: EasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.EasyEvent`2
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.ValueType
        name: ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ValueType
        name: ValueType
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.ValueType
        name: ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  ZeroFramework.UnRegisterHandler.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterHandler.#ctor*
        name: UnRegisterHandler
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterHandler*
        name: UnRegisterHandler
      - name: .
      - id: ZeroFramework.UnRegisterHandler.#ctor*
        name: UnRegisterHandler
      VB:
      - id: ZeroFramework.UnRegisterHandler*
        name: UnRegisterHandler
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterHandler*
        name: UnRegisterHandler
      - name: .
      - id: ZeroFramework.UnRegisterHandler.#ctor*
        name: UnRegisterHandler
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterHandler*
        name: UnRegisterHandler
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.UnRegisterHandler.#ctor
  ZeroFramework.UnRegisterHandler.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterHandler.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.UnRegisterHandler.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterHandler*
        name: UnRegisterHandler
      - name: .
      - id: ZeroFramework.UnRegisterHandler.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.UnRegisterHandler*
        name: UnRegisterHandler
      - name: .
      - id: ZeroFramework.UnRegisterHandler.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterHandler*
        name: UnRegisterHandler
      - name: .
      - id: ZeroFramework.UnRegisterHandler.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterHandler*
        name: UnRegisterHandler
      - name: .
      - id: ZeroFramework.UnRegisterHandler.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.UnRegisterHandler.UnRegister
  ZeroFramework.UnRegisterHandler:
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterHandler
        name: UnRegisterHandler
      VB:
      - id: ZeroFramework.UnRegisterHandler
        name: UnRegisterHandler
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterHandler
        name: UnRegisterHandler
      VB:
      - id: ZeroFramework.UnRegisterHandler
        name: UnRegisterHandler
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterHandler
        name: UnRegisterHandler
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterHandler
        name: UnRegisterHandler
    isDefinition: true
    commentId: T:ZeroFramework.UnRegisterHandler
  ZeroFramework.UnRegisterTrigger.AddUnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger.AddUnRegister*
        name: AddUnRegister
      VB:
      - id: ZeroFramework.UnRegisterTrigger.AddUnRegister*
        name: AddUnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger*
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.AddUnRegister*
        name: AddUnRegister
      VB:
      - id: ZeroFramework.UnRegisterTrigger*
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.AddUnRegister*
        name: AddUnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger*
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.AddUnRegister*
        name: AddUnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger*
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.AddUnRegister*
        name: AddUnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.UnRegisterTrigger.AddUnRegister
  ZeroFramework.UnRegisterTrigger.RemoveUnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger.RemoveUnRegister*
        name: RemoveUnRegister
      VB:
      - id: ZeroFramework.UnRegisterTrigger.RemoveUnRegister*
        name: RemoveUnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger*
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.RemoveUnRegister*
        name: RemoveUnRegister
      VB:
      - id: ZeroFramework.UnRegisterTrigger*
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.RemoveUnRegister*
        name: RemoveUnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger*
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.RemoveUnRegister*
        name: RemoveUnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger*
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.RemoveUnRegister*
        name: RemoveUnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.UnRegisterTrigger.RemoveUnRegister
  ZeroFramework.UnRegisterTrigger.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.UnRegisterTrigger.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger*
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.UnRegisterTrigger*
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger*
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger*
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.UnRegisterTrigger.UnRegister
  ZeroFramework.UnRegisterTrigger:
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      VB:
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      VB:
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.UnRegisterTrigger
  ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister):
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister)
        name: AddUnRegister
      - name: (
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: )
      VB:
      - id: ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister)
        name: AddUnRegister
      - name: (
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister)
        name: AddUnRegister
      - name: (
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: )
      VB:
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister)
        name: AddUnRegister
      - name: (
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister)
        name: AddUnRegister
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister)
        name: AddUnRegister
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: )
    isDefinition: true
    parent: ZeroFramework.UnRegisterTrigger
    commentId: M:ZeroFramework.UnRegisterTrigger.AddUnRegister(ZeroFramework.IUnRegister)
  ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister):
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister)
        name: RemoveUnRegister
      - name: (
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: )
      VB:
      - id: ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister)
        name: RemoveUnRegister
      - name: (
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister)
        name: RemoveUnRegister
      - name: (
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: )
      VB:
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister)
        name: RemoveUnRegister
      - name: (
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister)
        name: RemoveUnRegister
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister)
        name: RemoveUnRegister
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IUnRegister
        name: IUnRegister
      - name: )
    isDefinition: true
    parent: ZeroFramework.UnRegisterTrigger
    commentId: M:ZeroFramework.UnRegisterTrigger.RemoveUnRegister(ZeroFramework.IUnRegister)
  ZeroFramework.UnRegisterTrigger.UnRegister:
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger.UnRegister
        name: UnRegister
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.UnRegisterTrigger.UnRegister
        name: UnRegister
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.UnRegister
        name: UnRegister
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.UnRegister
        name: UnRegister
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.UnRegister
        name: UnRegister
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterTrigger
        name: UnRegisterTrigger
      - name: .
      - id: ZeroFramework.UnRegisterTrigger.UnRegister
        name: UnRegister
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.UnRegisterTrigger
    commentId: M:ZeroFramework.UnRegisterTrigger.UnRegister
  ZeroFramework.UnRegisterOnDestroyTrigger:
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterOnDestroyTrigger
        name: UnRegisterOnDestroyTrigger
      VB:
      - id: ZeroFramework.UnRegisterOnDestroyTrigger
        name: UnRegisterOnDestroyTrigger
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterOnDestroyTrigger
        name: UnRegisterOnDestroyTrigger
      VB:
      - id: ZeroFramework.UnRegisterOnDestroyTrigger
        name: UnRegisterOnDestroyTrigger
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterOnDestroyTrigger
        name: UnRegisterOnDestroyTrigger
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterOnDestroyTrigger
        name: UnRegisterOnDestroyTrigger
    isDefinition: true
    commentId: T:ZeroFramework.UnRegisterOnDestroyTrigger
  ZeroFramework.UnRegisterOnDisableTrigger:
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterOnDisableTrigger
        name: UnRegisterOnDisableTrigger
      VB:
      - id: ZeroFramework.UnRegisterOnDisableTrigger
        name: UnRegisterOnDisableTrigger
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterOnDisableTrigger
        name: UnRegisterOnDisableTrigger
      VB:
      - id: ZeroFramework.UnRegisterOnDisableTrigger
        name: UnRegisterOnDisableTrigger
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterOnDisableTrigger
        name: UnRegisterOnDisableTrigger
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterOnDisableTrigger
        name: UnRegisterOnDisableTrigger
    isDefinition: true
    commentId: T:ZeroFramework.UnRegisterOnDisableTrigger
  Global.UnityEngine.GameObject:
    name:
      CSharp:
      - id: Global.UnityEngine.GameObject
        name: GameObject
        isExternal: true
      VB:
      - id: Global.UnityEngine.GameObject
        name: GameObject
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.UnityEngine
        name: UnityEngine
        isExternal: true
      - name: .
      - id: Global.UnityEngine.GameObject
        name: GameObject
        isExternal: true
      VB:
      - id: Global.UnityEngine
        name: UnityEngine
        isExternal: true
      - name: .
      - id: Global.UnityEngine.GameObject
        name: GameObject
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.UnityEngine
        name: UnityEngine
        isExternal: true
      - name: .
      - id: Global.UnityEngine.GameObject
        name: GameObject
        isExternal: true
      VB:
      - id: Global.UnityEngine
        name: UnityEngine
        isExternal: true
      - name: .
      - id: Global.UnityEngine.GameObject
        name: GameObject
        isExternal: true
    isDefinition: true
  ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed*:
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed*
        name: UnRegisterWhenGameObjectDestroyed
      VB:
      - id: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed*
        name: UnRegisterWhenGameObjectDestroyed
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterExtension*
        name: UnRegisterExtension
      - name: .
      - id: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed*
        name: UnRegisterWhenGameObjectDestroyed
      VB:
      - id: ZeroFramework.UnRegisterExtension*
        name: UnRegisterExtension
      - name: .
      - id: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed*
        name: UnRegisterWhenGameObjectDestroyed
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterExtension*
        name: UnRegisterExtension
      - name: .
      - id: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed*
        name: UnRegisterWhenGameObjectDestroyed
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterExtension*
        name: UnRegisterExtension
      - name: .
      - id: ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed*
        name: UnRegisterWhenGameObjectDestroyed
    isDefinition: true
    commentId: Overload:ZeroFramework.UnRegisterExtension.UnRegisterWhenGameObjectDestroyed
  ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled*:
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled*
        name: UnRegisterWhenDisabled
      VB:
      - id: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled*
        name: UnRegisterWhenDisabled
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterExtension*
        name: UnRegisterExtension
      - name: .
      - id: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled*
        name: UnRegisterWhenDisabled
      VB:
      - id: ZeroFramework.UnRegisterExtension*
        name: UnRegisterExtension
      - name: .
      - id: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled*
        name: UnRegisterWhenDisabled
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterExtension*
        name: UnRegisterExtension
      - name: .
      - id: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled*
        name: UnRegisterWhenDisabled
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterExtension*
        name: UnRegisterExtension
      - name: .
      - id: ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled*
        name: UnRegisterWhenDisabled
    isDefinition: true
    commentId: Overload:ZeroFramework.UnRegisterExtension.UnRegisterWhenDisabled
  ZeroFramework.UnRegisterExtension:
    name:
      CSharp:
      - id: ZeroFramework.UnRegisterExtension
        name: UnRegisterExtension
      VB:
      - id: ZeroFramework.UnRegisterExtension
        name: UnRegisterExtension
    nameWithType:
      CSharp:
      - id: ZeroFramework.UnRegisterExtension
        name: UnRegisterExtension
      VB:
      - id: ZeroFramework.UnRegisterExtension
        name: UnRegisterExtension
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterExtension
        name: UnRegisterExtension
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.UnRegisterExtension
        name: UnRegisterExtension
    isDefinition: true
    commentId: T:ZeroFramework.UnRegisterExtension
  ZeroFramework.IEasyEventCommon.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEventCommon.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.IEasyEventCommon.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEventCommon*
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.IEasyEventCommon*
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEventCommon*
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEventCommon*
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.IEasyEventCommon.Clear
  ZeroFramework.IEasyEventCommon.GetInvocationList*:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEventCommon.GetInvocationList*
        name: GetInvocationList
      VB:
      - id: ZeroFramework.IEasyEventCommon.GetInvocationList*
        name: GetInvocationList
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEventCommon*
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.GetInvocationList*
        name: GetInvocationList
      VB:
      - id: ZeroFramework.IEasyEventCommon*
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.GetInvocationList*
        name: GetInvocationList
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEventCommon*
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.GetInvocationList*
        name: GetInvocationList
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEventCommon*
        name: IEasyEventCommon
      - name: .
      - id: ZeroFramework.IEasyEventCommon.GetInvocationList*
        name: GetInvocationList
    isDefinition: true
    commentId: Overload:ZeroFramework.IEasyEventCommon.GetInvocationList
  ZeroFramework.IEasyEvent.Register*:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent.Register*
        name: Register
      VB:
      - id: ZeroFramework.IEasyEvent.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent*
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Register*
        name: Register
      VB:
      - id: ZeroFramework.IEasyEvent*
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent*
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent*
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.IEasyEvent.Register
  ZeroFramework.IEasyEvent.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IEasyEvent.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent*
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IEasyEvent*
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent*
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent*
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.IEasyEvent.UnRegister
  ZeroFramework.IEasyEvent.Trigger*:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework.IEasyEvent.Trigger*
        name: Trigger
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent*
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework.IEasyEvent*
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Trigger*
        name: Trigger
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent*
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent*
        name: IEasyEvent
      - name: .
      - id: ZeroFramework.IEasyEvent.Trigger*
        name: Trigger
    isDefinition: true
    commentId: Overload:ZeroFramework.IEasyEvent.Trigger
  ZeroFramework.IEasyEvent`1.Register*:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.IEasyEvent`1.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1*
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.IEasyEvent`1*
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1*
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1*
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.IEasyEvent`1.Register
  ZeroFramework.IEasyEvent`1.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IEasyEvent`1.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1*
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IEasyEvent`1*
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`1.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1*
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1*
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`1.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.IEasyEvent`1.UnRegister
  ZeroFramework.IEasyEvent`1.Trigger*:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework.IEasyEvent`1.Trigger*
        name: Trigger
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`1*
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework.IEasyEvent`1*
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Trigger*
        name: Trigger
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1*
        name: IEasyEvent
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`1*
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`1.Trigger*
        name: Trigger
    isDefinition: true
    commentId: Overload:ZeroFramework.IEasyEvent`1.Trigger
  ZeroFramework.IEasyEvent`2.Register*:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2.Register*
        name: Register
      VB:
      - id: ZeroFramework.IEasyEvent`2.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2*
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Register*
        name: Register
      VB:
      - id: ZeroFramework.IEasyEvent`2*
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2*
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2*
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.IEasyEvent`2.Register
  ZeroFramework.IEasyEvent`2.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IEasyEvent`2.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2*
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`2.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IEasyEvent`2*
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`2.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2*
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`2.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2*
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`2.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.IEasyEvent`2.UnRegister
  ZeroFramework.IEasyEvent`2.Trigger*:
    name:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework.IEasyEvent`2.Trigger*
        name: Trigger
    nameWithType:
      CSharp:
      - id: ZeroFramework.IEasyEvent`2*
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework.IEasyEvent`2*
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Trigger*
        name: Trigger
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2*
        name: IEasyEvent
      - name: <
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: '>'
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Trigger*
        name: Trigger
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IEasyEvent`2*
        name: IEasyEvent
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: ','
      - name: " "
      - name: TR
      - name: )
      - name: .
      - id: ZeroFramework.IEasyEvent`2.Trigger*
        name: Trigger
    isDefinition: true
    commentId: Overload:ZeroFramework.IEasyEvent`2.Trigger
  ZeroFramework.IUnRegister.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.IUnRegister.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IUnRegister.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.IUnRegister*
        name: IUnRegister
      - name: .
      - id: ZeroFramework.IUnRegister.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.IUnRegister*
        name: IUnRegister
      - name: .
      - id: ZeroFramework.IUnRegister.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IUnRegister*
        name: IUnRegister
      - name: .
      - id: ZeroFramework.IUnRegister.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IUnRegister*
        name: IUnRegister
      - name: .
      - id: ZeroFramework.IUnRegister.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.IUnRegister.UnRegister
  ZeroFramework.ICommonEventKit`1:
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.ICommonEventKit`1
  ZeroFramework.ICommonEventKit{{TKey}}:
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
    isDefinition: false
    definition: ZeroFramework.ICommonEventKit`1
    parent: ZeroFramework
    commentId: T:ZeroFramework.ICommonEventKit{`0}
  TKey:
    name:
      CSharp:
      - name: TKey
      VB:
      - name: TKey
    nameWithType:
      CSharp:
      - name: TKey
      VB:
      - name: TKey
    qualifiedName:
      CSharp:
      - name: TKey
      VB:
      - name: TKey
    isDefinition: true
  '{TKey}':
    name:
      CSharp:
      - name: TKey
      VB:
      - name: TKey
    nameWithType:
      CSharp:
      - name: TKey
      VB:
      - name: TKey
    qualifiedName:
      CSharp:
      - name: TKey
      VB:
      - name: TKey
    isDefinition: false
    definition: TKey
    commentId: '!:TKey'
  ZeroFramework.CommonEventKit`1.Register*:
    name:
      CSharp:
      - id: ZeroFramework.CommonEventKit`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.CommonEventKit`1.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.CommonEventKit`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.CommonEventKit`1.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.CommonEventKit`1.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.CommonEventKit`1.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.CommonEventKit`1.Register
  ZeroFramework.ICommonEventKit`1.Register``1(`0,Action{``0}):
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1.Register``1(`0,Action{``0})
        name: Register
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1.Register``1(`0,Action{``0})
        name: Register
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Register``1(`0,Action{``0})
        name: Register
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Register``1(`0,Action{``0})
        name: Register
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Register``1(`0,Action{``0})
        name: Register
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Register``1(`0,Action{``0})
        name: Register
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.ICommonEventKit`1.Register``1(`0,Action{``0})
  ZeroFramework.ICommonEventKit{{TKey}}.Register``1({TKey},Action{{T}}):
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit{`0}.Register``1(`0,Action{``0})
        name: Register
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit{`0}.Register``1(`0,Action{``0})
        name: Register
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Register``1(`0,Action{``0})
        name: Register
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Register``1(`0,Action{``0})
        name: Register
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Register``1(`0,Action{``0})
        name: Register
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Register``1(`0,Action{``0})
        name: Register
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.ICommonEventKit`1.Register``1(`0,Action{``0})
    parent: ZeroFramework.ICommonEventKit{{TKey}}
    commentId: M:ZeroFramework.ICommonEventKit{`0}.Register``1(`0,Action{``0})
  ZeroFramework.CommonEventKit`1.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.CommonEventKit`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.CommonEventKit`1.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.CommonEventKit`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.CommonEventKit`1.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.CommonEventKit`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.CommonEventKit`1.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.CommonEventKit`1.UnRegister
  ZeroFramework.ICommonEventKit`1.UnRegister``1(`0,Action{``0}):
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1.UnRegister``1(`0,Action{``0})
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1.UnRegister``1(`0,Action{``0})
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.UnRegister``1(`0,Action{``0})
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.UnRegister``1(`0,Action{``0})
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.UnRegister``1(`0,Action{``0})
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.UnRegister``1(`0,Action{``0})
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.ICommonEventKit`1.UnRegister``1(`0,Action{``0})
  ZeroFramework.ICommonEventKit{{TKey}}.UnRegister``1({TKey},Action{{T}}):
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit{`0}.UnRegister``1(`0,Action{``0})
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit{`0}.UnRegister``1(`0,Action{``0})
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.UnRegister``1(`0,Action{``0})
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.UnRegister``1(`0,Action{``0})
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.UnRegister``1(`0,Action{``0})
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.UnRegister``1(`0,Action{``0})
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.ICommonEventKit`1.UnRegister``1(`0,Action{``0})
    parent: ZeroFramework.ICommonEventKit{{TKey}}
    commentId: M:ZeroFramework.ICommonEventKit{`0}.UnRegister``1(`0,Action{``0})
  ZeroFramework.ICommonEventKit`1.UnRegister(`0):
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1.UnRegister(`0)
        name: UnRegister
      - name: (
      - name: TKey
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1.UnRegister(`0)
        name: UnRegister
      - name: (
      - name: TKey
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.UnRegister(`0)
        name: UnRegister
      - name: (
      - name: TKey
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.UnRegister(`0)
        name: UnRegister
      - name: (
      - name: TKey
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.UnRegister(`0)
        name: UnRegister
      - name: (
      - name: TKey
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.UnRegister(`0)
        name: UnRegister
      - name: (
      - name: TKey
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.ICommonEventKit`1.UnRegister(`0)
  ZeroFramework.ICommonEventKit{{TKey}}.UnRegister({TKey}):
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit{`0}.UnRegister(`0)
        name: UnRegister
      - name: (
      - name: TKey
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit{`0}.UnRegister(`0)
        name: UnRegister
      - name: (
      - name: TKey
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.UnRegister(`0)
        name: UnRegister
      - name: (
      - name: TKey
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.UnRegister(`0)
        name: UnRegister
      - name: (
      - name: TKey
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.UnRegister(`0)
        name: UnRegister
      - name: (
      - name: TKey
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.UnRegister(`0)
        name: UnRegister
      - name: (
      - name: TKey
      - name: )
    isDefinition: false
    definition: ZeroFramework.ICommonEventKit`1.UnRegister(`0)
    parent: ZeroFramework.ICommonEventKit{{TKey}}
    commentId: M:ZeroFramework.ICommonEventKit{`0}.UnRegister(`0)
  ZeroFramework.CommonEventKit`1.Send*:
    name:
      CSharp:
      - id: ZeroFramework.CommonEventKit`1.Send*
        name: Send
      VB:
      - id: ZeroFramework.CommonEventKit`1.Send*
        name: Send
    nameWithType:
      CSharp:
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.CommonEventKit`1.Send*
        name: Send
      VB:
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.CommonEventKit`1.Send*
        name: Send
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.CommonEventKit`1.Send*
        name: Send
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.CommonEventKit`1.Send*
        name: Send
    isDefinition: true
    commentId: Overload:ZeroFramework.CommonEventKit`1.Send
  ZeroFramework.ICommonEventKit`1.Send``1(`0):
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1.Send``1(`0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1.Send``1(`0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Send``1(`0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Send``1(`0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Send``1(`0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Send``1(`0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.ICommonEventKit`1.Send``1(`0)
  ZeroFramework.ICommonEventKit{{TKey}}.Send``1({TKey}):
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit{`0}.Send``1(`0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit{`0}.Send``1(`0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Send``1(`0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Send``1(`0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Send``1(`0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Send``1(`0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: )
    isDefinition: false
    definition: ZeroFramework.ICommonEventKit`1.Send``1(`0)
    parent: ZeroFramework.ICommonEventKit{{TKey}}
    commentId: M:ZeroFramework.ICommonEventKit{`0}.Send``1(`0)
  ZeroFramework.ICommonEventKit`1.Send``1(`0,``0):
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1.Send``1(`0,``0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1.Send``1(`0,``0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Send``1(`0,``0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Send``1(`0,``0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Send``1(`0,``0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Send``1(`0,``0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.ICommonEventKit`1.Send``1(`0,``0)
  ZeroFramework.ICommonEventKit{{TKey}}.Send``1({TKey},{T}):
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit{`0}.Send``1(`0,``0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit{`0}.Send``1(`0,``0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Send``1(`0,``0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Send``1(`0,``0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Send``1(`0,``0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Send``1(`0,``0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: TKey
      - name: ','
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: ZeroFramework.ICommonEventKit`1.Send``1(`0,``0)
    parent: ZeroFramework.ICommonEventKit{{TKey}}
    commentId: M:ZeroFramework.ICommonEventKit{`0}.Send``1(`0,``0)
  ZeroFramework.CommonEventKit`1.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.CommonEventKit`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.CommonEventKit`1.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.CommonEventKit`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.CommonEventKit`1.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.CommonEventKit`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CommonEventKit`1*
        name: CommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.CommonEventKit`1.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.CommonEventKit`1.Clear
  ZeroFramework.ICommonEventKit`1.Clear:
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1.Clear
        name: Clear
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Clear
        name: Clear
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Clear
        name: Clear
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.ICommonEventKit`1.Clear
  ZeroFramework.ICommonEventKit{{TKey}}.Clear:
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit{`0}.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit{`0}.Clear
        name: Clear
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Clear
        name: Clear
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit{`0}.Clear
        name: Clear
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.ICommonEventKit`1.Clear
    parent: ZeroFramework.ICommonEventKit{{TKey}}
    commentId: M:ZeroFramework.ICommonEventKit{`0}.Clear
  ZeroFramework.CommonEventKit`1:
    name:
      CSharp:
      - id: ZeroFramework.CommonEventKit`1
        name: CommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      VB:
      - id: ZeroFramework.CommonEventKit`1
        name: CommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.CommonEventKit`1
        name: CommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      VB:
      - id: ZeroFramework.CommonEventKit`1
        name: CommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CommonEventKit`1
        name: CommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.CommonEventKit`1
        name: CommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.CommonEventKit`1
  ZeroFramework.ITypeEventKit:
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      VB:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      VB:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.ITypeEventKit
  ZeroFramework.TypeEventKit.Register*:
    name:
      CSharp:
      - id: ZeroFramework.TypeEventKit.Register*
        name: Register
      VB:
      - id: ZeroFramework.TypeEventKit.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.Register*
        name: Register
      VB:
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.TypeEventKit.Register
  ZeroFramework.ITypeEventKit.Register``1(Action{``0}):
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
        name: Register
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
        name: Register
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
        name: Register
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
        name: Register
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
        name: Register
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
        name: Register
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.ITypeEventKit.Register``1(Action{``0})
  ZeroFramework.ITypeEventKit.Register``1(Action{{T}}):
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
        name: Register
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
        name: Register
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
        name: Register
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
        name: Register
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
        name: Register
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
        name: Register
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.ITypeEventKit.Register``1(Action{``0})
    parent: ZeroFramework.ITypeEventKit
    commentId: M:ZeroFramework.ITypeEventKit.Register``1(Action{``0})
  ZeroFramework.TypeEventKit.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.TypeEventKit.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.TypeEventKit.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.TypeEventKit.UnRegister
  ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0}):
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
  ZeroFramework.ITypeEventKit.UnRegister``1(Action{{T}}):
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
    parent: ZeroFramework.ITypeEventKit
    commentId: M:ZeroFramework.ITypeEventKit.UnRegister``1(Action{``0})
  ZeroFramework.ITypeEventKit.UnRegister``1:
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit.UnRegister``1
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit.UnRegister``1
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister``1
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister``1
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister``1
        name: UnRegister
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister``1
        name: UnRegister
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.ITypeEventKit
    commentId: M:ZeroFramework.ITypeEventKit.UnRegister``1
  ZeroFramework.TypeEventKit.Send*:
    name:
      CSharp:
      - id: ZeroFramework.TypeEventKit.Send*
        name: Send
      VB:
      - id: ZeroFramework.TypeEventKit.Send*
        name: Send
    nameWithType:
      CSharp:
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.Send*
        name: Send
      VB:
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.Send*
        name: Send
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.Send*
        name: Send
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.Send*
        name: Send
    isDefinition: true
    commentId: Overload:ZeroFramework.TypeEventKit.Send
  ZeroFramework.ITypeEventKit.Send``1:
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit.Send``1
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit.Send``1
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send``1
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send``1
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send``1
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send``1
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.ITypeEventKit
    commentId: M:ZeroFramework.ITypeEventKit.Send``1
  ZeroFramework.ITypeEventKit.Send``1(``0):
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit.Send``1(``0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit.Send``1(``0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send``1(``0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send``1(``0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send``1(``0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send``1(``0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.ITypeEventKit.Send``1(``0)
  ZeroFramework.ITypeEventKit.Send``1({T}):
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit.Send``1(``0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit.Send``1(``0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send``1(``0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send``1(``0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send``1(``0)
        name: Send
      - name: <
      - name: T
      - name: '>'
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send``1(``0)
        name: Send
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - name: T
      - name: )
    isDefinition: false
    definition: ZeroFramework.ITypeEventKit.Send``1(``0)
    parent: ZeroFramework.ITypeEventKit
    commentId: M:ZeroFramework.ITypeEventKit.Send``1(``0)
  ZeroFramework.TypeEventKit.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.TypeEventKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.TypeEventKit.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeEventKit*
        name: TypeEventKit
      - name: .
      - id: ZeroFramework.TypeEventKit.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.TypeEventKit.Clear
  ZeroFramework.ITypeEventKit.Clear:
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit.Clear
        name: Clear
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Clear
        name: Clear
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Clear
        name: Clear
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.ITypeEventKit
    commentId: M:ZeroFramework.ITypeEventKit.Clear
  ZeroFramework.TypeEventKit:
    name:
      CSharp:
      - id: ZeroFramework.TypeEventKit
        name: TypeEventKit
      VB:
      - id: ZeroFramework.TypeEventKit
        name: TypeEventKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.TypeEventKit
        name: TypeEventKit
      VB:
      - id: ZeroFramework.TypeEventKit
        name: TypeEventKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeEventKit
        name: TypeEventKit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeEventKit
        name: TypeEventKit
    isDefinition: true
    commentId: T:ZeroFramework.TypeEventKit
  ZeroFramework.TypeNameEventKit.Register*:
    name:
      CSharp:
      - id: ZeroFramework.TypeNameEventKit.Register*
        name: Register
      VB:
      - id: ZeroFramework.TypeNameEventKit.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.Register*
        name: Register
      VB:
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.TypeNameEventKit.Register
  ZeroFramework.TypeNameEventKit.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.TypeNameEventKit.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.TypeNameEventKit.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.TypeNameEventKit.UnRegister
  ZeroFramework.TypeNameEventKit.Send*:
    name:
      CSharp:
      - id: ZeroFramework.TypeNameEventKit.Send*
        name: Send
      VB:
      - id: ZeroFramework.TypeNameEventKit.Send*
        name: Send
    nameWithType:
      CSharp:
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.Send*
        name: Send
      VB:
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.Send*
        name: Send
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.Send*
        name: Send
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.Send*
        name: Send
    isDefinition: true
    commentId: Overload:ZeroFramework.TypeNameEventKit.Send
  ZeroFramework.TypeNameEventKit.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.TypeNameEventKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.TypeNameEventKit.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeNameEventKit*
        name: TypeNameEventKit
      - name: .
      - id: ZeroFramework.TypeNameEventKit.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.TypeNameEventKit.Clear
  ZeroFramework.TypeNameEventKit:
    name:
      CSharp:
      - id: ZeroFramework.TypeNameEventKit
        name: TypeNameEventKit
      VB:
      - id: ZeroFramework.TypeNameEventKit
        name: TypeNameEventKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.TypeNameEventKit
        name: TypeNameEventKit
      VB:
      - id: ZeroFramework.TypeNameEventKit
        name: TypeNameEventKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeNameEventKit
        name: TypeNameEventKit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.TypeNameEventKit
        name: TypeNameEventKit
    isDefinition: true
    commentId: T:ZeroFramework.TypeNameEventKit
  ZeroFramework.ICommonEventKit`1.Register*:
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.ICommonEventKit`1.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Register*
        name: Register
      VB:
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.ICommonEventKit`1.Register
  ZeroFramework.ICommonEventKit`1.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.ICommonEventKit`1.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.ICommonEventKit`1.UnRegister
  ZeroFramework.ICommonEventKit`1.Send*:
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1.Send*
        name: Send
      VB:
      - id: ZeroFramework.ICommonEventKit`1.Send*
        name: Send
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Send*
        name: Send
      VB:
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Send*
        name: Send
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Send*
        name: Send
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Send*
        name: Send
    isDefinition: true
    commentId: Overload:ZeroFramework.ICommonEventKit`1.Send
  ZeroFramework.ICommonEventKit`1.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.ICommonEventKit`1.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: <
      - name: TKey
      - name: '>'
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommonEventKit`1*
        name: ICommonEventKit
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: )
      - name: .
      - id: ZeroFramework.ICommonEventKit`1.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.ICommonEventKit`1.Clear
  ZeroFramework.ITypeEventKit.Register*:
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit.Register*
        name: Register
      VB:
      - id: ZeroFramework.ITypeEventKit.Register*
        name: Register
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Register*
        name: Register
      VB:
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Register*
        name: Register
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Register*
        name: Register
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Register*
        name: Register
    isDefinition: true
    commentId: Overload:ZeroFramework.ITypeEventKit.Register
  ZeroFramework.ITypeEventKit.UnRegister*:
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.ITypeEventKit.UnRegister*
        name: UnRegister
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister*
        name: UnRegister
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister*
        name: UnRegister
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.UnRegister*
        name: UnRegister
    isDefinition: true
    commentId: Overload:ZeroFramework.ITypeEventKit.UnRegister
  ZeroFramework.ITypeEventKit.Send*:
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit.Send*
        name: Send
      VB:
      - id: ZeroFramework.ITypeEventKit.Send*
        name: Send
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send*
        name: Send
      VB:
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send*
        name: Send
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send*
        name: Send
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Send*
        name: Send
    isDefinition: true
    commentId: Overload:ZeroFramework.ITypeEventKit.Send
  ZeroFramework.ITypeEventKit.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.ITypeEventKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.ITypeEventKit.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ITypeEventKit*
        name: ITypeEventKit
      - name: .
      - id: ZeroFramework.ITypeEventKit.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.ITypeEventKit.Clear
  ZeroFramework.ISingleton:
    name:
      CSharp:
      - id: ZeroFramework.ISingleton
        name: ISingleton
      VB:
      - id: ZeroFramework.ISingleton
        name: ISingleton
    nameWithType:
      CSharp:
      - id: ZeroFramework.ISingleton
        name: ISingleton
      VB:
      - id: ZeroFramework.ISingleton
        name: ISingleton
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton
        name: ISingleton
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton
        name: ISingleton
    isDefinition: true
    parent: ZeroFramework
    commentId: T:ZeroFramework.ISingleton
  ZeroFramework.Singleton`1.Instance*:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1.Instance*
        name: Instance
      VB:
      - id: ZeroFramework.Singleton`1.Instance*
        name: Instance
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.Instance*
        name: Instance
      VB:
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.Instance*
        name: Instance
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.Instance*
        name: Instance
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.Instance*
        name: Instance
    isDefinition: true
    commentId: Overload:ZeroFramework.Singleton`1.Instance
  ZeroFramework.Singleton`1.Dispose*:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1.Dispose*
        name: Dispose
      VB:
      - id: ZeroFramework.Singleton`1.Dispose*
        name: Dispose
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.Dispose*
        name: Dispose
      VB:
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.Dispose*
        name: Dispose
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.Dispose*
        name: Dispose
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.Dispose*
        name: Dispose
    isDefinition: true
    commentId: Overload:ZeroFramework.Singleton`1.Dispose
  ZeroFramework.Singleton`1.OnSingletonInit*:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework.Singleton`1.OnSingletonInit*
        name: OnSingletonInit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.OnSingletonInit*
        name: OnSingletonInit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.OnSingletonInit*
        name: OnSingletonInit
    isDefinition: true
    commentId: Overload:ZeroFramework.Singleton`1.OnSingletonInit
  ZeroFramework.ISingleton.OnSingletonInit:
    name:
      CSharp:
      - id: ZeroFramework.ISingleton.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ISingleton.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ISingleton
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ISingleton
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.ISingleton
    commentId: M:ZeroFramework.ISingleton.OnSingletonInit
  ZeroFramework.Singleton`1.ResetID*:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1.ResetID*
        name: ResetID
      VB:
      - id: ZeroFramework.Singleton`1.ResetID*
        name: ResetID
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.ResetID*
        name: ResetID
      VB:
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.ResetID*
        name: ResetID
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.ResetID*
        name: ResetID
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.ResetID*
        name: ResetID
    isDefinition: true
    commentId: Overload:ZeroFramework.Singleton`1.ResetID
  ZeroFramework.ISingleton.ResetID:
    name:
      CSharp:
      - id: ZeroFramework.ISingleton.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ISingleton.ResetID
        name: ResetID
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ISingleton
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ISingleton
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.ResetID
        name: ResetID
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.ResetID
        name: ResetID
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.ISingleton
    commentId: M:ZeroFramework.ISingleton.ResetID
  ZeroFramework.Singleton`1.GetID*:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1.GetID*
        name: GetID
      VB:
      - id: ZeroFramework.Singleton`1.GetID*
        name: GetID
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.GetID*
        name: GetID
      VB:
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.GetID*
        name: GetID
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.GetID*
        name: GetID
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1*
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.GetID*
        name: GetID
    isDefinition: true
    commentId: Overload:ZeroFramework.Singleton`1.GetID
  ZeroFramework.ISingleton.GetID:
    name:
      CSharp:
      - id: ZeroFramework.ISingleton.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ISingleton.GetID
        name: GetID
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.ISingleton
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.ISingleton
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.GetID
        name: GetID
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.GetID
        name: GetID
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.ISingleton
    commentId: M:ZeroFramework.ISingleton.GetID
  ZeroFramework.Singleton`1:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.Singleton`1
  ZeroFramework.SingletonMono`1.Instance*:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.Instance*
        name: Instance
      VB:
      - id: ZeroFramework.SingletonMono`1.Instance*
        name: Instance
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.Instance*
        name: Instance
      VB:
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.Instance*
        name: Instance
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.Instance*
        name: Instance
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.Instance*
        name: Instance
    isDefinition: true
    commentId: Overload:ZeroFramework.SingletonMono`1.Instance
  ZeroFramework.SingletonMono`1.OnSingletonInit*:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework.SingletonMono`1.OnSingletonInit*
        name: OnSingletonInit
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnSingletonInit*
        name: OnSingletonInit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnSingletonInit*
        name: OnSingletonInit
    isDefinition: true
    commentId: Overload:ZeroFramework.SingletonMono`1.OnSingletonInit
  ZeroFramework.SingletonMono`1.Dispose*:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.Dispose*
        name: Dispose
      VB:
      - id: ZeroFramework.SingletonMono`1.Dispose*
        name: Dispose
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.Dispose*
        name: Dispose
      VB:
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.Dispose*
        name: Dispose
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.Dispose*
        name: Dispose
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.Dispose*
        name: Dispose
    isDefinition: true
    commentId: Overload:ZeroFramework.SingletonMono`1.Dispose
  ZeroFramework.SingletonMono`1.OnApplicationQuit*:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.OnApplicationQuit*
        name: OnApplicationQuit
      VB:
      - id: ZeroFramework.SingletonMono`1.OnApplicationQuit*
        name: OnApplicationQuit
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnApplicationQuit*
        name: OnApplicationQuit
      VB:
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnApplicationQuit*
        name: OnApplicationQuit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnApplicationQuit*
        name: OnApplicationQuit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnApplicationQuit*
        name: OnApplicationQuit
    isDefinition: true
    commentId: Overload:ZeroFramework.SingletonMono`1.OnApplicationQuit
  ZeroFramework.SingletonMono`1.ResetID*:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.ResetID*
        name: ResetID
      VB:
      - id: ZeroFramework.SingletonMono`1.ResetID*
        name: ResetID
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.ResetID*
        name: ResetID
      VB:
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.ResetID*
        name: ResetID
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.ResetID*
        name: ResetID
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.ResetID*
        name: ResetID
    isDefinition: true
    commentId: Overload:ZeroFramework.SingletonMono`1.ResetID
  ZeroFramework.SingletonMono`1.GetID*:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.GetID*
        name: GetID
      VB:
      - id: ZeroFramework.SingletonMono`1.GetID*
        name: GetID
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.GetID*
        name: GetID
      VB:
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.GetID*
        name: GetID
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.GetID*
        name: GetID
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1*
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.GetID*
        name: GetID
    isDefinition: true
    commentId: Overload:ZeroFramework.SingletonMono`1.GetID
  ZeroFramework.SingletonMono`1:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.SingletonMono`1
  ZeroFramework.ISingleton.OnSingletonInit*:
    name:
      CSharp:
      - id: ZeroFramework.ISingleton.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework.ISingleton.OnSingletonInit*
        name: OnSingletonInit
    nameWithType:
      CSharp:
      - id: ZeroFramework.ISingleton*
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework.ISingleton*
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.OnSingletonInit*
        name: OnSingletonInit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton*
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton*
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.OnSingletonInit*
        name: OnSingletonInit
    isDefinition: true
    commentId: Overload:ZeroFramework.ISingleton.OnSingletonInit
  ZeroFramework.ISingleton.GetID*:
    name:
      CSharp:
      - id: ZeroFramework.ISingleton.GetID*
        name: GetID
      VB:
      - id: ZeroFramework.ISingleton.GetID*
        name: GetID
    nameWithType:
      CSharp:
      - id: ZeroFramework.ISingleton*
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.GetID*
        name: GetID
      VB:
      - id: ZeroFramework.ISingleton*
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.GetID*
        name: GetID
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton*
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.GetID*
        name: GetID
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton*
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.GetID*
        name: GetID
    isDefinition: true
    commentId: Overload:ZeroFramework.ISingleton.GetID
  ZeroFramework.ISingleton.ResetID*:
    name:
      CSharp:
      - id: ZeroFramework.ISingleton.ResetID*
        name: ResetID
      VB:
      - id: ZeroFramework.ISingleton.ResetID*
        name: ResetID
    nameWithType:
      CSharp:
      - id: ZeroFramework.ISingleton*
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.ResetID*
        name: ResetID
      VB:
      - id: ZeroFramework.ISingleton*
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.ResetID*
        name: ResetID
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton*
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.ResetID*
        name: ResetID
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ISingleton*
        name: ISingleton
      - name: .
      - id: ZeroFramework.ISingleton.ResetID*
        name: ResetID
    isDefinition: true
    commentId: Overload:ZeroFramework.ISingleton.ResetID
  ZeroFramework.MonoSingletonPathAttribute.PathInHierarchy*:
    name:
      CSharp:
      - id: ZeroFramework.MonoSingletonPathAttribute.PathInHierarchy*
        name: PathInHierarchy
      VB:
      - id: ZeroFramework.MonoSingletonPathAttribute.PathInHierarchy*
        name: PathInHierarchy
    nameWithType:
      CSharp:
      - id: ZeroFramework.MonoSingletonPathAttribute*
        name: MonoSingletonPathAttribute
      - name: .
      - id: ZeroFramework.MonoSingletonPathAttribute.PathInHierarchy*
        name: PathInHierarchy
      VB:
      - id: ZeroFramework.MonoSingletonPathAttribute*
        name: MonoSingletonPathAttribute
      - name: .
      - id: ZeroFramework.MonoSingletonPathAttribute.PathInHierarchy*
        name: PathInHierarchy
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.MonoSingletonPathAttribute*
        name: MonoSingletonPathAttribute
      - name: .
      - id: ZeroFramework.MonoSingletonPathAttribute.PathInHierarchy*
        name: PathInHierarchy
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.MonoSingletonPathAttribute*
        name: MonoSingletonPathAttribute
      - name: .
      - id: ZeroFramework.MonoSingletonPathAttribute.PathInHierarchy*
        name: PathInHierarchy
    isDefinition: true
    commentId: Overload:ZeroFramework.MonoSingletonPathAttribute.PathInHierarchy
  ZeroFramework.MonoSingletonPathAttribute.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.MonoSingletonPathAttribute.#ctor*
        name: MonoSingletonPathAttribute
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.MonoSingletonPathAttribute*
        name: MonoSingletonPathAttribute
      - name: .
      - id: ZeroFramework.MonoSingletonPathAttribute.#ctor*
        name: MonoSingletonPathAttribute
      VB:
      - id: ZeroFramework.MonoSingletonPathAttribute*
        name: MonoSingletonPathAttribute
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.MonoSingletonPathAttribute*
        name: MonoSingletonPathAttribute
      - name: .
      - id: ZeroFramework.MonoSingletonPathAttribute.#ctor*
        name: MonoSingletonPathAttribute
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.MonoSingletonPathAttribute*
        name: MonoSingletonPathAttribute
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.MonoSingletonPathAttribute.#ctor
  ZeroFramework.MonoSingletonPathAttribute:
    name:
      CSharp:
      - id: ZeroFramework.MonoSingletonPathAttribute
        name: MonoSingletonPathAttribute
      VB:
      - id: ZeroFramework.MonoSingletonPathAttribute
        name: MonoSingletonPathAttribute
    nameWithType:
      CSharp:
      - id: ZeroFramework.MonoSingletonPathAttribute
        name: MonoSingletonPathAttribute
      VB:
      - id: ZeroFramework.MonoSingletonPathAttribute
        name: MonoSingletonPathAttribute
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.MonoSingletonPathAttribute
        name: MonoSingletonPathAttribute
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.MonoSingletonPathAttribute
        name: MonoSingletonPathAttribute
    isDefinition: true
    commentId: T:ZeroFramework.MonoSingletonPathAttribute
  ZeroFramework.SingletonCreator.CreateSingleton*:
    name:
      CSharp:
      - id: ZeroFramework.SingletonCreator.CreateSingleton*
        name: CreateSingleton
      VB:
      - id: ZeroFramework.SingletonCreator.CreateSingleton*
        name: CreateSingleton
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonCreator*
        name: SingletonCreator
      - name: .
      - id: ZeroFramework.SingletonCreator.CreateSingleton*
        name: CreateSingleton
      VB:
      - id: ZeroFramework.SingletonCreator*
        name: SingletonCreator
      - name: .
      - id: ZeroFramework.SingletonCreator.CreateSingleton*
        name: CreateSingleton
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonCreator*
        name: SingletonCreator
      - name: .
      - id: ZeroFramework.SingletonCreator.CreateSingleton*
        name: CreateSingleton
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonCreator*
        name: SingletonCreator
      - name: .
      - id: ZeroFramework.SingletonCreator.CreateSingleton*
        name: CreateSingleton
    isDefinition: true
    commentId: Overload:ZeroFramework.SingletonCreator.CreateSingleton
  ZeroFramework.SingletonCreator.CreateMonoSingleton*:
    name:
      CSharp:
      - id: ZeroFramework.SingletonCreator.CreateMonoSingleton*
        name: CreateMonoSingleton
      VB:
      - id: ZeroFramework.SingletonCreator.CreateMonoSingleton*
        name: CreateMonoSingleton
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonCreator*
        name: SingletonCreator
      - name: .
      - id: ZeroFramework.SingletonCreator.CreateMonoSingleton*
        name: CreateMonoSingleton
      VB:
      - id: ZeroFramework.SingletonCreator*
        name: SingletonCreator
      - name: .
      - id: ZeroFramework.SingletonCreator.CreateMonoSingleton*
        name: CreateMonoSingleton
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonCreator*
        name: SingletonCreator
      - name: .
      - id: ZeroFramework.SingletonCreator.CreateMonoSingleton*
        name: CreateMonoSingleton
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonCreator*
        name: SingletonCreator
      - name: .
      - id: ZeroFramework.SingletonCreator.CreateMonoSingleton*
        name: CreateMonoSingleton
    isDefinition: true
    commentId: Overload:ZeroFramework.SingletonCreator.CreateMonoSingleton
  ZeroFramework.SingletonCreator:
    name:
      CSharp:
      - id: ZeroFramework.SingletonCreator
        name: SingletonCreator
      VB:
      - id: ZeroFramework.SingletonCreator
        name: SingletonCreator
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonCreator
        name: SingletonCreator
      VB:
      - id: ZeroFramework.SingletonCreator
        name: SingletonCreator
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonCreator
        name: SingletonCreator
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonCreator
        name: SingletonCreator
    isDefinition: true
    commentId: T:ZeroFramework.SingletonCreator
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: float
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Single
        name: float
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Single
        name: float
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  Global.SerializedProperty:
    name:
      CSharp:
      - id: Global.SerializedProperty
        name: SerializedProperty
        isExternal: true
      VB:
      - id: Global.SerializedProperty
        name: SerializedProperty
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.SerializedProperty
        name: SerializedProperty
        isExternal: true
      VB:
      - id: Global.SerializedProperty
        name: SerializedProperty
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.SerializedProperty
        name: SerializedProperty
        isExternal: true
      VB:
      - id: Global.SerializedProperty
        name: SerializedProperty
        isExternal: true
    isDefinition: true
  Global.GUIContent:
    name:
      CSharp:
      - id: Global.GUIContent
        name: GUIContent
        isExternal: true
      VB:
      - id: Global.GUIContent
        name: GUIContent
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.GUIContent
        name: GUIContent
        isExternal: true
      VB:
      - id: Global.GUIContent
        name: GUIContent
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.GUIContent
        name: GUIContent
        isExternal: true
      VB:
      - id: Global.GUIContent
        name: GUIContent
        isExternal: true
    isDefinition: true
  ZeroFramework.Utility.ReadOnlyDrawer.GetPropertyHeight*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ReadOnlyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
      VB:
      - id: ZeroFramework.Utility.ReadOnlyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ReadOnlyDrawer*
        name: ReadOnlyDrawer
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
      VB:
      - id: ZeroFramework.Utility.ReadOnlyDrawer*
        name: ReadOnlyDrawer
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer*
        name: ReadOnlyDrawer
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer*
        name: ReadOnlyDrawer
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ReadOnlyDrawer.GetPropertyHeight
  Global.Rect:
    name:
      CSharp:
      - id: Global.Rect
        name: Rect
        isExternal: true
      VB:
      - id: Global.Rect
        name: Rect
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Rect
        name: Rect
        isExternal: true
      VB:
      - id: Global.Rect
        name: Rect
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Rect
        name: Rect
        isExternal: true
      VB:
      - id: Global.Rect
        name: Rect
        isExternal: true
    isDefinition: true
  ZeroFramework.Utility.ReadOnlyDrawer.OnGUI*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ReadOnlyDrawer.OnGUI*
        name: OnGUI
      VB:
      - id: ZeroFramework.Utility.ReadOnlyDrawer.OnGUI*
        name: OnGUI
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ReadOnlyDrawer*
        name: ReadOnlyDrawer
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer.OnGUI*
        name: OnGUI
      VB:
      - id: ZeroFramework.Utility.ReadOnlyDrawer*
        name: ReadOnlyDrawer
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer.OnGUI*
        name: OnGUI
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer*
        name: ReadOnlyDrawer
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer.OnGUI*
        name: OnGUI
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer*
        name: ReadOnlyDrawer
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer.OnGUI*
        name: OnGUI
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ReadOnlyDrawer.OnGUI
  ZeroFramework.Utility.ReadOnlyDrawer:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ReadOnlyDrawer
        name: ReadOnlyDrawer
      VB:
      - id: ZeroFramework.Utility.ReadOnlyDrawer
        name: ReadOnlyDrawer
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ReadOnlyDrawer
        name: ReadOnlyDrawer
      VB:
      - id: ZeroFramework.Utility.ReadOnlyDrawer
        name: ReadOnlyDrawer
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer
        name: ReadOnlyDrawer
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyDrawer
        name: ReadOnlyDrawer
    isDefinition: true
    commentId: T:ZeroFramework.Utility.ReadOnlyDrawer
  ZeroFramework.Utility:
    name:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
    nameWithType:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
    isDefinition: true
    commentId: N:ZeroFramework.Utility
  ZeroFramework.Utility.NodeTreeViewer:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer
        name: NodeTreeViewer
      VB:
      - id: ZeroFramework.Utility.NodeTreeViewer
        name: NodeTreeViewer
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer
        name: NodeTreeViewer
      VB:
      - id: ZeroFramework.Utility.NodeTreeViewer
        name: NodeTreeViewer
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer
        name: NodeTreeViewer
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer
        name: NodeTreeViewer
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.NodeTreeViewer
  ZeroFramework.Utility.NodeView:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeView
        name: NodeView
      VB:
      - id: ZeroFramework.Utility.NodeView
        name: NodeView
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeView
        name: NodeView
      VB:
      - id: ZeroFramework.Utility.NodeView
        name: NodeView
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView
        name: NodeView
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView
        name: NodeView
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.NodeView
  ZeroFramework.Utility.InspectorViewer.UpdateSelection*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.InspectorViewer.UpdateSelection*
        name: UpdateSelection
      VB:
      - id: ZeroFramework.Utility.InspectorViewer.UpdateSelection*
        name: UpdateSelection
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.InspectorViewer*
        name: InspectorViewer
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer.UpdateSelection*
        name: UpdateSelection
      VB:
      - id: ZeroFramework.Utility.InspectorViewer*
        name: InspectorViewer
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer.UpdateSelection*
        name: UpdateSelection
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer*
        name: InspectorViewer
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer.UpdateSelection*
        name: UpdateSelection
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer*
        name: InspectorViewer
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer.UpdateSelection*
        name: UpdateSelection
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.InspectorViewer.UpdateSelection
  ZeroFramework.Utility.InspectorViewer:
    name:
      CSharp:
      - id: ZeroFramework.Utility.InspectorViewer
        name: InspectorViewer
      VB:
      - id: ZeroFramework.Utility.InspectorViewer
        name: InspectorViewer
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.InspectorViewer
        name: InspectorViewer
      VB:
      - id: ZeroFramework.Utility.InspectorViewer
        name: InspectorViewer
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer
        name: InspectorViewer
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer
        name: InspectorViewer
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.InspectorViewer
  ZeroFramework.Utility.InspectorViewer.UxmlFactory:
    name:
      CSharp:
      - id: ZeroFramework.Utility.InspectorViewer
        name: InspectorViewer
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer.UxmlFactory
        name: UxmlFactory
      VB:
      - id: ZeroFramework.Utility.InspectorViewer
        name: InspectorViewer
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer.UxmlFactory
        name: UxmlFactory
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.InspectorViewer
        name: InspectorViewer
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer.UxmlFactory
        name: UxmlFactory
      VB:
      - id: ZeroFramework.Utility.InspectorViewer
        name: InspectorViewer
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer.UxmlFactory
        name: UxmlFactory
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer
        name: InspectorViewer
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer.UxmlFactory
        name: UxmlFactory
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer
        name: InspectorViewer
      - name: .
      - id: ZeroFramework.Utility.InspectorViewer.UxmlFactory
        name: UxmlFactory
    isDefinition: true
    commentId: T:ZeroFramework.Utility.InspectorViewer.UxmlFactory
  ZeroFramework.Utility.NodeEditor.ShowExample*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeEditor.ShowExample*
        name: ShowExample
      VB:
      - id: ZeroFramework.Utility.NodeEditor.ShowExample*
        name: ShowExample
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeEditor*
        name: NodeEditor
      - name: .
      - id: ZeroFramework.Utility.NodeEditor.ShowExample*
        name: ShowExample
      VB:
      - id: ZeroFramework.Utility.NodeEditor*
        name: NodeEditor
      - name: .
      - id: ZeroFramework.Utility.NodeEditor.ShowExample*
        name: ShowExample
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeEditor*
        name: NodeEditor
      - name: .
      - id: ZeroFramework.Utility.NodeEditor.ShowExample*
        name: ShowExample
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeEditor*
        name: NodeEditor
      - name: .
      - id: ZeroFramework.Utility.NodeEditor.ShowExample*
        name: ShowExample
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeEditor.ShowExample
  ZeroFramework.Utility.NodeEditor.OnOpenAsset*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeEditor.OnOpenAsset*
        name: OnOpenAsset
      VB:
      - id: ZeroFramework.Utility.NodeEditor.OnOpenAsset*
        name: OnOpenAsset
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeEditor*
        name: NodeEditor
      - name: .
      - id: ZeroFramework.Utility.NodeEditor.OnOpenAsset*
        name: OnOpenAsset
      VB:
      - id: ZeroFramework.Utility.NodeEditor*
        name: NodeEditor
      - name: .
      - id: ZeroFramework.Utility.NodeEditor.OnOpenAsset*
        name: OnOpenAsset
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeEditor*
        name: NodeEditor
      - name: .
      - id: ZeroFramework.Utility.NodeEditor.OnOpenAsset*
        name: OnOpenAsset
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeEditor*
        name: NodeEditor
      - name: .
      - id: ZeroFramework.Utility.NodeEditor.OnOpenAsset*
        name: OnOpenAsset
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeEditor.OnOpenAsset
  ZeroFramework.Utility.NodeEditor.CreateGUI*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeEditor.CreateGUI*
        name: CreateGUI
      VB:
      - id: ZeroFramework.Utility.NodeEditor.CreateGUI*
        name: CreateGUI
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeEditor*
        name: NodeEditor
      - name: .
      - id: ZeroFramework.Utility.NodeEditor.CreateGUI*
        name: CreateGUI
      VB:
      - id: ZeroFramework.Utility.NodeEditor*
        name: NodeEditor
      - name: .
      - id: ZeroFramework.Utility.NodeEditor.CreateGUI*
        name: CreateGUI
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeEditor*
        name: NodeEditor
      - name: .
      - id: ZeroFramework.Utility.NodeEditor.CreateGUI*
        name: CreateGUI
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeEditor*
        name: NodeEditor
      - name: .
      - id: ZeroFramework.Utility.NodeEditor.CreateGUI*
        name: CreateGUI
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeEditor.CreateGUI
  ZeroFramework.Utility.NodeEditor:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeEditor
        name: NodeEditor
      VB:
      - id: ZeroFramework.Utility.NodeEditor
        name: NodeEditor
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeEditor
        name: NodeEditor
      VB:
      - id: ZeroFramework.Utility.NodeEditor
        name: NodeEditor
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeEditor
        name: NodeEditor
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeEditor
        name: NodeEditor
    isDefinition: true
    commentId: T:ZeroFramework.Utility.NodeEditor
  ZeroFramework.Utility.NodeEditorConstant:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeEditorConstant
        name: NodeEditorConstant
      VB:
      - id: ZeroFramework.Utility.NodeEditorConstant
        name: NodeEditorConstant
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeEditorConstant
        name: NodeEditorConstant
      VB:
      - id: ZeroFramework.Utility.NodeEditorConstant
        name: NodeEditorConstant
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeEditorConstant
        name: NodeEditorConstant
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeEditorConstant
        name: NodeEditorConstant
    isDefinition: true
    commentId: T:ZeroFramework.Utility.NodeEditorConstant
  ZeroFramework.Utility.NodeTree:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeTree
        name: NodeTree
      VB:
      - id: ZeroFramework.Utility.NodeTree
        name: NodeTree
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeTree
        name: NodeTree
      VB:
      - id: ZeroFramework.Utility.NodeTree
        name: NodeTree
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTree
        name: NodeTree
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTree
        name: NodeTree
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.NodeTree
  Global.Action{ZeroFramework.Utility.NodeView}:
    name:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: ZeroFramework.Utility.NodeView
        name: NodeView
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.NodeView
        name: NodeView
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: ZeroFramework.Utility.NodeView
        name: NodeView
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.NodeView
        name: NodeView
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView
        name: NodeView
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView
        name: NodeView
      - name: )
    isDefinition: false
    definition: Global.Action`1
    commentId: '!:Global.Action{ZeroFramework.Utility.NodeView}'
  ZeroFramework.Utility.NodeTreeViewer.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer.#ctor*
        name: NodeTreeViewer
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.#ctor*
        name: NodeTreeViewer
      VB:
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.#ctor*
        name: NodeTreeViewer
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeTreeViewer.#ctor
  Global.ContextualMenuPopulateEvent:
    name:
      CSharp:
      - id: Global.ContextualMenuPopulateEvent
        name: ContextualMenuPopulateEvent
        isExternal: true
      VB:
      - id: Global.ContextualMenuPopulateEvent
        name: ContextualMenuPopulateEvent
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.ContextualMenuPopulateEvent
        name: ContextualMenuPopulateEvent
        isExternal: true
      VB:
      - id: Global.ContextualMenuPopulateEvent
        name: ContextualMenuPopulateEvent
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.ContextualMenuPopulateEvent
        name: ContextualMenuPopulateEvent
        isExternal: true
      VB:
      - id: Global.ContextualMenuPopulateEvent
        name: ContextualMenuPopulateEvent
        isExternal: true
    isDefinition: true
    commentId: '!:Global.ContextualMenuPopulateEvent'
  ZeroFramework.Utility.NodeTreeViewer.BuildContextualMenu*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer.BuildContextualMenu*
        name: BuildContextualMenu
      VB:
      - id: ZeroFramework.Utility.NodeTreeViewer.BuildContextualMenu*
        name: BuildContextualMenu
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.BuildContextualMenu*
        name: BuildContextualMenu
      VB:
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.BuildContextualMenu*
        name: BuildContextualMenu
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.BuildContextualMenu*
        name: BuildContextualMenu
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.BuildContextualMenu*
        name: BuildContextualMenu
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeTreeViewer.BuildContextualMenu
  ZeroFramework.Utility.NodeTreeViewer.PopulateView*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer.PopulateView*
        name: PopulateView
      VB:
      - id: ZeroFramework.Utility.NodeTreeViewer.PopulateView*
        name: PopulateView
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.PopulateView*
        name: PopulateView
      VB:
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.PopulateView*
        name: PopulateView
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.PopulateView*
        name: PopulateView
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.PopulateView*
        name: PopulateView
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeTreeViewer.PopulateView
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic.List{Port}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Port
        name: Port
        isExternal: true
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Port
        name: Port
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Port
        name: Port
        isExternal: true
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Port
        name: Port
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Port
        name: Port
        isExternal: true
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Port
        name: Port
        isExternal: true
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Port}
  Global.Port:
    name:
      CSharp:
      - id: Global.Port
        name: Port
        isExternal: true
      VB:
      - id: Global.Port
        name: Port
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Port
        name: Port
        isExternal: true
      VB:
      - id: Global.Port
        name: Port
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Port
        name: Port
        isExternal: true
      VB:
      - id: Global.Port
        name: Port
        isExternal: true
    isDefinition: true
  Global.NodeAdapter:
    name:
      CSharp:
      - id: Global.NodeAdapter
        name: NodeAdapter
        isExternal: true
      VB:
      - id: Global.NodeAdapter
        name: NodeAdapter
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.NodeAdapter
        name: NodeAdapter
        isExternal: true
      VB:
      - id: Global.NodeAdapter
        name: NodeAdapter
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.NodeAdapter
        name: NodeAdapter
        isExternal: true
      VB:
      - id: Global.NodeAdapter
        name: NodeAdapter
        isExternal: true
    isDefinition: true
    commentId: '!:Global.NodeAdapter'
  ZeroFramework.Utility.NodeTreeViewer.GetCompatiblePorts*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer.GetCompatiblePorts*
        name: GetCompatiblePorts
      VB:
      - id: ZeroFramework.Utility.NodeTreeViewer.GetCompatiblePorts*
        name: GetCompatiblePorts
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.GetCompatiblePorts*
        name: GetCompatiblePorts
      VB:
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.GetCompatiblePorts*
        name: GetCompatiblePorts
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.GetCompatiblePorts*
        name: GetCompatiblePorts
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.GetCompatiblePorts*
        name: GetCompatiblePorts
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeTreeViewer.GetCompatiblePorts
  ZeroFramework.Utility.NodeTreeViewer.UpdateNodeStates*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer.UpdateNodeStates*
        name: UpdateNodeStates
      VB:
      - id: ZeroFramework.Utility.NodeTreeViewer.UpdateNodeStates*
        name: UpdateNodeStates
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.UpdateNodeStates*
        name: UpdateNodeStates
      VB:
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.UpdateNodeStates*
        name: UpdateNodeStates
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.UpdateNodeStates*
        name: UpdateNodeStates
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer*
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.UpdateNodeStates*
        name: UpdateNodeStates
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeTreeViewer.UpdateNodeStates
  ZeroFramework.Utility.NodeTreeViewer.UxmlFactory:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.UxmlFactory
        name: UxmlFactory
      VB:
      - id: ZeroFramework.Utility.NodeTreeViewer
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.UxmlFactory
        name: UxmlFactory
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeViewer
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.UxmlFactory
        name: UxmlFactory
      VB:
      - id: ZeroFramework.Utility.NodeTreeViewer
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.UxmlFactory
        name: UxmlFactory
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.UxmlFactory
        name: UxmlFactory
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer
        name: NodeTreeViewer
      - name: .
      - id: ZeroFramework.Utility.NodeTreeViewer.UxmlFactory
        name: UxmlFactory
    isDefinition: true
    commentId: T:ZeroFramework.Utility.NodeTreeViewer.UxmlFactory
  ZeroFramework.Utility.Node:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.Node
  ZeroFramework.Utility.NodeView.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeView.#ctor*
        name: NodeView
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.#ctor*
        name: NodeView
      VB:
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.#ctor*
        name: NodeView
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeView.#ctor
  ZeroFramework.Utility.NodeView.SetNodeStateStyle*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeView.SetNodeStateStyle*
        name: SetNodeStateStyle
      VB:
      - id: ZeroFramework.Utility.NodeView.SetNodeStateStyle*
        name: SetNodeStateStyle
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.SetNodeStateStyle*
        name: SetNodeStateStyle
      VB:
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.SetNodeStateStyle*
        name: SetNodeStateStyle
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.SetNodeStateStyle*
        name: SetNodeStateStyle
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.SetNodeStateStyle*
        name: SetNodeStateStyle
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeView.SetNodeStateStyle
  ZeroFramework.Utility.NodeView.OnSelected*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeView.OnSelected*
        name: OnSelected
      VB:
      - id: ZeroFramework.Utility.NodeView.OnSelected*
        name: OnSelected
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.OnSelected*
        name: OnSelected
      VB:
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.OnSelected*
        name: OnSelected
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.OnSelected*
        name: OnSelected
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.OnSelected*
        name: OnSelected
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeView.OnSelected
  ZeroFramework.Utility.NodeView.OnUnselected*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeView.OnUnselected*
        name: OnUnselected
      VB:
      - id: ZeroFramework.Utility.NodeView.OnUnselected*
        name: OnUnselected
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.OnUnselected*
        name: OnUnselected
      VB:
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.OnUnselected*
        name: OnUnselected
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.OnUnselected*
        name: OnUnselected
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.OnUnselected*
        name: OnUnselected
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeView.OnUnselected
  ZeroFramework.Utility.NodeView.SetPosition*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeView.SetPosition*
        name: SetPosition
      VB:
      - id: ZeroFramework.Utility.NodeView.SetPosition*
        name: SetPosition
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.SetPosition*
        name: SetPosition
      VB:
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.SetPosition*
        name: SetPosition
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.SetPosition*
        name: SetPosition
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeView*
        name: NodeView
      - name: .
      - id: ZeroFramework.Utility.NodeView.SetPosition*
        name: SetPosition
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeView.SetPosition
  ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
    isDefinition: false
    definition: ZeroFramework.Singleton`1
    parent: ZeroFramework
    commentId: T:ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}
  ZeroFramework.Singleton`1.mInstance:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework.Singleton`1.mInstance
        name: mInstance
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.mInstance
        name: mInstance
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.mInstance
        name: mInstance
    isDefinition: true
    commentId: F:ZeroFramework.Singleton`1.mInstance
  ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.mInstance:
    name:
      CSharp:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.mInstance
        name: mInstance
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.mInstance
        name: mInstance
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.mInstance
        name: mInstance
    isDefinition: false
    definition: ZeroFramework.Singleton`1.mInstance
    parent: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}
    commentId: F:ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.mInstance
  ZeroFramework.Singleton`1.Instance:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1.Instance
        name: Instance
      VB:
      - id: ZeroFramework.Singleton`1.Instance
        name: Instance
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.Instance
        name: Instance
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.Instance
        name: Instance
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.Instance
        name: Instance
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.Instance
        name: Instance
    isDefinition: true
    commentId: P:ZeroFramework.Singleton`1.Instance
  ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Instance:
    name:
      CSharp:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Instance
        name: Instance
      VB:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Instance
        name: Instance
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Instance
        name: Instance
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Instance
        name: Instance
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Instance
        name: Instance
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Instance
        name: Instance
    isDefinition: false
    definition: ZeroFramework.Singleton`1.Instance
    parent: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}
    commentId: P:ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Instance
  ZeroFramework.Singleton`1.ID:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1.ID
        name: ID
      VB:
      - id: ZeroFramework.Singleton`1.ID
        name: ID
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.ID
        name: ID
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.ID
        name: ID
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.ID
        name: ID
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.ID
        name: ID
    isDefinition: true
    commentId: F:ZeroFramework.Singleton`1.ID
  ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ID:
    name:
      CSharp:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ID
        name: ID
      VB:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ID
        name: ID
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ID
        name: ID
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ID
        name: ID
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ID
        name: ID
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ID
        name: ID
    isDefinition: false
    definition: ZeroFramework.Singleton`1.ID
    parent: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}
    commentId: F:ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ID
  ZeroFramework.Singleton`1.Dispose:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton`1.Dispose
        name: Dispose
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.Dispose
        name: Dispose
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.Dispose
        name: Dispose
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Singleton`1.Dispose
  ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Dispose:
    name:
      CSharp:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Dispose
        name: Dispose
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Dispose
        name: Dispose
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Dispose
        name: Dispose
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Singleton`1.Dispose
    parent: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}
    commentId: M:ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.Dispose
  ZeroFramework.Singleton`1.OnSingletonInit:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton`1.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Singleton`1.OnSingletonInit
  ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.OnSingletonInit:
    name:
      CSharp:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Singleton`1.OnSingletonInit
    parent: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}
    commentId: M:ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.OnSingletonInit
  ZeroFramework.Singleton`1.ResetID:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton`1.ResetID
        name: ResetID
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.ResetID
        name: ResetID
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.ResetID
        name: ResetID
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Singleton`1.ResetID
  ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ResetID:
    name:
      CSharp:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ResetID
        name: ResetID
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ResetID
        name: ResetID
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ResetID
        name: ResetID
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Singleton`1.ResetID
    parent: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}
    commentId: M:ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.ResetID
  ZeroFramework.Singleton`1.GetID:
    name:
      CSharp:
      - id: ZeroFramework.Singleton`1.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton`1.GetID
        name: GetID
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.GetID
        name: GetID
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton`1.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Singleton`1.GetID
        name: GetID
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Singleton`1.GetID
  ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.GetID:
    name:
      CSharp:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.GetID
        name: GetID
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.GetID
        name: GetID
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: '>'
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Singleton`1
        name: Singleton
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      - name: )
      - name: .
      - id: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.GetID
        name: GetID
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Singleton`1.GetID
    parent: ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}
    commentId: M:ZeroFramework.Singleton{ZeroFramework.Utility.ZeroToolKits}.GetID
  ZeroFramework.Utility.IConfigKit:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
      VB:
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
      VB:
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.IConfigKit
  ZeroFramework.Utility.ZeroToolKits._G*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ZeroToolKits._G*
        name: _G
      VB:
      - id: ZeroFramework.Utility.ZeroToolKits._G*
        name: _G
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits._G*
        name: _G
      VB:
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits._G*
        name: _G
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits._G*
        name: _G
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits._G*
        name: _G
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ZeroToolKits._G
  Global.ILogKit:
    name:
      CSharp:
      - id: Global.ILogKit
        name: ILogKit
        isExternal: true
      VB:
      - id: Global.ILogKit
        name: ILogKit
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.ILogKit
        name: ILogKit
        isExternal: true
      VB:
      - id: Global.ILogKit
        name: ILogKit
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.ILogKit
        name: ILogKit
        isExternal: true
      VB:
      - id: Global.ILogKit
        name: ILogKit
        isExternal: true
    isDefinition: true
    commentId: '!:Global.ILogKit'
  ZeroFramework.Utility.ZeroToolKits.LogKit*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ZeroToolKits.LogKit*
        name: LogKit
      VB:
      - id: ZeroFramework.Utility.ZeroToolKits.LogKit*
        name: LogKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.LogKit*
        name: LogKit
      VB:
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.LogKit*
        name: LogKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.LogKit*
        name: LogKit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.LogKit*
        name: LogKit
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ZeroToolKits.LogKit
  ZeroFramework.Utility.IFileKit:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      VB:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      VB:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.IFileKit
  ZeroFramework.Utility.ZeroToolKits.FileKit*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ZeroToolKits.FileKit*
        name: FileKit
      VB:
      - id: ZeroFramework.Utility.ZeroToolKits.FileKit*
        name: FileKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.FileKit*
        name: FileKit
      VB:
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.FileKit*
        name: FileKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.FileKit*
        name: FileKit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.FileKit*
        name: FileKit
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ZeroToolKits.FileKit
  ZeroFramework.Utility.IPoolKit:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      VB:
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      VB:
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.IPoolKit
  ZeroFramework.Utility.ZeroToolKits.PoolKit*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ZeroToolKits.PoolKit*
        name: PoolKit
      VB:
      - id: ZeroFramework.Utility.ZeroToolKits.PoolKit*
        name: PoolKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.PoolKit*
        name: PoolKit
      VB:
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.PoolKit*
        name: PoolKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.PoolKit*
        name: PoolKit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.PoolKit*
        name: PoolKit
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ZeroToolKits.PoolKit
  ZeroFramework.Utility.ITimestampKit:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      VB:
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      VB:
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.ITimestampKit
  ZeroFramework.Utility.ZeroToolKits.TimestampKit*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ZeroToolKits.TimestampKit*
        name: TimestampKit
      VB:
      - id: ZeroFramework.Utility.ZeroToolKits.TimestampKit*
        name: TimestampKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.TimestampKit*
        name: TimestampKit
      VB:
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.TimestampKit*
        name: TimestampKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.TimestampKit*
        name: TimestampKit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits*
        name: ZeroToolKits
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits.TimestampKit*
        name: TimestampKit
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ZeroToolKits.TimestampKit
  ZeroFramework.Utility.ZeroToolKits:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      VB:
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      VB:
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroToolKits
        name: ZeroToolKits
    isDefinition: true
    commentId: T:ZeroFramework.Utility.ZeroToolKits
  ZeroFramework.Utility.ReadOnlyAttribute:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ReadOnlyAttribute
        name: ReadOnlyAttribute
      VB:
      - id: ZeroFramework.Utility.ReadOnlyAttribute
        name: ReadOnlyAttribute
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ReadOnlyAttribute
        name: ReadOnlyAttribute
      VB:
      - id: ZeroFramework.Utility.ReadOnlyAttribute
        name: ReadOnlyAttribute
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyAttribute
        name: ReadOnlyAttribute
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ReadOnlyAttribute
        name: ReadOnlyAttribute
    isDefinition: true
    commentId: T:ZeroFramework.Utility.ReadOnlyAttribute
  Global.JObject:
    name:
      CSharp:
      - id: Global.JObject
        name: JObject
        isExternal: true
      VB:
      - id: Global.JObject
        name: JObject
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.JObject
        name: JObject
        isExternal: true
      VB:
      - id: Global.JObject
        name: JObject
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.JObject
        name: JObject
        isExternal: true
      VB:
      - id: Global.JObject
        name: JObject
        isExternal: true
    isDefinition: true
    commentId: '!:Global.JObject'
  System.Collections.Generic.Dictionary`2:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - name: TKey
      - name: ','
      - name: " "
      - name: TValue
      - name: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: ','
      - name: " "
      - name: TValue
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - name: TKey
      - name: ','
      - name: " "
      - name: TValue
      - name: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: ','
      - name: " "
      - name: TValue
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - name: TKey
      - name: ','
      - name: " "
      - name: TValue
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TKey
      - name: ','
      - name: " "
      - name: TValue
      - name: )
    isDefinition: true
    commentId: T:System.Collections.Generic.Dictionary`2
  System.Collections.Generic.Dictionary{System.String,System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: ','
      - name: " "
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: ','
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: ','
      - name: " "
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: ','
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: ','
      - name: " "
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: ','
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  ZeroFramework.Utility.ConfigKit.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ConfigKit.#ctor*
        name: ConfigKit
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ConfigKit*
        name: ConfigKit
      - name: .
      - id: ZeroFramework.Utility.ConfigKit.#ctor*
        name: ConfigKit
      VB:
      - id: ZeroFramework.Utility.ConfigKit*
        name: ConfigKit
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ConfigKit*
        name: ConfigKit
      - name: .
      - id: ZeroFramework.Utility.ConfigKit.#ctor*
        name: ConfigKit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ConfigKit*
        name: ConfigKit
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ConfigKit.#ctor
  Global.JToken:
    name:
      CSharp:
      - id: Global.JToken
        name: JToken
        isExternal: true
      VB:
      - id: Global.JToken
        name: JToken
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.JToken
        name: JToken
        isExternal: true
      VB:
      - id: Global.JToken
        name: JToken
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.JToken
        name: JToken
        isExternal: true
      VB:
      - id: Global.JToken
        name: JToken
        isExternal: true
    isDefinition: true
  ZeroFramework.Utility.ConfigKit.Item*:
    name:
      CSharp:
      - name: this
      VB:
      - id: ZeroFramework.Utility.ConfigKit.Item*
        name: this[]
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ConfigKit*
        name: ConfigKit
      - name: .
      - name: this
      VB:
      - id: ZeroFramework.Utility.ConfigKit*
        name: ConfigKit
      - name: .
      - id: ZeroFramework.Utility.ConfigKit.Item*
        name: this[]
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ConfigKit*
        name: ConfigKit
      - name: .
      - name: this
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ConfigKit*
        name: ConfigKit
      - name: .
      - id: ZeroFramework.Utility.ConfigKit.Item*
        name: this[]
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ConfigKit.Item
  ZeroFramework.Utility.IConfigKit.Item(System.String):
    name:
      CSharp:
      - name: this
      - name: '['
      - id: System.String
        name: string
        isExternal: true
      - name: ']'
      VB:
      - id: ZeroFramework.Utility.IConfigKit.Item(System.String)
        name: this[]
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
      - name: .
      - name: this
      - name: '['
      - id: System.String
        name: string
        isExternal: true
      - name: ']'
      VB:
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
      - name: .
      - id: ZeroFramework.Utility.IConfigKit.Item(System.String)
        name: this[]
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
      - name: .
      - name: this
      - name: '['
      - id: System.String
        name: string
        isExternal: true
      - name: ']'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
      - name: .
      - id: ZeroFramework.Utility.IConfigKit.Item(System.String)
        name: this[]
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IConfigKit
    commentId: P:ZeroFramework.Utility.IConfigKit.Item(System.String)
  ZeroFramework.Utility.ConfigKit.Get*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ConfigKit.Get*
        name: Get
      VB:
      - id: ZeroFramework.Utility.ConfigKit.Get*
        name: Get
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ConfigKit*
        name: ConfigKit
      - name: .
      - id: ZeroFramework.Utility.ConfigKit.Get*
        name: Get
      VB:
      - id: ZeroFramework.Utility.ConfigKit*
        name: ConfigKit
      - name: .
      - id: ZeroFramework.Utility.ConfigKit.Get*
        name: Get
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ConfigKit*
        name: ConfigKit
      - name: .
      - id: ZeroFramework.Utility.ConfigKit.Get*
        name: Get
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ConfigKit*
        name: ConfigKit
      - name: .
      - id: ZeroFramework.Utility.ConfigKit.Get*
        name: Get
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ConfigKit.Get
  ZeroFramework.Utility.IConfigKit.Get``1(System.String):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IConfigKit.Get``1(System.String)
        name: Get
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IConfigKit.Get``1(System.String)
        name: Get
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
      - name: .
      - id: ZeroFramework.Utility.IConfigKit.Get``1(System.String)
        name: Get
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
      - name: .
      - id: ZeroFramework.Utility.IConfigKit.Get``1(System.String)
        name: Get
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
      - name: .
      - id: ZeroFramework.Utility.IConfigKit.Get``1(System.String)
        name: Get
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IConfigKit
        name: IConfigKit
      - name: .
      - id: ZeroFramework.Utility.IConfigKit.Get``1(System.String)
        name: Get
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IConfigKit
    commentId: M:ZeroFramework.Utility.IConfigKit.Get``1(System.String)
  ZeroFramework.Utility.ConfigKit:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ConfigKit
        name: ConfigKit
      VB:
      - id: ZeroFramework.Utility.ConfigKit
        name: ConfigKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ConfigKit
        name: ConfigKit
      VB:
      - id: ZeroFramework.Utility.ConfigKit
        name: ConfigKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ConfigKit
        name: ConfigKit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ConfigKit
        name: ConfigKit
    isDefinition: true
    commentId: T:ZeroFramework.Utility.ConfigKit
  ZeroFramework.Utility.IConfigKit.Item*:
    name:
      CSharp:
      - name: this
      VB:
      - id: ZeroFramework.Utility.IConfigKit.Item*
        name: this[]
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IConfigKit*
        name: IConfigKit
      - name: .
      - name: this
      VB:
      - id: ZeroFramework.Utility.IConfigKit*
        name: IConfigKit
      - name: .
      - id: ZeroFramework.Utility.IConfigKit.Item*
        name: this[]
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IConfigKit*
        name: IConfigKit
      - name: .
      - name: this
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IConfigKit*
        name: IConfigKit
      - name: .
      - id: ZeroFramework.Utility.IConfigKit.Item*
        name: this[]
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IConfigKit.Item
  ZeroFramework.Utility.IConfigKit.Get*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IConfigKit.Get*
        name: Get
      VB:
      - id: ZeroFramework.Utility.IConfigKit.Get*
        name: Get
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IConfigKit*
        name: IConfigKit
      - name: .
      - id: ZeroFramework.Utility.IConfigKit.Get*
        name: Get
      VB:
      - id: ZeroFramework.Utility.IConfigKit*
        name: IConfigKit
      - name: .
      - id: ZeroFramework.Utility.IConfigKit.Get*
        name: Get
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IConfigKit*
        name: IConfigKit
      - name: .
      - id: ZeroFramework.Utility.IConfigKit.Get*
        name: Get
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IConfigKit*
        name: IConfigKit
      - name: .
      - id: ZeroFramework.Utility.IConfigKit.Get*
        name: Get
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IConfigKit.Get
  ZeroFramework.Utility.BytesTool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.BytesTool
        name: BytesTool
      VB:
      - id: ZeroFramework.Utility.BytesTool
        name: BytesTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.BytesTool
        name: BytesTool
      VB:
      - id: ZeroFramework.Utility.BytesTool
        name: BytesTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.BytesTool
        name: BytesTool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.BytesTool
        name: BytesTool
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.BytesTool
  ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#BytesTool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#BytesTool*
        name: BytesTool
      VB:
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#BytesTool*
        name: ZeroFramework.Utility.IFileKit.BytesTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#BytesTool*
        name: BytesTool
      VB:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#BytesTool*
        name: ZeroFramework.Utility.IFileKit.BytesTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#BytesTool*
        name: BytesTool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#BytesTool*
        name: ZeroFramework.Utility.IFileKit.BytesTool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#BytesTool
  ZeroFramework.Utility.IFileKit.BytesTool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.BytesTool
        name: BytesTool
      VB:
      - id: ZeroFramework.Utility.IFileKit.BytesTool
        name: BytesTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesTool
        name: BytesTool
      VB:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesTool
        name: BytesTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesTool
        name: BytesTool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesTool
        name: BytesTool
    isDefinition: true
    parent: ZeroFramework.Utility.IFileKit
    commentId: P:ZeroFramework.Utility.IFileKit.BytesTool
  ZeroFramework.Utility.ImageTool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ImageTool
        name: ImageTool
      VB:
      - id: ZeroFramework.Utility.ImageTool
        name: ImageTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ImageTool
        name: ImageTool
      VB:
      - id: ZeroFramework.Utility.ImageTool
        name: ImageTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ImageTool
        name: ImageTool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ImageTool
        name: ImageTool
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.ImageTool
  ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ImageTool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ImageTool*
        name: ImageTool
      VB:
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ImageTool*
        name: ZeroFramework.Utility.IFileKit.ImageTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ImageTool*
        name: ImageTool
      VB:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ImageTool*
        name: ZeroFramework.Utility.IFileKit.ImageTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ImageTool*
        name: ImageTool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ImageTool*
        name: ZeroFramework.Utility.IFileKit.ImageTool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ImageTool
  ZeroFramework.Utility.IFileKit.ImageTool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.ImageTool
        name: ImageTool
      VB:
      - id: ZeroFramework.Utility.IFileKit.ImageTool
        name: ImageTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ImageTool
        name: ImageTool
      VB:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ImageTool
        name: ImageTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ImageTool
        name: ImageTool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ImageTool
        name: ImageTool
    isDefinition: true
    parent: ZeroFramework.Utility.IFileKit
    commentId: P:ZeroFramework.Utility.IFileKit.ImageTool
  ZeroFramework.Utility.JsonTool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.JsonTool
        name: JsonTool
      VB:
      - id: ZeroFramework.Utility.JsonTool
        name: JsonTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.JsonTool
        name: JsonTool
      VB:
      - id: ZeroFramework.Utility.JsonTool
        name: JsonTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.JsonTool
        name: JsonTool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.JsonTool
        name: JsonTool
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.JsonTool
  ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#JsonTool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#JsonTool*
        name: JsonTool
      VB:
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#JsonTool*
        name: ZeroFramework.Utility.IFileKit.JsonTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#JsonTool*
        name: JsonTool
      VB:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#JsonTool*
        name: ZeroFramework.Utility.IFileKit.JsonTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#JsonTool*
        name: JsonTool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#JsonTool*
        name: ZeroFramework.Utility.IFileKit.JsonTool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#JsonTool
  ZeroFramework.Utility.IFileKit.JsonTool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.JsonTool
        name: JsonTool
      VB:
      - id: ZeroFramework.Utility.IFileKit.JsonTool
        name: JsonTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.JsonTool
        name: JsonTool
      VB:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.JsonTool
        name: JsonTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.JsonTool
        name: JsonTool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.JsonTool
        name: JsonTool
    isDefinition: true
    parent: ZeroFramework.Utility.IFileKit
    commentId: P:ZeroFramework.Utility.IFileKit.JsonTool
  ZeroFramework.Utility.TextTool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TextTool
        name: TextTool
      VB:
      - id: ZeroFramework.Utility.TextTool
        name: TextTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TextTool
        name: TextTool
      VB:
      - id: ZeroFramework.Utility.TextTool
        name: TextTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TextTool
        name: TextTool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TextTool
        name: TextTool
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.TextTool
  ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#TextTool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#TextTool*
        name: TextTool
      VB:
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#TextTool*
        name: ZeroFramework.Utility.IFileKit.TextTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#TextTool*
        name: TextTool
      VB:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#TextTool*
        name: ZeroFramework.Utility.IFileKit.TextTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#TextTool*
        name: TextTool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#TextTool*
        name: ZeroFramework.Utility.IFileKit.TextTool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#TextTool
  ZeroFramework.Utility.IFileKit.TextTool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.TextTool
        name: TextTool
      VB:
      - id: ZeroFramework.Utility.IFileKit.TextTool
        name: TextTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.TextTool
        name: TextTool
      VB:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.TextTool
        name: TextTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.TextTool
        name: TextTool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.TextTool
        name: TextTool
    isDefinition: true
    parent: ZeroFramework.Utility.IFileKit
    commentId: P:ZeroFramework.Utility.IFileKit.TextTool
  ZeroFramework.Utility.YamlTool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.YamlTool
        name: YamlTool
      VB:
      - id: ZeroFramework.Utility.YamlTool
        name: YamlTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.YamlTool
        name: YamlTool
      VB:
      - id: ZeroFramework.Utility.YamlTool
        name: YamlTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.YamlTool
        name: YamlTool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.YamlTool
        name: YamlTool
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.YamlTool
  ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#YamlTool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#YamlTool*
        name: YamlTool
      VB:
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#YamlTool*
        name: ZeroFramework.Utility.IFileKit.YamlTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#YamlTool*
        name: YamlTool
      VB:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#YamlTool*
        name: ZeroFramework.Utility.IFileKit.YamlTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#YamlTool*
        name: YamlTool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#YamlTool*
        name: ZeroFramework.Utility.IFileKit.YamlTool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#YamlTool
  ZeroFramework.Utility.IFileKit.YamlTool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.YamlTool
        name: YamlTool
      VB:
      - id: ZeroFramework.Utility.IFileKit.YamlTool
        name: YamlTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.YamlTool
        name: YamlTool
      VB:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.YamlTool
        name: YamlTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.YamlTool
        name: YamlTool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.YamlTool
        name: YamlTool
    isDefinition: true
    parent: ZeroFramework.Utility.IFileKit
    commentId: P:ZeroFramework.Utility.IFileKit.YamlTool
  ZeroFramework.Utility.ExcelTool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelTool
        name: ExcelTool
      VB:
      - id: ZeroFramework.Utility.ExcelTool
        name: ExcelTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelTool
        name: ExcelTool
      VB:
      - id: ZeroFramework.Utility.ExcelTool
        name: ExcelTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelTool
        name: ExcelTool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelTool
        name: ExcelTool
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.ExcelTool
  ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ExcelTool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ExcelTool*
        name: ExcelTool
      VB:
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ExcelTool*
        name: ZeroFramework.Utility.IFileKit.ExcelTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ExcelTool*
        name: ExcelTool
      VB:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ExcelTool*
        name: ZeroFramework.Utility.IFileKit.ExcelTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ExcelTool*
        name: ExcelTool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ExcelTool*
        name: ZeroFramework.Utility.IFileKit.ExcelTool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.FileKit.ZeroFramework#Utility#IFileKit#ExcelTool
  ZeroFramework.Utility.IFileKit.ExcelTool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.ExcelTool
        name: ExcelTool
      VB:
      - id: ZeroFramework.Utility.IFileKit.ExcelTool
        name: ExcelTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ExcelTool
        name: ExcelTool
      VB:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ExcelTool
        name: ExcelTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ExcelTool
        name: ExcelTool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ExcelTool
        name: ExcelTool
    isDefinition: true
    parent: ZeroFramework.Utility.IFileKit
    commentId: P:ZeroFramework.Utility.IFileKit.ExcelTool
  System.Byte[]:
    name:
      CSharp:
      - id: System.Byte
        name: byte
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: System.Byte
        name: Byte
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.Byte
        name: byte
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: System.Byte
        name: Byte
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Byte
        name: byte
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: System.Byte
        name: Byte
        isExternal: true
      - name: (
      - name: )
    isDefinition: false
  ZeroFramework.Utility.FileKit.BytesToString*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.FileKit.BytesToString*
        name: BytesToString
      VB:
      - id: ZeroFramework.Utility.FileKit.BytesToString*
        name: BytesToString
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.BytesToString*
        name: BytesToString
      VB:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.BytesToString*
        name: BytesToString
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.BytesToString*
        name: BytesToString
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.BytesToString*
        name: BytesToString
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.FileKit.BytesToString
  ZeroFramework.Utility.IFileKit.BytesToString(System.Byte[]):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.BytesToString(System.Byte[])
        name: BytesToString
      - name: (
      - id: System.Byte
        name: byte
        isExternal: true
      - name: '['
      - name: ']'
      - name: )
      VB:
      - id: ZeroFramework.Utility.IFileKit.BytesToString(System.Byte[])
        name: BytesToString
      - name: (
      - id: System.Byte
        name: Byte
        isExternal: true
      - name: (
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesToString(System.Byte[])
        name: BytesToString
      - name: (
      - id: System.Byte
        name: byte
        isExternal: true
      - name: '['
      - name: ']'
      - name: )
      VB:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesToString(System.Byte[])
        name: BytesToString
      - name: (
      - id: System.Byte
        name: Byte
        isExternal: true
      - name: (
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesToString(System.Byte[])
        name: BytesToString
      - name: (
      - id: System.Byte
        name: byte
        isExternal: true
      - name: '['
      - name: ']'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesToString(System.Byte[])
        name: BytesToString
      - name: (
      - id: System.Byte
        name: Byte
        isExternal: true
      - name: (
      - name: )
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IFileKit
    commentId: M:ZeroFramework.Utility.IFileKit.BytesToString(System.Byte[])
  ZeroFramework.Utility.FileKit.StringToBytes*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.FileKit.StringToBytes*
        name: StringToBytes
      VB:
      - id: ZeroFramework.Utility.FileKit.StringToBytes*
        name: StringToBytes
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.StringToBytes*
        name: StringToBytes
      VB:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.StringToBytes*
        name: StringToBytes
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.StringToBytes*
        name: StringToBytes
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.StringToBytes*
        name: StringToBytes
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.FileKit.StringToBytes
  ZeroFramework.Utility.IFileKit.StringToBytes(System.String):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.StringToBytes(System.String)
        name: StringToBytes
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IFileKit.StringToBytes(System.String)
        name: StringToBytes
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.StringToBytes(System.String)
        name: StringToBytes
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.StringToBytes(System.String)
        name: StringToBytes
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.StringToBytes(System.String)
        name: StringToBytes
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.StringToBytes(System.String)
        name: StringToBytes
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IFileKit
    commentId: M:ZeroFramework.Utility.IFileKit.StringToBytes(System.String)
  ZeroFramework.Utility.FileKit.Yaml2Json2Obj*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.FileKit.Yaml2Json2Obj*
        name: Yaml2Json2Obj
      VB:
      - id: ZeroFramework.Utility.FileKit.Yaml2Json2Obj*
        name: Yaml2Json2Obj
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.Yaml2Json2Obj*
        name: Yaml2Json2Obj
      VB:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.Yaml2Json2Obj*
        name: Yaml2Json2Obj
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.Yaml2Json2Obj*
        name: Yaml2Json2Obj
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.Yaml2Json2Obj*
        name: Yaml2Json2Obj
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.FileKit.Yaml2Json2Obj
  ZeroFramework.Utility.IFileKit.Yaml2Json2Obj``1(System.String):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj``1(System.String)
        name: Yaml2Json2Obj
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj``1(System.String)
        name: Yaml2Json2Obj
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj``1(System.String)
        name: Yaml2Json2Obj
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj``1(System.String)
        name: Yaml2Json2Obj
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj``1(System.String)
        name: Yaml2Json2Obj
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj``1(System.String)
        name: Yaml2Json2Obj
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IFileKit
    commentId: M:ZeroFramework.Utility.IFileKit.Yaml2Json2Obj``1(System.String)
  ZeroFramework.Utility.FileKit.Path2Yaml2Json2Obj*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.FileKit.Path2Yaml2Json2Obj*
        name: Path2Yaml2Json2Obj
      VB:
      - id: ZeroFramework.Utility.FileKit.Path2Yaml2Json2Obj*
        name: Path2Yaml2Json2Obj
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.Path2Yaml2Json2Obj*
        name: Path2Yaml2Json2Obj
      VB:
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.Path2Yaml2Json2Obj*
        name: Path2Yaml2Json2Obj
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.Path2Yaml2Json2Obj*
        name: Path2Yaml2Json2Obj
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit*
        name: FileKit
      - name: .
      - id: ZeroFramework.Utility.FileKit.Path2Yaml2Json2Obj*
        name: Path2Yaml2Json2Obj
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.FileKit.Path2Yaml2Json2Obj
  ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj``1(System.String):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj``1(System.String)
        name: Path2Yaml2Json2Obj
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj``1(System.String)
        name: Path2Yaml2Json2Obj
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj``1(System.String)
        name: Path2Yaml2Json2Obj
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj``1(System.String)
        name: Path2Yaml2Json2Obj
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj``1(System.String)
        name: Path2Yaml2Json2Obj
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj``1(System.String)
        name: Path2Yaml2Json2Obj
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IFileKit
    commentId: M:ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj``1(System.String)
  ZeroFramework.Utility.FileKit:
    name:
      CSharp:
      - id: ZeroFramework.Utility.FileKit
        name: FileKit
      VB:
      - id: ZeroFramework.Utility.FileKit
        name: FileKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.FileKit
        name: FileKit
      VB:
      - id: ZeroFramework.Utility.FileKit
        name: FileKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit
        name: FileKit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.FileKit
        name: FileKit
    isDefinition: true
    commentId: T:ZeroFramework.Utility.FileKit
  ZeroFramework.Utility.BytesTool.Read*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.BytesTool.Read*
        name: Read
      VB:
      - id: ZeroFramework.Utility.BytesTool.Read*
        name: Read
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.Read*
        name: Read
      VB:
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.Read*
        name: Read
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.Read*
        name: Read
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.Read*
        name: Read
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.BytesTool.Read
  ZeroFramework.Utility.BytesTool.Write*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.BytesTool.Write*
        name: Write
      VB:
      - id: ZeroFramework.Utility.BytesTool.Write*
        name: Write
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.Write*
        name: Write
      VB:
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.Write*
        name: Write
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.Write*
        name: Write
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.Write*
        name: Write
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.BytesTool.Write
  Global.Action{System.Byte[]}:
    name:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: System.Byte
        name: byte
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Byte
        name: Byte
        isExternal: true
      - name: (
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: System.Byte
        name: byte
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Byte
        name: Byte
        isExternal: true
      - name: (
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: System.Byte
        name: byte
        isExternal: true
      - name: '['
      - name: ']'
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Byte
        name: Byte
        isExternal: true
      - name: (
      - name: )
      - name: )
    isDefinition: false
    definition: Global.Action`1
    commentId: '!:Global.Action{System.Byte[]}'
  ZeroFramework.Utility.BytesTool.ReadAsync*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.BytesTool.ReadAsync*
        name: ReadAsync
      VB:
      - id: ZeroFramework.Utility.BytesTool.ReadAsync*
        name: ReadAsync
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.ReadAsync*
        name: ReadAsync
      VB:
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.ReadAsync*
        name: ReadAsync
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.ReadAsync*
        name: ReadAsync
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.ReadAsync*
        name: ReadAsync
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.BytesTool.ReadAsync
  ZeroFramework.Utility.BytesTool.WriteAsync*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.BytesTool.WriteAsync*
        name: WriteAsync
      VB:
      - id: ZeroFramework.Utility.BytesTool.WriteAsync*
        name: WriteAsync
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.WriteAsync*
        name: WriteAsync
      VB:
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.WriteAsync*
        name: WriteAsync
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.WriteAsync*
        name: WriteAsync
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.BytesTool*
        name: BytesTool
      - name: .
      - id: ZeroFramework.Utility.BytesTool.WriteAsync*
        name: WriteAsync
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.BytesTool.WriteAsync
  ZeroFramework.Utility.IExcelHandler.MaxRow*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.MaxRow*
        name: MaxRow
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.MaxRow*
        name: MaxRow
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxRow*
        name: MaxRow
      VB:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxRow*
        name: MaxRow
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxRow*
        name: MaxRow
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxRow*
        name: MaxRow
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IExcelHandler.MaxRow
  ZeroFramework.Utility.IExcelHandler.MaxColumn*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.MaxColumn*
        name: MaxColumn
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.MaxColumn*
        name: MaxColumn
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxColumn*
        name: MaxColumn
      VB:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxColumn*
        name: MaxColumn
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxColumn*
        name: MaxColumn
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxColumn*
        name: MaxColumn
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IExcelHandler.MaxColumn
  ZeroFramework.Utility.IExcelHandler.ReadValue*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue*
        name: ReadValue
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue*
        name: ReadValue
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue*
        name: ReadValue
      VB:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue*
        name: ReadValue
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue*
        name: ReadValue
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue*
        name: ReadValue
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IExcelHandler.ReadValue
  ZeroFramework.Utility.IExcelHandler:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      VB:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      VB:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.IExcelHandler
  ZeroFramework.Utility.IExcelHandler.WriteValue*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.WriteValue*
        name: WriteValue
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.WriteValue*
        name: WriteValue
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WriteValue*
        name: WriteValue
      VB:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WriteValue*
        name: WriteValue
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WriteValue*
        name: WriteValue
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WriteValue*
        name: WriteValue
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IExcelHandler.WriteValue
  ZeroFramework.Utility.IExcelHandler.SheetIdx*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.SheetIdx*
        name: SheetIdx
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.SheetIdx*
        name: SheetIdx
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.SheetIdx*
        name: SheetIdx
      VB:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.SheetIdx*
        name: SheetIdx
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.SheetIdx*
        name: SheetIdx
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.SheetIdx*
        name: SheetIdx
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IExcelHandler.SheetIdx
  ZeroFramework.Utility.IExcelHandler.WithWorksheet*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet*
        name: WithWorksheet
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet*
        name: WithWorksheet
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet*
        name: WithWorksheet
      VB:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet*
        name: WithWorksheet
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet*
        name: WithWorksheet
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet*
        name: WithWorksheet
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IExcelHandler.WithWorksheet
  ZeroFramework.Utility.IExcelHandler.AddSheet*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.AddSheet*
        name: AddSheet
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.AddSheet*
        name: AddSheet
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.AddSheet*
        name: AddSheet
      VB:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.AddSheet*
        name: AddSheet
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.AddSheet*
        name: AddSheet
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.AddSheet*
        name: AddSheet
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IExcelHandler.AddSheet
  ZeroFramework.Utility.IExcelHandler.RemoveSheet*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet*
        name: RemoveSheet
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet*
        name: RemoveSheet
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet*
        name: RemoveSheet
      VB:
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet*
        name: RemoveSheet
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet*
        name: RemoveSheet
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler*
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet*
        name: RemoveSheet
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IExcelHandler.RemoveSheet
  ZeroFramework.Utility.ExcelHandler.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler.#ctor*
        name: ExcelHandler
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.#ctor*
        name: ExcelHandler
      VB:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.#ctor*
        name: ExcelHandler
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelHandler.#ctor
  ZeroFramework.Utility.ExcelHandler.MaxRow*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler.MaxRow*
        name: MaxRow
      VB:
      - id: ZeroFramework.Utility.ExcelHandler.MaxRow*
        name: MaxRow
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.MaxRow*
        name: MaxRow
      VB:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.MaxRow*
        name: MaxRow
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.MaxRow*
        name: MaxRow
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.MaxRow*
        name: MaxRow
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelHandler.MaxRow
  ZeroFramework.Utility.IExcelHandler.MaxRow:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.MaxRow
        name: MaxRow
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.MaxRow
        name: MaxRow
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxRow
        name: MaxRow
      VB:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxRow
        name: MaxRow
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxRow
        name: MaxRow
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxRow
        name: MaxRow
    isDefinition: true
    parent: ZeroFramework.Utility.IExcelHandler
    commentId: P:ZeroFramework.Utility.IExcelHandler.MaxRow
  ZeroFramework.Utility.ExcelHandler.MaxColumn*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler.MaxColumn*
        name: MaxColumn
      VB:
      - id: ZeroFramework.Utility.ExcelHandler.MaxColumn*
        name: MaxColumn
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.MaxColumn*
        name: MaxColumn
      VB:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.MaxColumn*
        name: MaxColumn
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.MaxColumn*
        name: MaxColumn
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.MaxColumn*
        name: MaxColumn
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelHandler.MaxColumn
  ZeroFramework.Utility.IExcelHandler.MaxColumn:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.MaxColumn
        name: MaxColumn
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.MaxColumn
        name: MaxColumn
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxColumn
        name: MaxColumn
      VB:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxColumn
        name: MaxColumn
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxColumn
        name: MaxColumn
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.MaxColumn
        name: MaxColumn
    isDefinition: true
    parent: ZeroFramework.Utility.IExcelHandler
    commentId: P:ZeroFramework.Utility.IExcelHandler.MaxColumn
  ZeroFramework.Utility.ExcelHandler.SheetIdx*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler.SheetIdx*
        name: SheetIdx
      VB:
      - id: ZeroFramework.Utility.ExcelHandler.SheetIdx*
        name: SheetIdx
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.SheetIdx*
        name: SheetIdx
      VB:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.SheetIdx*
        name: SheetIdx
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.SheetIdx*
        name: SheetIdx
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.SheetIdx*
        name: SheetIdx
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelHandler.SheetIdx
  ZeroFramework.Utility.IExcelHandler.SheetIdx:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.SheetIdx
        name: SheetIdx
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.SheetIdx
        name: SheetIdx
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.SheetIdx
        name: SheetIdx
      VB:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.SheetIdx
        name: SheetIdx
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.SheetIdx
        name: SheetIdx
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.SheetIdx
        name: SheetIdx
    isDefinition: true
    parent: ZeroFramework.Utility.IExcelHandler
    commentId: P:ZeroFramework.Utility.IExcelHandler.SheetIdx
  ZeroFramework.Utility.ExcelHandler.ReadValue*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler.ReadValue*
        name: ReadValue
      VB:
      - id: ZeroFramework.Utility.ExcelHandler.ReadValue*
        name: ReadValue
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.ReadValue*
        name: ReadValue
      VB:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.ReadValue*
        name: ReadValue
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.ReadValue*
        name: ReadValue
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.ReadValue*
        name: ReadValue
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelHandler.ReadValue
  ZeroFramework.Utility.IExcelHandler.ReadValue(System.Int32,System.Int32):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue(System.Int32,System.Int32)
        name: ReadValue
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue(System.Int32,System.Int32)
        name: ReadValue
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue(System.Int32,System.Int32)
        name: ReadValue
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue(System.Int32,System.Int32)
        name: ReadValue
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue(System.Int32,System.Int32)
        name: ReadValue
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue(System.Int32,System.Int32)
        name: ReadValue
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IExcelHandler
    commentId: M:ZeroFramework.Utility.IExcelHandler.ReadValue(System.Int32,System.Int32)
  ZeroFramework.Utility.IExcelHandler.ReadValue``1(System.Int32,System.Int32):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue``1(System.Int32,System.Int32)
        name: ReadValue
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue``1(System.Int32,System.Int32)
        name: ReadValue
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue``1(System.Int32,System.Int32)
        name: ReadValue
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue``1(System.Int32,System.Int32)
        name: ReadValue
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue``1(System.Int32,System.Int32)
        name: ReadValue
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.ReadValue``1(System.Int32,System.Int32)
        name: ReadValue
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IExcelHandler
    commentId: M:ZeroFramework.Utility.IExcelHandler.ReadValue``1(System.Int32,System.Int32)
  ZeroFramework.Utility.ExcelHandler.WriteValue*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler.WriteValue*
        name: WriteValue
      VB:
      - id: ZeroFramework.Utility.ExcelHandler.WriteValue*
        name: WriteValue
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.WriteValue*
        name: WriteValue
      VB:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.WriteValue*
        name: WriteValue
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.WriteValue*
        name: WriteValue
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.WriteValue*
        name: WriteValue
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelHandler.WriteValue
  ZeroFramework.Utility.IExcelHandler.WriteValue(System.Int32,System.Int32,System.Object):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.WriteValue(System.Int32,System.Int32,System.Object)
        name: WriteValue
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.WriteValue(System.Int32,System.Int32,System.Object)
        name: WriteValue
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WriteValue(System.Int32,System.Int32,System.Object)
        name: WriteValue
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WriteValue(System.Int32,System.Int32,System.Object)
        name: WriteValue
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WriteValue(System.Int32,System.Int32,System.Object)
        name: WriteValue
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WriteValue(System.Int32,System.Int32,System.Object)
        name: WriteValue
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IExcelHandler
    commentId: M:ZeroFramework.Utility.IExcelHandler.WriteValue(System.Int32,System.Int32,System.Object)
  ZeroFramework.Utility.ExcelHandler.WithWorksheet*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler.WithWorksheet*
        name: WithWorksheet
      VB:
      - id: ZeroFramework.Utility.ExcelHandler.WithWorksheet*
        name: WithWorksheet
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.WithWorksheet*
        name: WithWorksheet
      VB:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.WithWorksheet*
        name: WithWorksheet
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.WithWorksheet*
        name: WithWorksheet
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.WithWorksheet*
        name: WithWorksheet
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelHandler.WithWorksheet
  ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.Int32):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.Int32)
        name: WithWorksheet
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.Int32)
        name: WithWorksheet
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.Int32)
        name: WithWorksheet
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.Int32)
        name: WithWorksheet
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.Int32)
        name: WithWorksheet
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.Int32)
        name: WithWorksheet
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IExcelHandler
    commentId: M:ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.Int32)
  ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.String):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.String)
        name: WithWorksheet
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.String)
        name: WithWorksheet
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.String)
        name: WithWorksheet
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.String)
        name: WithWorksheet
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.String)
        name: WithWorksheet
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.String)
        name: WithWorksheet
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IExcelHandler
    commentId: M:ZeroFramework.Utility.IExcelHandler.WithWorksheet(System.String)
  ZeroFramework.Utility.ExcelHandler.AddSheet*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler.AddSheet*
        name: AddSheet
      VB:
      - id: ZeroFramework.Utility.ExcelHandler.AddSheet*
        name: AddSheet
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.AddSheet*
        name: AddSheet
      VB:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.AddSheet*
        name: AddSheet
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.AddSheet*
        name: AddSheet
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.AddSheet*
        name: AddSheet
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelHandler.AddSheet
  ZeroFramework.Utility.IExcelHandler.AddSheet(System.String,System.Boolean):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.AddSheet(System.String,System.Boolean)
        name: AddSheet
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.AddSheet(System.String,System.Boolean)
        name: AddSheet
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.AddSheet(System.String,System.Boolean)
        name: AddSheet
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.AddSheet(System.String,System.Boolean)
        name: AddSheet
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.AddSheet(System.String,System.Boolean)
        name: AddSheet
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.AddSheet(System.String,System.Boolean)
        name: AddSheet
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IExcelHandler
    commentId: M:ZeroFramework.Utility.IExcelHandler.AddSheet(System.String,System.Boolean)
  ZeroFramework.Utility.ExcelHandler.RemoveSheet*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler.RemoveSheet*
        name: RemoveSheet
      VB:
      - id: ZeroFramework.Utility.ExcelHandler.RemoveSheet*
        name: RemoveSheet
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.RemoveSheet*
        name: RemoveSheet
      VB:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.RemoveSheet*
        name: RemoveSheet
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.RemoveSheet*
        name: RemoveSheet
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler.RemoveSheet*
        name: RemoveSheet
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelHandler.RemoveSheet
  ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.Int32):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.Int32)
        name: RemoveSheet
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.Int32)
        name: RemoveSheet
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.Int32)
        name: RemoveSheet
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.Int32)
        name: RemoveSheet
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.Int32)
        name: RemoveSheet
      - name: (
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.Int32)
        name: RemoveSheet
      - name: (
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IExcelHandler
    commentId: M:ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.Int32)
  ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.String):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.String)
        name: RemoveSheet
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.String)
        name: RemoveSheet
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.String)
        name: RemoveSheet
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.String)
        name: RemoveSheet
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.String)
        name: RemoveSheet
      - name: (
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler
        name: IExcelHandler
      - name: .
      - id: ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.String)
        name: RemoveSheet
      - name: (
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IExcelHandler
    commentId: M:ZeroFramework.Utility.IExcelHandler.RemoveSheet(System.String)
  ZeroFramework.Utility.ExcelHandler.Finalize*:
    name:
      CSharp:
      - name: "~"
      - id: ZeroFramework.Utility.ExcelHandler.Finalize*
        name: ExcelHandler
      VB: []
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - name: "~"
      - id: ZeroFramework.Utility.ExcelHandler.Finalize*
        name: ExcelHandler
      VB: []
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler*
        name: ExcelHandler
      - name: .
      - name: "~"
      - id: ZeroFramework.Utility.ExcelHandler.Finalize*
        name: ExcelHandler
      VB: []
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelHandler.Finalize
  ZeroFramework.Utility.ExcelHandler:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler
        name: ExcelHandler
      VB:
      - id: ZeroFramework.Utility.ExcelHandler
        name: ExcelHandler
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelHandler
        name: ExcelHandler
      VB:
      - id: ZeroFramework.Utility.ExcelHandler
        name: ExcelHandler
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler
        name: ExcelHandler
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelHandler
        name: ExcelHandler
    isDefinition: true
    commentId: T:ZeroFramework.Utility.ExcelHandler
  ZeroFramework.Utility.ExcelBuilder:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelBuilder
        name: ExcelBuilder
      VB:
      - id: ZeroFramework.Utility.ExcelBuilder
        name: ExcelBuilder
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelBuilder
        name: ExcelBuilder
      VB:
      - id: ZeroFramework.Utility.ExcelBuilder
        name: ExcelBuilder
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder
        name: ExcelBuilder
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder
        name: ExcelBuilder
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.ExcelBuilder
  ZeroFramework.Utility.ExcelBuilder.Build*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelBuilder.Build*
        name: Build
      VB:
      - id: ZeroFramework.Utility.ExcelBuilder.Build*
        name: Build
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.Build*
        name: Build
      VB:
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.Build*
        name: Build
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.Build*
        name: Build
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.Build*
        name: Build
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelBuilder.Build
  ZeroFramework.Utility.ExcelBuilder.WithWorksheet*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelBuilder.WithWorksheet*
        name: WithWorksheet
      VB:
      - id: ZeroFramework.Utility.ExcelBuilder.WithWorksheet*
        name: WithWorksheet
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.WithWorksheet*
        name: WithWorksheet
      VB:
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.WithWorksheet*
        name: WithWorksheet
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.WithWorksheet*
        name: WithWorksheet
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.WithWorksheet*
        name: WithWorksheet
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelBuilder.WithWorksheet
  ZeroFramework.Utility.ExcelBuilder.AddSheet*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelBuilder.AddSheet*
        name: AddSheet
      VB:
      - id: ZeroFramework.Utility.ExcelBuilder.AddSheet*
        name: AddSheet
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.AddSheet*
        name: AddSheet
      VB:
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.AddSheet*
        name: AddSheet
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.AddSheet*
        name: AddSheet
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.AddSheet*
        name: AddSheet
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelBuilder.AddSheet
  ZeroFramework.Utility.ExcelBuilder.RemoveSheet*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelBuilder.RemoveSheet*
        name: RemoveSheet
      VB:
      - id: ZeroFramework.Utility.ExcelBuilder.RemoveSheet*
        name: RemoveSheet
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.RemoveSheet*
        name: RemoveSheet
      VB:
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.RemoveSheet*
        name: RemoveSheet
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.RemoveSheet*
        name: RemoveSheet
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.RemoveSheet*
        name: RemoveSheet
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelBuilder.RemoveSheet
  ZeroFramework.Utility.ExcelBuilder.GetHandler*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelBuilder.GetHandler*
        name: GetHandler
      VB:
      - id: ZeroFramework.Utility.ExcelBuilder.GetHandler*
        name: GetHandler
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.GetHandler*
        name: GetHandler
      VB:
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.GetHandler*
        name: GetHandler
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.GetHandler*
        name: GetHandler
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder*
        name: ExcelBuilder
      - name: .
      - id: ZeroFramework.Utility.ExcelBuilder.GetHandler*
        name: GetHandler
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelBuilder.GetHandler
  ZeroFramework.Utility.ExcelTool.GetExcelBuilder*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ExcelTool.GetExcelBuilder*
        name: GetExcelBuilder
      VB:
      - id: ZeroFramework.Utility.ExcelTool.GetExcelBuilder*
        name: GetExcelBuilder
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ExcelTool*
        name: ExcelTool
      - name: .
      - id: ZeroFramework.Utility.ExcelTool.GetExcelBuilder*
        name: GetExcelBuilder
      VB:
      - id: ZeroFramework.Utility.ExcelTool*
        name: ExcelTool
      - name: .
      - id: ZeroFramework.Utility.ExcelTool.GetExcelBuilder*
        name: GetExcelBuilder
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelTool*
        name: ExcelTool
      - name: .
      - id: ZeroFramework.Utility.ExcelTool.GetExcelBuilder*
        name: GetExcelBuilder
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ExcelTool*
        name: ExcelTool
      - name: .
      - id: ZeroFramework.Utility.ExcelTool.GetExcelBuilder*
        name: GetExcelBuilder
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ExcelTool.GetExcelBuilder
  System.Collections:
    name:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
    nameWithType:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
    isDefinition: true
    commentId: N:System.Collections
  System.Collections.IEnumerator:
    name:
      CSharp:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
      VB:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
      VB:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.IEnumerator
        name: IEnumerator
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerator
  Global.UnityAction`1:
    name:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    isDefinition: true
  Global.UnityAction{Texture2D}:
    name:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Texture2D
        name: Texture2D
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.UnityAction`1
    commentId: '!:Global.UnityAction{Texture2D}'
  ZeroFramework.Utility.ImageTool.ReadFromUri*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ImageTool.ReadFromUri*
        name: ReadFromUri
      VB:
      - id: ZeroFramework.Utility.ImageTool.ReadFromUri*
        name: ReadFromUri
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ImageTool*
        name: ImageTool
      - name: .
      - id: ZeroFramework.Utility.ImageTool.ReadFromUri*
        name: ReadFromUri
      VB:
      - id: ZeroFramework.Utility.ImageTool*
        name: ImageTool
      - name: .
      - id: ZeroFramework.Utility.ImageTool.ReadFromUri*
        name: ReadFromUri
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ImageTool*
        name: ImageTool
      - name: .
      - id: ZeroFramework.Utility.ImageTool.ReadFromUri*
        name: ReadFromUri
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ImageTool*
        name: ImageTool
      - name: .
      - id: ZeroFramework.Utility.ImageTool.ReadFromUri*
        name: ReadFromUri
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ImageTool.ReadFromUri
  Global.UnityAction{Sprite}:
    name:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.Sprite
        name: Sprite
        isExternal: true
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Sprite
        name: Sprite
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.Sprite
        name: Sprite
        isExternal: true
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Sprite
        name: Sprite
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: Global.Sprite
        name: Sprite
        isExternal: true
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Sprite
        name: Sprite
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.UnityAction`1
    commentId: '!:Global.UnityAction{Sprite}'
  ZeroFramework.Utility.JsonTool.SerializeObject*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.JsonTool.SerializeObject*
        name: SerializeObject
      VB:
      - id: ZeroFramework.Utility.JsonTool.SerializeObject*
        name: SerializeObject
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.JsonTool*
        name: JsonTool
      - name: .
      - id: ZeroFramework.Utility.JsonTool.SerializeObject*
        name: SerializeObject
      VB:
      - id: ZeroFramework.Utility.JsonTool*
        name: JsonTool
      - name: .
      - id: ZeroFramework.Utility.JsonTool.SerializeObject*
        name: SerializeObject
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.JsonTool*
        name: JsonTool
      - name: .
      - id: ZeroFramework.Utility.JsonTool.SerializeObject*
        name: SerializeObject
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.JsonTool*
        name: JsonTool
      - name: .
      - id: ZeroFramework.Utility.JsonTool.SerializeObject*
        name: SerializeObject
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.JsonTool.SerializeObject
  ZeroFramework.Utility.JsonTool.DeserializeObject*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.JsonTool.DeserializeObject*
        name: DeserializeObject
      VB:
      - id: ZeroFramework.Utility.JsonTool.DeserializeObject*
        name: DeserializeObject
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.JsonTool*
        name: JsonTool
      - name: .
      - id: ZeroFramework.Utility.JsonTool.DeserializeObject*
        name: DeserializeObject
      VB:
      - id: ZeroFramework.Utility.JsonTool*
        name: JsonTool
      - name: .
      - id: ZeroFramework.Utility.JsonTool.DeserializeObject*
        name: DeserializeObject
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.JsonTool*
        name: JsonTool
      - name: .
      - id: ZeroFramework.Utility.JsonTool.DeserializeObject*
        name: DeserializeObject
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.JsonTool*
        name: JsonTool
      - name: .
      - id: ZeroFramework.Utility.JsonTool.DeserializeObject*
        name: DeserializeObject
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.JsonTool.DeserializeObject
  ZeroFramework.Utility.TextTool.Read*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TextTool.Read*
        name: Read
      VB:
      - id: ZeroFramework.Utility.TextTool.Read*
        name: Read
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.Read*
        name: Read
      VB:
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.Read*
        name: Read
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.Read*
        name: Read
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.Read*
        name: Read
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TextTool.Read
  ZeroFramework.Utility.TextTool.Write*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TextTool.Write*
        name: Write
      VB:
      - id: ZeroFramework.Utility.TextTool.Write*
        name: Write
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.Write*
        name: Write
      VB:
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.Write*
        name: Write
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.Write*
        name: Write
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.Write*
        name: Write
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TextTool.Write
  Global.Action{System.String}:
    name:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.Action`1
    commentId: '!:Global.Action{System.String}'
  ZeroFramework.Utility.TextTool.ReadAsync*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TextTool.ReadAsync*
        name: ReadAsync
      VB:
      - id: ZeroFramework.Utility.TextTool.ReadAsync*
        name: ReadAsync
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.ReadAsync*
        name: ReadAsync
      VB:
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.ReadAsync*
        name: ReadAsync
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.ReadAsync*
        name: ReadAsync
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.ReadAsync*
        name: ReadAsync
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TextTool.ReadAsync
  ZeroFramework.Utility.TextTool.WriteAsync*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TextTool.WriteAsync*
        name: WriteAsync
      VB:
      - id: ZeroFramework.Utility.TextTool.WriteAsync*
        name: WriteAsync
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.WriteAsync*
        name: WriteAsync
      VB:
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.WriteAsync*
        name: WriteAsync
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.WriteAsync*
        name: WriteAsync
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.WriteAsync*
        name: WriteAsync
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TextTool.WriteAsync
  Global.UnityAction{System.String}:
    name:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: Global.UnityAction`1
        name: UnityAction
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.UnityAction`1
    commentId: '!:Global.UnityAction{System.String}'
  ZeroFramework.Utility.TextTool.ReadByEnumerator*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TextTool.ReadByEnumerator*
        name: ReadByEnumerator
      VB:
      - id: ZeroFramework.Utility.TextTool.ReadByEnumerator*
        name: ReadByEnumerator
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.ReadByEnumerator*
        name: ReadByEnumerator
      VB:
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.ReadByEnumerator*
        name: ReadByEnumerator
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.ReadByEnumerator*
        name: ReadByEnumerator
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TextTool*
        name: TextTool
      - name: .
      - id: ZeroFramework.Utility.TextTool.ReadByEnumerator*
        name: ReadByEnumerator
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TextTool.ReadByEnumerator
  ZeroFramework.Utility.YamlTool.YamlToJson*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.YamlTool.YamlToJson*
        name: YamlToJson
      VB:
      - id: ZeroFramework.Utility.YamlTool.YamlToJson*
        name: YamlToJson
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.YamlTool*
        name: YamlTool
      - name: .
      - id: ZeroFramework.Utility.YamlTool.YamlToJson*
        name: YamlToJson
      VB:
      - id: ZeroFramework.Utility.YamlTool*
        name: YamlTool
      - name: .
      - id: ZeroFramework.Utility.YamlTool.YamlToJson*
        name: YamlToJson
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.YamlTool*
        name: YamlTool
      - name: .
      - id: ZeroFramework.Utility.YamlTool.YamlToJson*
        name: YamlToJson
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.YamlTool*
        name: YamlTool
      - name: .
      - id: ZeroFramework.Utility.YamlTool.YamlToJson*
        name: YamlToJson
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.YamlTool.YamlToJson
  ZeroFramework.Utility.YamlTool.SerializeObject*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.YamlTool.SerializeObject*
        name: SerializeObject
      VB:
      - id: ZeroFramework.Utility.YamlTool.SerializeObject*
        name: SerializeObject
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.YamlTool*
        name: YamlTool
      - name: .
      - id: ZeroFramework.Utility.YamlTool.SerializeObject*
        name: SerializeObject
      VB:
      - id: ZeroFramework.Utility.YamlTool*
        name: YamlTool
      - name: .
      - id: ZeroFramework.Utility.YamlTool.SerializeObject*
        name: SerializeObject
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.YamlTool*
        name: YamlTool
      - name: .
      - id: ZeroFramework.Utility.YamlTool.SerializeObject*
        name: SerializeObject
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.YamlTool*
        name: YamlTool
      - name: .
      - id: ZeroFramework.Utility.YamlTool.SerializeObject*
        name: SerializeObject
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.YamlTool.SerializeObject
  ZeroFramework.Utility.YamlTool.DeserializeObject*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.YamlTool.DeserializeObject*
        name: DeserializeObject
      VB:
      - id: ZeroFramework.Utility.YamlTool.DeserializeObject*
        name: DeserializeObject
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.YamlTool*
        name: YamlTool
      - name: .
      - id: ZeroFramework.Utility.YamlTool.DeserializeObject*
        name: DeserializeObject
      VB:
      - id: ZeroFramework.Utility.YamlTool*
        name: YamlTool
      - name: .
      - id: ZeroFramework.Utility.YamlTool.DeserializeObject*
        name: DeserializeObject
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.YamlTool*
        name: YamlTool
      - name: .
      - id: ZeroFramework.Utility.YamlTool.DeserializeObject*
        name: DeserializeObject
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.YamlTool*
        name: YamlTool
      - name: .
      - id: ZeroFramework.Utility.YamlTool.DeserializeObject*
        name: DeserializeObject
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.YamlTool.DeserializeObject
  ZeroFramework.Utility.IFileKit.BytesTool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.BytesTool*
        name: BytesTool
      VB:
      - id: ZeroFramework.Utility.IFileKit.BytesTool*
        name: BytesTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesTool*
        name: BytesTool
      VB:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesTool*
        name: BytesTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesTool*
        name: BytesTool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesTool*
        name: BytesTool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IFileKit.BytesTool
  ZeroFramework.Utility.IFileKit.ImageTool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.ImageTool*
        name: ImageTool
      VB:
      - id: ZeroFramework.Utility.IFileKit.ImageTool*
        name: ImageTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ImageTool*
        name: ImageTool
      VB:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ImageTool*
        name: ImageTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ImageTool*
        name: ImageTool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ImageTool*
        name: ImageTool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IFileKit.ImageTool
  ZeroFramework.Utility.IFileKit.JsonTool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.JsonTool*
        name: JsonTool
      VB:
      - id: ZeroFramework.Utility.IFileKit.JsonTool*
        name: JsonTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.JsonTool*
        name: JsonTool
      VB:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.JsonTool*
        name: JsonTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.JsonTool*
        name: JsonTool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.JsonTool*
        name: JsonTool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IFileKit.JsonTool
  ZeroFramework.Utility.IFileKit.TextTool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.TextTool*
        name: TextTool
      VB:
      - id: ZeroFramework.Utility.IFileKit.TextTool*
        name: TextTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.TextTool*
        name: TextTool
      VB:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.TextTool*
        name: TextTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.TextTool*
        name: TextTool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.TextTool*
        name: TextTool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IFileKit.TextTool
  ZeroFramework.Utility.IFileKit.YamlTool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.YamlTool*
        name: YamlTool
      VB:
      - id: ZeroFramework.Utility.IFileKit.YamlTool*
        name: YamlTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.YamlTool*
        name: YamlTool
      VB:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.YamlTool*
        name: YamlTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.YamlTool*
        name: YamlTool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.YamlTool*
        name: YamlTool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IFileKit.YamlTool
  ZeroFramework.Utility.IFileKit.ExcelTool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.ExcelTool*
        name: ExcelTool
      VB:
      - id: ZeroFramework.Utility.IFileKit.ExcelTool*
        name: ExcelTool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ExcelTool*
        name: ExcelTool
      VB:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ExcelTool*
        name: ExcelTool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ExcelTool*
        name: ExcelTool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.ExcelTool*
        name: ExcelTool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IFileKit.ExcelTool
  ZeroFramework.Utility.IFileKit.BytesToString*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.BytesToString*
        name: BytesToString
      VB:
      - id: ZeroFramework.Utility.IFileKit.BytesToString*
        name: BytesToString
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesToString*
        name: BytesToString
      VB:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesToString*
        name: BytesToString
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesToString*
        name: BytesToString
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.BytesToString*
        name: BytesToString
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IFileKit.BytesToString
  ZeroFramework.Utility.IFileKit.StringToBytes*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.StringToBytes*
        name: StringToBytes
      VB:
      - id: ZeroFramework.Utility.IFileKit.StringToBytes*
        name: StringToBytes
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.StringToBytes*
        name: StringToBytes
      VB:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.StringToBytes*
        name: StringToBytes
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.StringToBytes*
        name: StringToBytes
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.StringToBytes*
        name: StringToBytes
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IFileKit.StringToBytes
  ZeroFramework.Utility.IFileKit.Yaml2Json2Obj*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj*
        name: Yaml2Json2Obj
      VB:
      - id: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj*
        name: Yaml2Json2Obj
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj*
        name: Yaml2Json2Obj
      VB:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj*
        name: Yaml2Json2Obj
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj*
        name: Yaml2Json2Obj
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Yaml2Json2Obj*
        name: Yaml2Json2Obj
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IFileKit.Yaml2Json2Obj
  ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj*
        name: Path2Yaml2Json2Obj
      VB:
      - id: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj*
        name: Path2Yaml2Json2Obj
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj*
        name: Path2Yaml2Json2Obj
      VB:
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj*
        name: Path2Yaml2Json2Obj
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj*
        name: Path2Yaml2Json2Obj
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IFileKit*
        name: IFileKit
      - name: .
      - id: ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj*
        name: Path2Yaml2Json2Obj
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IFileKit.Path2Yaml2Json2Obj
  ZeroFramework.Utility.ZeroLogFactory.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ZeroLogFactory.#ctor*
        name: ZeroLogFactory
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ZeroLogFactory*
        name: ZeroLogFactory
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory.#ctor*
        name: ZeroLogFactory
      VB:
      - id: ZeroFramework.Utility.ZeroLogFactory*
        name: ZeroLogFactory
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory*
        name: ZeroLogFactory
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory.#ctor*
        name: ZeroLogFactory
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory*
        name: ZeroLogFactory
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ZeroLogFactory.#ctor
  ZeroFramework.Utility.ZeroLogFactory.Init*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ZeroLogFactory.Init*
        name: Init
      VB:
      - id: ZeroFramework.Utility.ZeroLogFactory.Init*
        name: Init
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ZeroLogFactory*
        name: ZeroLogFactory
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory.Init*
        name: Init
      VB:
      - id: ZeroFramework.Utility.ZeroLogFactory*
        name: ZeroLogFactory
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory.Init*
        name: Init
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory*
        name: ZeroLogFactory
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory.Init*
        name: Init
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory*
        name: ZeroLogFactory
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory.Init*
        name: Init
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ZeroLogFactory.Init
  Global.Type:
    name:
      CSharp:
      - id: Global.Type
        name: Type
        isExternal: true
      VB:
      - id: Global.Type
        name: Type
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Type
        name: Type
        isExternal: true
      VB:
      - id: Global.Type
        name: Type
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Type
        name: Type
        isExternal: true
      VB:
      - id: Global.Type
        name: Type
        isExternal: true
    isDefinition: true
  ZeroFramework.Utility.ZeroLogFactory.Create*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ZeroLogFactory.Create*
        name: Create
      VB:
      - id: ZeroFramework.Utility.ZeroLogFactory.Create*
        name: Create
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ZeroLogFactory*
        name: ZeroLogFactory
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory.Create*
        name: Create
      VB:
      - id: ZeroFramework.Utility.ZeroLogFactory*
        name: ZeroLogFactory
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory.Create*
        name: Create
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory*
        name: ZeroLogFactory
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory.Create*
        name: Create
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory*
        name: ZeroLogFactory
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory.Create*
        name: Create
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ZeroLogFactory.Create
  ZeroFramework.Utility.ZeroLogFactory:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ZeroLogFactory
        name: ZeroLogFactory
      VB:
      - id: ZeroFramework.Utility.ZeroLogFactory
        name: ZeroLogFactory
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ZeroLogFactory
        name: ZeroLogFactory
      VB:
      - id: ZeroFramework.Utility.ZeroLogFactory
        name: ZeroLogFactory
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory
        name: ZeroLogFactory
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ZeroLogFactory
        name: ZeroLogFactory
    isDefinition: true
    commentId: T:ZeroFramework.Utility.ZeroLogFactory
  ZeroFramework.Utility.Node.asset:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.asset
        name: asset
      VB:
      - id: ZeroFramework.Utility.Node.asset
        name: asset
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.asset
        name: asset
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.asset
        name: asset
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.asset
        name: asset
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.asset
        name: asset
    isDefinition: true
    parent: ZeroFramework.Utility.Node
    commentId: F:ZeroFramework.Utility.Node.asset
  ZeroFramework.Utility.Node.type:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.type
        name: type
      VB:
      - id: ZeroFramework.Utility.Node.type
        name: type
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.type
        name: type
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.type
        name: type
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.type
        name: type
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.type
        name: type
    isDefinition: true
    parent: ZeroFramework.Utility.Node
    commentId: F:ZeroFramework.Utility.Node.type
  ZeroFramework.Utility.Node.started:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.started
        name: started
      VB:
      - id: ZeroFramework.Utility.Node.started
        name: started
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.started
        name: started
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.started
        name: started
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.started
        name: started
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.started
        name: started
    isDefinition: true
    parent: ZeroFramework.Utility.Node
    commentId: F:ZeroFramework.Utility.Node.started
  ZeroFramework.Utility.Node.currentState:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.currentState
        name: currentState
      VB:
      - id: ZeroFramework.Utility.Node.currentState
        name: currentState
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.currentState
        name: currentState
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.currentState
        name: currentState
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.currentState
        name: currentState
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.currentState
        name: currentState
    isDefinition: true
    parent: ZeroFramework.Utility.Node
    commentId: F:ZeroFramework.Utility.Node.currentState
  ZeroFramework.Utility.Node.guid:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.guid
        name: guid
      VB:
      - id: ZeroFramework.Utility.Node.guid
        name: guid
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.guid
        name: guid
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.guid
        name: guid
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.guid
        name: guid
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.guid
        name: guid
    isDefinition: true
    parent: ZeroFramework.Utility.Node
    commentId: F:ZeroFramework.Utility.Node.guid
  ZeroFramework.Utility.Node.position:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.position
        name: position
      VB:
      - id: ZeroFramework.Utility.Node.position
        name: position
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.position
        name: position
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.position
        name: position
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.position
        name: position
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.position
        name: position
    isDefinition: true
    parent: ZeroFramework.Utility.Node
    commentId: F:ZeroFramework.Utility.Node.position
  ZeroFramework.Utility.Node.OnChildrenChangeInInspector:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.OnChildrenChangeInInspector
        name: OnChildrenChangeInInspector
      VB:
      - id: ZeroFramework.Utility.Node.OnChildrenChangeInInspector
        name: OnChildrenChangeInInspector
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnChildrenChangeInInspector
        name: OnChildrenChangeInInspector
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnChildrenChangeInInspector
        name: OnChildrenChangeInInspector
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnChildrenChangeInInspector
        name: OnChildrenChangeInInspector
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnChildrenChangeInInspector
        name: OnChildrenChangeInInspector
    isDefinition: true
    parent: ZeroFramework.Utility.Node
    commentId: F:ZeroFramework.Utility.Node.OnChildrenChangeInInspector
  ZeroFramework.Utility.Node.description:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.description
        name: description
      VB:
      - id: ZeroFramework.Utility.Node.description
        name: description
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.description
        name: description
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.description
        name: description
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.description
        name: description
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.description
        name: description
    isDefinition: true
    parent: ZeroFramework.Utility.Node
    commentId: F:ZeroFramework.Utility.Node.description
  ZeroFramework.Utility.Node.Update:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.Update
        name: Update
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.Node.Update
        name: Update
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Update
        name: Update
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Update
        name: Update
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Update
        name: Update
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Update
        name: Update
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.Node
    commentId: M:ZeroFramework.Utility.Node.Update
  ZeroFramework.Utility.Node.OnStart:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.OnStart
        name: OnStart
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.Node.OnStart
        name: OnStart
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStart
        name: OnStart
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStart
        name: OnStart
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStart
        name: OnStart
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStart
        name: OnStart
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.Node
    commentId: M:ZeroFramework.Utility.Node.OnStart
  ZeroFramework.Utility.Node.OnUpdate:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.OnUpdate
        name: OnUpdate
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.Node.OnUpdate
        name: OnUpdate
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnUpdate
        name: OnUpdate
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnUpdate
        name: OnUpdate
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnUpdate
        name: OnUpdate
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnUpdate
        name: OnUpdate
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.Node
    commentId: M:ZeroFramework.Utility.Node.OnUpdate
  ZeroFramework.Utility.Node.OnStop:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.OnStop
        name: OnStop
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.Node.OnStop
        name: OnStop
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStop
        name: OnStop
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStop
        name: OnStop
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStop
        name: OnStop
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStop
        name: OnStop
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.Node
    commentId: M:ZeroFramework.Utility.Node.OnStop
  System.Collections.Generic.List{ZeroFramework.Utility.Node}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{ZeroFramework.Utility.Node}
  ZeroFramework.Utility.Many2ManyNode.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Many2ManyNode.#ctor*
        name: Many2ManyNode
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Many2ManyNode*
        name: Many2ManyNode
      - name: .
      - id: ZeroFramework.Utility.Many2ManyNode.#ctor*
        name: Many2ManyNode
      VB:
      - id: ZeroFramework.Utility.Many2ManyNode*
        name: Many2ManyNode
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Many2ManyNode*
        name: Many2ManyNode
      - name: .
      - id: ZeroFramework.Utility.Many2ManyNode.#ctor*
        name: Many2ManyNode
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Many2ManyNode*
        name: Many2ManyNode
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Many2ManyNode.#ctor
  ZeroFramework.Utility.Many2ManyNode:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Many2ManyNode
        name: Many2ManyNode
      VB:
      - id: ZeroFramework.Utility.Many2ManyNode
        name: Many2ManyNode
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Many2ManyNode
        name: Many2ManyNode
      VB:
      - id: ZeroFramework.Utility.Many2ManyNode
        name: Many2ManyNode
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Many2ManyNode
        name: Many2ManyNode
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Many2ManyNode
        name: Many2ManyNode
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.Many2ManyNode
  ZeroFramework.Utility.Single2SingleNode:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Single2SingleNode
        name: Single2SingleNode
      VB:
      - id: ZeroFramework.Utility.Single2SingleNode
        name: Single2SingleNode
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Single2SingleNode
        name: Single2SingleNode
      VB:
      - id: ZeroFramework.Utility.Single2SingleNode
        name: Single2SingleNode
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Single2SingleNode
        name: Single2SingleNode
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Single2SingleNode
        name: Single2SingleNode
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.Single2SingleNode
  ZeroFramework.Utility.Single2SingleNode.child:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Single2SingleNode.child
        name: child
      VB:
      - id: ZeroFramework.Utility.Single2SingleNode.child
        name: child
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Single2SingleNode
        name: Single2SingleNode
      - name: .
      - id: ZeroFramework.Utility.Single2SingleNode.child
        name: child
      VB:
      - id: ZeroFramework.Utility.Single2SingleNode
        name: Single2SingleNode
      - name: .
      - id: ZeroFramework.Utility.Single2SingleNode.child
        name: child
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Single2SingleNode
        name: Single2SingleNode
      - name: .
      - id: ZeroFramework.Utility.Single2SingleNode.child
        name: child
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Single2SingleNode
        name: Single2SingleNode
      - name: .
      - id: ZeroFramework.Utility.Single2SingleNode.child
        name: child
    isDefinition: true
    parent: ZeroFramework.Utility.Single2SingleNode
    commentId: F:ZeroFramework.Utility.Single2SingleNode.child
  ZeroFramework.Utility.Many2SingleNode.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Many2SingleNode.#ctor*
        name: Many2SingleNode
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Many2SingleNode*
        name: Many2SingleNode
      - name: .
      - id: ZeroFramework.Utility.Many2SingleNode.#ctor*
        name: Many2SingleNode
      VB:
      - id: ZeroFramework.Utility.Many2SingleNode*
        name: Many2SingleNode
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Many2SingleNode*
        name: Many2SingleNode
      - name: .
      - id: ZeroFramework.Utility.Many2SingleNode.#ctor*
        name: Many2SingleNode
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Many2SingleNode*
        name: Many2SingleNode
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Many2SingleNode.#ctor
  ZeroFramework.Utility.Many2SingleNode:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Many2SingleNode
        name: Many2SingleNode
      VB:
      - id: ZeroFramework.Utility.Many2SingleNode
        name: Many2SingleNode
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Many2SingleNode
        name: Many2SingleNode
      VB:
      - id: ZeroFramework.Utility.Many2SingleNode
        name: Many2SingleNode
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Many2SingleNode
        name: Many2SingleNode
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Many2SingleNode
        name: Many2SingleNode
    isDefinition: true
    commentId: T:ZeroFramework.Utility.Many2SingleNode
  ZeroFramework.Utility.Node.Type:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Type
        name: Type
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Type
        name: Type
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Type
        name: Type
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Type
        name: Type
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Type
        name: Type
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Type
        name: Type
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.Node.Type
  ZeroFramework.Utility.Node.State:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.State
        name: State
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.State
        name: State
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.State
        name: State
      VB:
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.State
        name: State
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.State
        name: State
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.State
        name: State
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.Node.State
  Global.Vector2:
    name:
      CSharp:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      VB:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      VB:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      VB:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Vector2'
  ZeroFramework.Utility.Node.Update*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.Update*
        name: Update
      VB:
      - id: ZeroFramework.Utility.Node.Update*
        name: Update
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Update*
        name: Update
      VB:
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Update*
        name: Update
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Update*
        name: Update
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.Update*
        name: Update
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Node.Update
  ZeroFramework.Utility.Node.OnStart*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.OnStart*
        name: OnStart
      VB:
      - id: ZeroFramework.Utility.Node.OnStart*
        name: OnStart
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStart*
        name: OnStart
      VB:
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStart*
        name: OnStart
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStart*
        name: OnStart
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStart*
        name: OnStart
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Node.OnStart
  ZeroFramework.Utility.Node.OnUpdate*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.OnUpdate*
        name: OnUpdate
      VB:
      - id: ZeroFramework.Utility.Node.OnUpdate*
        name: OnUpdate
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnUpdate*
        name: OnUpdate
      VB:
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnUpdate*
        name: OnUpdate
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnUpdate*
        name: OnUpdate
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnUpdate*
        name: OnUpdate
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Node.OnUpdate
  ZeroFramework.Utility.Node.OnStop*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Node.OnStop*
        name: OnStop
      VB:
      - id: ZeroFramework.Utility.Node.OnStop*
        name: OnStop
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStop*
        name: OnStop
      VB:
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStop*
        name: OnStop
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStop*
        name: OnStop
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Node*
        name: Node
      - name: .
      - id: ZeroFramework.Utility.Node.OnStop*
        name: OnStop
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Node.OnStop
  ZeroFramework.Utility.Many2ManyNode.children:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Many2ManyNode.children
        name: children
      VB:
      - id: ZeroFramework.Utility.Many2ManyNode.children
        name: children
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Many2ManyNode
        name: Many2ManyNode
      - name: .
      - id: ZeroFramework.Utility.Many2ManyNode.children
        name: children
      VB:
      - id: ZeroFramework.Utility.Many2ManyNode
        name: Many2ManyNode
      - name: .
      - id: ZeroFramework.Utility.Many2ManyNode.children
        name: children
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Many2ManyNode
        name: Many2ManyNode
      - name: .
      - id: ZeroFramework.Utility.Many2ManyNode.children
        name: children
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Many2ManyNode
        name: Many2ManyNode
      - name: .
      - id: ZeroFramework.Utility.Many2ManyNode.children
        name: children
    isDefinition: true
    parent: ZeroFramework.Utility.Many2ManyNode
    commentId: F:ZeroFramework.Utility.Many2ManyNode.children
  ZeroFramework.Utility.Single2ManyNode.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Single2ManyNode.#ctor*
        name: Single2ManyNode
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Single2ManyNode*
        name: Single2ManyNode
      - name: .
      - id: ZeroFramework.Utility.Single2ManyNode.#ctor*
        name: Single2ManyNode
      VB:
      - id: ZeroFramework.Utility.Single2ManyNode*
        name: Single2ManyNode
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Single2ManyNode*
        name: Single2ManyNode
      - name: .
      - id: ZeroFramework.Utility.Single2ManyNode.#ctor*
        name: Single2ManyNode
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Single2ManyNode*
        name: Single2ManyNode
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Single2ManyNode.#ctor
  ZeroFramework.Utility.Single2ManyNode:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Single2ManyNode
        name: Single2ManyNode
      VB:
      - id: ZeroFramework.Utility.Single2ManyNode
        name: Single2ManyNode
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Single2ManyNode
        name: Single2ManyNode
      VB:
      - id: ZeroFramework.Utility.Single2ManyNode
        name: Single2ManyNode
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Single2ManyNode
        name: Single2ManyNode
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Single2ManyNode
        name: Single2ManyNode
    isDefinition: true
    commentId: T:ZeroFramework.Utility.Single2ManyNode
  ZeroFramework.Utility.Single2SingleNode.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Single2SingleNode.#ctor*
        name: Single2SingleNode
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Single2SingleNode*
        name: Single2SingleNode
      - name: .
      - id: ZeroFramework.Utility.Single2SingleNode.#ctor*
        name: Single2SingleNode
      VB:
      - id: ZeroFramework.Utility.Single2SingleNode*
        name: Single2SingleNode
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Single2SingleNode*
        name: Single2SingleNode
      - name: .
      - id: ZeroFramework.Utility.Single2SingleNode.#ctor*
        name: Single2SingleNode
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Single2SingleNode*
        name: Single2SingleNode
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Single2SingleNode.#ctor
  ZeroFramework.Utility.NodeTree.Update*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeTree.Update*
        name: Update
      VB:
      - id: ZeroFramework.Utility.NodeTree.Update*
        name: Update
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.Update*
        name: Update
      VB:
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.Update*
        name: Update
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.Update*
        name: Update
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.Update*
        name: Update
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeTree.Update
  ZeroFramework.Utility.NodeTree.TreeStart*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeTree.TreeStart*
        name: TreeStart
      VB:
      - id: ZeroFramework.Utility.NodeTree.TreeStart*
        name: TreeStart
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.TreeStart*
        name: TreeStart
      VB:
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.TreeStart*
        name: TreeStart
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.TreeStart*
        name: TreeStart
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.TreeStart*
        name: TreeStart
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeTree.TreeStart
  ZeroFramework.Utility.NodeTree.TreeEnd*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeTree.TreeEnd*
        name: TreeEnd
      VB:
      - id: ZeroFramework.Utility.NodeTree.TreeEnd*
        name: TreeEnd
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.TreeEnd*
        name: TreeEnd
      VB:
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.TreeEnd*
        name: TreeEnd
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.TreeEnd*
        name: TreeEnd
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.TreeEnd*
        name: TreeEnd
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeTree.TreeEnd
  ZeroFramework.Utility.NodeTree.Destroy*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeTree.Destroy*
        name: Destroy
      VB:
      - id: ZeroFramework.Utility.NodeTree.Destroy*
        name: Destroy
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.Destroy*
        name: Destroy
      VB:
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.Destroy*
        name: Destroy
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.Destroy*
        name: Destroy
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTree*
        name: NodeTree
      - name: .
      - id: ZeroFramework.Utility.NodeTree.Destroy*
        name: Destroy
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.NodeTree.Destroy
  ZeroFramework.Utility.NodeTreeRunner:
    name:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeRunner
        name: NodeTreeRunner
      VB:
      - id: ZeroFramework.Utility.NodeTreeRunner
        name: NodeTreeRunner
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.NodeTreeRunner
        name: NodeTreeRunner
      VB:
      - id: ZeroFramework.Utility.NodeTreeRunner
        name: NodeTreeRunner
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeRunner
        name: NodeTreeRunner
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.NodeTreeRunner
        name: NodeTreeRunner
    isDefinition: true
    commentId: T:ZeroFramework.Utility.NodeTreeRunner
  ZeroFramework.Utility.IObjectPool`1:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.Utility.IObjectPool`1
  ZeroFramework.Utility.IObjectPool{{T}}:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.IObjectPool`1
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.IObjectPool{``0}
  Global.Func`1:
    name:
      CSharp:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    isDefinition: true
  Global.Func{{T}}:
    name:
      CSharp:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: Global.Func`1
    commentId: '!:Global.Func{``0}'
  ZeroFramework.Utility.PoolKit.AllocateSimpleObjectPool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.PoolKit.AllocateSimpleObjectPool*
        name: AllocateSimpleObjectPool
      VB:
      - id: ZeroFramework.Utility.PoolKit.AllocateSimpleObjectPool*
        name: AllocateSimpleObjectPool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.PoolKit*
        name: PoolKit
      - name: .
      - id: ZeroFramework.Utility.PoolKit.AllocateSimpleObjectPool*
        name: AllocateSimpleObjectPool
      VB:
      - id: ZeroFramework.Utility.PoolKit*
        name: PoolKit
      - name: .
      - id: ZeroFramework.Utility.PoolKit.AllocateSimpleObjectPool*
        name: AllocateSimpleObjectPool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.PoolKit*
        name: PoolKit
      - name: .
      - id: ZeroFramework.Utility.PoolKit.AllocateSimpleObjectPool*
        name: AllocateSimpleObjectPool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.PoolKit*
        name: PoolKit
      - name: .
      - id: ZeroFramework.Utility.PoolKit.AllocateSimpleObjectPool*
        name: AllocateSimpleObjectPool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.PoolKit.AllocateSimpleObjectPool
  ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
        name: AllocateSimpleObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
        name: AllocateSimpleObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
        name: AllocateSimpleObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
        name: AllocateSimpleObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
        name: AllocateSimpleObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
        name: AllocateSimpleObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
  ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{{T}},Action{{T}},Action{{T}},Action{{T}},System.Boolean,System.Int32,System.Int32,System.Boolean):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
        name: AllocateSimpleObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
        name: AllocateSimpleObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
        name: AllocateSimpleObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
        name: AllocateSimpleObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
        name: AllocateSimpleObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
        name: AllocateSimpleObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
    parent: ZeroFramework.Utility.IPoolKit
    commentId: M:ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32,System.Int32,System.Boolean)
  ZeroFramework.Utility.PoolKit.AllocateSafeObjectPool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.PoolKit.AllocateSafeObjectPool*
        name: AllocateSafeObjectPool
      VB:
      - id: ZeroFramework.Utility.PoolKit.AllocateSafeObjectPool*
        name: AllocateSafeObjectPool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.PoolKit*
        name: PoolKit
      - name: .
      - id: ZeroFramework.Utility.PoolKit.AllocateSafeObjectPool*
        name: AllocateSafeObjectPool
      VB:
      - id: ZeroFramework.Utility.PoolKit*
        name: PoolKit
      - name: .
      - id: ZeroFramework.Utility.PoolKit.AllocateSafeObjectPool*
        name: AllocateSafeObjectPool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.PoolKit*
        name: PoolKit
      - name: .
      - id: ZeroFramework.Utility.PoolKit.AllocateSafeObjectPool*
        name: AllocateSafeObjectPool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.PoolKit*
        name: PoolKit
      - name: .
      - id: ZeroFramework.Utility.PoolKit.AllocateSafeObjectPool*
        name: AllocateSafeObjectPool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.PoolKit.AllocateSafeObjectPool
  ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
        name: AllocateSafeObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
        name: AllocateSafeObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
        name: AllocateSafeObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
        name: AllocateSafeObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
        name: AllocateSafeObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
        name: AllocateSafeObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
  ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{{T}},Action{{T}},Action{{T}},Action{{T}},System.Boolean,System.Int32):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
        name: AllocateSafeObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
        name: AllocateSafeObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
        name: AllocateSafeObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
        name: AllocateSafeObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
        name: AllocateSafeObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
        name: AllocateSafeObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: (
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: ','
      - name: " "
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
    parent: ZeroFramework.Utility.IPoolKit
    commentId: M:ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool``1(Func{``0},Action{``0},Action{``0},Action{``0},System.Boolean,System.Int32)
  ZeroFramework.Utility.PoolKit:
    name:
      CSharp:
      - id: ZeroFramework.Utility.PoolKit
        name: PoolKit
      VB:
      - id: ZeroFramework.Utility.PoolKit
        name: PoolKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.PoolKit
        name: PoolKit
      VB:
      - id: ZeroFramework.Utility.PoolKit
        name: PoolKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.PoolKit
        name: PoolKit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.PoolKit
        name: PoolKit
    isDefinition: true
    commentId: T:ZeroFramework.Utility.PoolKit
  ZeroFramework.Utility.ObjectPool`1.CountAll*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.CountAll*
        name: CountAll
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.CountAll*
        name: CountAll
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountAll*
        name: CountAll
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountAll*
        name: CountAll
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountAll*
        name: CountAll
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountAll*
        name: CountAll
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ObjectPool`1.CountAll
  System.Collections.Generic.Stack`1:
    name:
      CSharp:
      - id: System.Collections.Generic.Stack`1
        name: Stack
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.Stack`1
        name: Stack
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.Stack`1
        name: Stack
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.Stack`1
        name: Stack
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.Stack`1
        name: Stack
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.Stack`1
        name: Stack
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:System.Collections.Generic.Stack`1
  System.Collections.Generic.Stack{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.Stack`1
        name: Stack
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.Stack`1
        name: Stack
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.Stack`1
        name: Stack
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Collections.Generic.Stack`1
        name: Stack
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.Stack`1
        name: Stack
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.Stack`1
        name: Stack
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.Stack`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Stack{`0}
  ZeroFramework.Utility.ObjectPool`1.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.#ctor*
        name: ObjectPool
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.#ctor*
        name: ObjectPool
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.#ctor*
        name: ObjectPool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ObjectPool`1.#ctor
  ZeroFramework.Utility.ObjectPool`1.Get*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.Get*
        name: Get
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.Get*
        name: Get
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Get*
        name: Get
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Get*
        name: Get
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Get*
        name: Get
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Get*
        name: Get
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ObjectPool`1.Get
  ZeroFramework.Utility.IObjectPool`1.Get:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1.Get
        name: Get
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1.Get
        name: Get
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Get
        name: Get
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Get
        name: Get
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Get
        name: Get
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Get
        name: Get
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.IObjectPool`1.Get
  ZeroFramework.Utility.IObjectPool{{T}}.Get:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool{`0}.Get
        name: Get
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool{`0}.Get
        name: Get
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.Get
        name: Get
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.Get
        name: Get
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.Get
        name: Get
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.Get
        name: Get
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.IObjectPool`1.Get
    parent: ZeroFramework.Utility.IObjectPool{{T}}
    commentId: M:ZeroFramework.Utility.IObjectPool{`0}.Get
  ZeroFramework.Utility.ObjectPool`1.Release*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.Release*
        name: Release
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.Release*
        name: Release
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Release*
        name: Release
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Release*
        name: Release
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Release*
        name: Release
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Release*
        name: Release
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ObjectPool`1.Release
  ZeroFramework.Utility.IObjectPool`1.Release(`0):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.IObjectPool`1.Release(`0)
  ZeroFramework.Utility.IObjectPool{{T}}.Release({T}):
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool{`0}.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool{`0}.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.IObjectPool`1.Release(`0)
    parent: ZeroFramework.Utility.IObjectPool{{T}}
    commentId: M:ZeroFramework.Utility.IObjectPool{`0}.Release(`0)
  ZeroFramework.Utility.ObjectPool`1.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ObjectPool`1.Clear
  ZeroFramework.Utility.IObjectPool`1.Clear:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1.Clear
        name: Clear
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Clear
        name: Clear
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Clear
        name: Clear
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.IObjectPool`1.Clear
  ZeroFramework.Utility.IObjectPool{{T}}.Clear:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool{`0}.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool{`0}.Clear
        name: Clear
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.Clear
        name: Clear
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.Clear
        name: Clear
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.IObjectPool`1.Clear
    parent: ZeroFramework.Utility.IObjectPool{{T}}
    commentId: M:ZeroFramework.Utility.IObjectPool{`0}.Clear
  ZeroFramework.Utility.ObjectPool`1.GetCountActive*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountActive*
        name: GetCountActive
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountActive*
        name: GetCountActive
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountActive*
        name: GetCountActive
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountActive*
        name: GetCountActive
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountActive*
        name: GetCountActive
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountActive*
        name: GetCountActive
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ObjectPool`1.GetCountActive
  ZeroFramework.Utility.IObjectPool`1.GetCountActive:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.IObjectPool`1.GetCountActive
  ZeroFramework.Utility.IObjectPool{{T}}.GetCountActive:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.IObjectPool`1.GetCountActive
    parent: ZeroFramework.Utility.IObjectPool{{T}}
    commentId: M:ZeroFramework.Utility.IObjectPool{`0}.GetCountActive
  ZeroFramework.Utility.ObjectPool`1.GetCountAll*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountAll*
        name: GetCountAll
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountAll*
        name: GetCountAll
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountAll*
        name: GetCountAll
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountAll*
        name: GetCountAll
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountAll*
        name: GetCountAll
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountAll*
        name: GetCountAll
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ObjectPool`1.GetCountAll
  ZeroFramework.Utility.IObjectPool`1.GetCountAll:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.IObjectPool`1.GetCountAll
  ZeroFramework.Utility.IObjectPool{{T}}.GetCountAll:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.IObjectPool`1.GetCountAll
    parent: ZeroFramework.Utility.IObjectPool{{T}}
    commentId: M:ZeroFramework.Utility.IObjectPool{`0}.GetCountAll
  ZeroFramework.Utility.ObjectPool`1.GetCountInactive*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountInactive*
        name: GetCountInactive
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountInactive*
        name: GetCountInactive
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountInactive*
        name: GetCountInactive
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountInactive*
        name: GetCountInactive
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountInactive*
        name: GetCountInactive
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1*
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountInactive*
        name: GetCountInactive
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ObjectPool`1.GetCountInactive
  ZeroFramework.Utility.IObjectPool`1.GetCountInactive:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.IObjectPool`1.GetCountInactive
  ZeroFramework.Utility.IObjectPool{{T}}.GetCountInactive:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool{`0}.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.IObjectPool`1.GetCountInactive
    parent: ZeroFramework.Utility.IObjectPool{{T}}
    commentId: M:ZeroFramework.Utility.IObjectPool{`0}.GetCountInactive
  ZeroFramework.Utility.ObjectPool`1:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.Utility.ObjectPool`1
  ZeroFramework.Utility.PoolObjExistException.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.PoolObjExistException.#ctor*
        name: PoolObjExistException
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.PoolObjExistException*
        name: PoolObjExistException
      - name: .
      - id: ZeroFramework.Utility.PoolObjExistException.#ctor*
        name: PoolObjExistException
      VB:
      - id: ZeroFramework.Utility.PoolObjExistException*
        name: PoolObjExistException
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.PoolObjExistException*
        name: PoolObjExistException
      - name: .
      - id: ZeroFramework.Utility.PoolObjExistException.#ctor*
        name: PoolObjExistException
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.PoolObjExistException*
        name: PoolObjExistException
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.PoolObjExistException.#ctor
  ZeroFramework.Utility.PoolObjExistException:
    name:
      CSharp:
      - id: ZeroFramework.Utility.PoolObjExistException
        name: PoolObjExistException
      VB:
      - id: ZeroFramework.Utility.PoolObjExistException
        name: PoolObjExistException
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.PoolObjExistException
        name: PoolObjExistException
      VB:
      - id: ZeroFramework.Utility.PoolObjExistException
        name: PoolObjExistException
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.PoolObjExistException
        name: PoolObjExistException
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.PoolObjExistException
        name: PoolObjExistException
    isDefinition: true
    commentId: T:ZeroFramework.Utility.PoolObjExistException
  ZeroFramework.Utility.ObjectPool{{T}}:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.ObjectPool{`0}
  ZeroFramework.Utility.ObjectPool`1.CountActive:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.CountActive
        name: CountActive
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.CountActive
        name: CountActive
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountActive
        name: CountActive
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountActive
        name: CountActive
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountActive
        name: CountActive
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountActive
        name: CountActive
    isDefinition: true
    commentId: F:ZeroFramework.Utility.ObjectPool`1.CountActive
  ZeroFramework.Utility.ObjectPool{{T}}.CountActive:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountActive
        name: CountActive
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountActive
        name: CountActive
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountActive
        name: CountActive
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountActive
        name: CountActive
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountActive
        name: CountActive
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountActive
        name: CountActive
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1.CountActive
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: F:ZeroFramework.Utility.ObjectPool{`0}.CountActive
  ZeroFramework.Utility.ObjectPool`1.CountAll:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.CountAll
        name: CountAll
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.CountAll
        name: CountAll
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountAll
        name: CountAll
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountAll
        name: CountAll
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountAll
        name: CountAll
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountAll
        name: CountAll
    isDefinition: true
    commentId: P:ZeroFramework.Utility.ObjectPool`1.CountAll
  ZeroFramework.Utility.ObjectPool{{T}}.CountAll:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountAll
        name: CountAll
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountAll
        name: CountAll
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountAll
        name: CountAll
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountAll
        name: CountAll
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountAll
        name: CountAll
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountAll
        name: CountAll
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1.CountAll
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: P:ZeroFramework.Utility.ObjectPool{`0}.CountAll
  ZeroFramework.Utility.ObjectPool`1.CountInactive:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.CountInactive
        name: CountInactive
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.CountInactive
        name: CountInactive
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountInactive
        name: CountInactive
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountInactive
        name: CountInactive
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountInactive
        name: CountInactive
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.CountInactive
        name: CountInactive
    isDefinition: true
    commentId: F:ZeroFramework.Utility.ObjectPool`1.CountInactive
  ZeroFramework.Utility.ObjectPool{{T}}.CountInactive:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountInactive
        name: CountInactive
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountInactive
        name: CountInactive
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountInactive
        name: CountInactive
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountInactive
        name: CountInactive
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountInactive
        name: CountInactive
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.CountInactive
        name: CountInactive
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1.CountInactive
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: F:ZeroFramework.Utility.ObjectPool{`0}.CountInactive
  ZeroFramework.Utility.ObjectPool`1._pool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1._pool
        name: _pool
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1._pool
        name: _pool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._pool
        name: _pool
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._pool
        name: _pool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._pool
        name: _pool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._pool
        name: _pool
    isDefinition: true
    commentId: F:ZeroFramework.Utility.ObjectPool`1._pool
  ZeroFramework.Utility.ObjectPool{{T}}._pool:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}._pool
        name: _pool
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}._pool
        name: _pool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._pool
        name: _pool
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._pool
        name: _pool
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._pool
        name: _pool
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._pool
        name: _pool
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1._pool
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: F:ZeroFramework.Utility.ObjectPool{`0}._pool
  ZeroFramework.Utility.ObjectPool`1._createFunc:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1._createFunc
        name: _createFunc
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1._createFunc
        name: _createFunc
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._createFunc
        name: _createFunc
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._createFunc
        name: _createFunc
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._createFunc
        name: _createFunc
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._createFunc
        name: _createFunc
    isDefinition: true
    commentId: F:ZeroFramework.Utility.ObjectPool`1._createFunc
  ZeroFramework.Utility.ObjectPool{{T}}._createFunc:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}._createFunc
        name: _createFunc
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}._createFunc
        name: _createFunc
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._createFunc
        name: _createFunc
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._createFunc
        name: _createFunc
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._createFunc
        name: _createFunc
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._createFunc
        name: _createFunc
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1._createFunc
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: F:ZeroFramework.Utility.ObjectPool{`0}._createFunc
  ZeroFramework.Utility.ObjectPool`1._actionOnGet:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnGet
        name: _actionOnGet
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnGet
        name: _actionOnGet
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnGet
        name: _actionOnGet
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnGet
        name: _actionOnGet
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnGet
        name: _actionOnGet
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnGet
        name: _actionOnGet
    isDefinition: true
    commentId: F:ZeroFramework.Utility.ObjectPool`1._actionOnGet
  ZeroFramework.Utility.ObjectPool{{T}}._actionOnGet:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnGet
        name: _actionOnGet
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnGet
        name: _actionOnGet
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnGet
        name: _actionOnGet
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnGet
        name: _actionOnGet
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnGet
        name: _actionOnGet
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnGet
        name: _actionOnGet
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1._actionOnGet
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: F:ZeroFramework.Utility.ObjectPool{`0}._actionOnGet
  ZeroFramework.Utility.ObjectPool`1._actionOnRelease:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnRelease
        name: _actionOnRelease
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnRelease
        name: _actionOnRelease
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnRelease
        name: _actionOnRelease
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnRelease
        name: _actionOnRelease
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnRelease
        name: _actionOnRelease
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnRelease
        name: _actionOnRelease
    isDefinition: true
    commentId: F:ZeroFramework.Utility.ObjectPool`1._actionOnRelease
  ZeroFramework.Utility.ObjectPool{{T}}._actionOnRelease:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnRelease
        name: _actionOnRelease
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnRelease
        name: _actionOnRelease
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnRelease
        name: _actionOnRelease
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnRelease
        name: _actionOnRelease
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnRelease
        name: _actionOnRelease
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnRelease
        name: _actionOnRelease
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1._actionOnRelease
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: F:ZeroFramework.Utility.ObjectPool{`0}._actionOnRelease
  ZeroFramework.Utility.ObjectPool`1._actionOnDestroy:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnDestroy
        name: _actionOnDestroy
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnDestroy
        name: _actionOnDestroy
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnDestroy
        name: _actionOnDestroy
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnDestroy
        name: _actionOnDestroy
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnDestroy
        name: _actionOnDestroy
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._actionOnDestroy
        name: _actionOnDestroy
    isDefinition: true
    commentId: F:ZeroFramework.Utility.ObjectPool`1._actionOnDestroy
  ZeroFramework.Utility.ObjectPool{{T}}._actionOnDestroy:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnDestroy
        name: _actionOnDestroy
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnDestroy
        name: _actionOnDestroy
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnDestroy
        name: _actionOnDestroy
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnDestroy
        name: _actionOnDestroy
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnDestroy
        name: _actionOnDestroy
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._actionOnDestroy
        name: _actionOnDestroy
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1._actionOnDestroy
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: F:ZeroFramework.Utility.ObjectPool{`0}._actionOnDestroy
  ZeroFramework.Utility.ObjectPool`1._collectionCheck:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1._collectionCheck
        name: _collectionCheck
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1._collectionCheck
        name: _collectionCheck
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._collectionCheck
        name: _collectionCheck
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._collectionCheck
        name: _collectionCheck
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._collectionCheck
        name: _collectionCheck
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._collectionCheck
        name: _collectionCheck
    isDefinition: true
    commentId: F:ZeroFramework.Utility.ObjectPool`1._collectionCheck
  ZeroFramework.Utility.ObjectPool{{T}}._collectionCheck:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}._collectionCheck
        name: _collectionCheck
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}._collectionCheck
        name: _collectionCheck
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._collectionCheck
        name: _collectionCheck
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._collectionCheck
        name: _collectionCheck
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._collectionCheck
        name: _collectionCheck
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._collectionCheck
        name: _collectionCheck
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1._collectionCheck
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: F:ZeroFramework.Utility.ObjectPool{`0}._collectionCheck
  ZeroFramework.Utility.ObjectPool`1._defaultCapacity:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1._defaultCapacity
        name: _defaultCapacity
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1._defaultCapacity
        name: _defaultCapacity
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._defaultCapacity
        name: _defaultCapacity
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._defaultCapacity
        name: _defaultCapacity
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._defaultCapacity
        name: _defaultCapacity
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._defaultCapacity
        name: _defaultCapacity
    isDefinition: true
    commentId: F:ZeroFramework.Utility.ObjectPool`1._defaultCapacity
  ZeroFramework.Utility.ObjectPool{{T}}._defaultCapacity:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}._defaultCapacity
        name: _defaultCapacity
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}._defaultCapacity
        name: _defaultCapacity
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._defaultCapacity
        name: _defaultCapacity
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._defaultCapacity
        name: _defaultCapacity
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._defaultCapacity
        name: _defaultCapacity
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._defaultCapacity
        name: _defaultCapacity
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1._defaultCapacity
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: F:ZeroFramework.Utility.ObjectPool{`0}._defaultCapacity
  ZeroFramework.Utility.ObjectPool`1._maxSize:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1._maxSize
        name: _maxSize
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1._maxSize
        name: _maxSize
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._maxSize
        name: _maxSize
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._maxSize
        name: _maxSize
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._maxSize
        name: _maxSize
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1._maxSize
        name: _maxSize
    isDefinition: true
    commentId: F:ZeroFramework.Utility.ObjectPool`1._maxSize
  ZeroFramework.Utility.ObjectPool{{T}}._maxSize:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}._maxSize
        name: _maxSize
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}._maxSize
        name: _maxSize
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._maxSize
        name: _maxSize
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._maxSize
        name: _maxSize
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._maxSize
        name: _maxSize
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}._maxSize
        name: _maxSize
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1._maxSize
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: F:ZeroFramework.Utility.ObjectPool{`0}._maxSize
  ZeroFramework.Utility.ObjectPool`1.Release(`0):
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.ObjectPool`1.Release(`0)
  ZeroFramework.Utility.ObjectPool{{T}}.Release({T}):
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.Release(`0)
        name: Release
      - name: (
      - name: T
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1.Release(`0)
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: M:ZeroFramework.Utility.ObjectPool{`0}.Release(`0)
  ZeroFramework.Utility.ObjectPool`1.Clear:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.Clear
        name: Clear
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Clear
        name: Clear
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Clear
        name: Clear
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.ObjectPool`1.Clear
  ZeroFramework.Utility.ObjectPool{{T}}.Clear:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}.Clear
        name: Clear
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.Clear
        name: Clear
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.Clear
        name: Clear
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1.Clear
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: M:ZeroFramework.Utility.ObjectPool{`0}.Clear
  ZeroFramework.Utility.ObjectPool`1.GetCountActive:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.ObjectPool`1.GetCountActive
  ZeroFramework.Utility.ObjectPool{{T}}.GetCountActive:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountActive
        name: GetCountActive
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1.GetCountActive
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: M:ZeroFramework.Utility.ObjectPool{`0}.GetCountActive
  ZeroFramework.Utility.ObjectPool`1.GetCountAll:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.ObjectPool`1.GetCountAll
  ZeroFramework.Utility.ObjectPool{{T}}.GetCountAll:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountAll
        name: GetCountAll
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1.GetCountAll
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: M:ZeroFramework.Utility.ObjectPool{`0}.GetCountAll
  ZeroFramework.Utility.ObjectPool`1.GetCountInactive:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.ObjectPool`1.GetCountInactive
  ZeroFramework.Utility.ObjectPool{{T}}.GetCountInactive:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.GetCountInactive
        name: GetCountInactive
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1.GetCountInactive
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: M:ZeroFramework.Utility.ObjectPool{`0}.GetCountInactive
  ZeroFramework.Utility.SafeObjectPool`1.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.SafeObjectPool`1.#ctor*
        name: SafeObjectPool
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.SafeObjectPool`1*
        name: SafeObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.SafeObjectPool`1.#ctor*
        name: SafeObjectPool
      VB:
      - id: ZeroFramework.Utility.SafeObjectPool`1*
        name: SafeObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.SafeObjectPool`1*
        name: SafeObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.SafeObjectPool`1.#ctor*
        name: SafeObjectPool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.SafeObjectPool`1*
        name: SafeObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.SafeObjectPool`1.#ctor
  ZeroFramework.Utility.ObjectPool`1.Get:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1.Get
        name: Get
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1.Get
        name: Get
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Get
        name: Get
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Get
        name: Get
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Get
        name: Get
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1.Get
        name: Get
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.Utility.ObjectPool`1.Get
  ZeroFramework.Utility.ObjectPool{{T}}.Get:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool{`0}.Get
        name: Get
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool{`0}.Get
        name: Get
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.Get
        name: Get
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.Get
        name: Get
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.Get
        name: Get
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ObjectPool`1
        name: ObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.ObjectPool{`0}.Get
        name: Get
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Utility.ObjectPool`1.Get
    parent: ZeroFramework.Utility.ObjectPool{{T}}
    commentId: M:ZeroFramework.Utility.ObjectPool{`0}.Get
  ZeroFramework.Utility.SafeObjectPool`1.Get*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.SafeObjectPool`1.Get*
        name: Get
      VB:
      - id: ZeroFramework.Utility.SafeObjectPool`1.Get*
        name: Get
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.SafeObjectPool`1*
        name: SafeObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.SafeObjectPool`1.Get*
        name: Get
      VB:
      - id: ZeroFramework.Utility.SafeObjectPool`1*
        name: SafeObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.SafeObjectPool`1.Get*
        name: Get
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.SafeObjectPool`1*
        name: SafeObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.SafeObjectPool`1.Get*
        name: Get
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.SafeObjectPool`1*
        name: SafeObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.SafeObjectPool`1.Get*
        name: Get
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.SafeObjectPool`1.Get
  ZeroFramework.Utility.SafeObjectPool`1:
    name:
      CSharp:
      - id: ZeroFramework.Utility.SafeObjectPool`1
        name: SafeObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Utility.SafeObjectPool`1
        name: SafeObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.SafeObjectPool`1
        name: SafeObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Utility.SafeObjectPool`1
        name: SafeObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.SafeObjectPool`1
        name: SafeObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.SafeObjectPool`1
        name: SafeObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.Utility.SafeObjectPool`1
  ZeroFramework.Utility.SimpleObjectPool`1.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.SimpleObjectPool`1.#ctor*
        name: SimpleObjectPool
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.SimpleObjectPool`1*
        name: SimpleObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.SimpleObjectPool`1.#ctor*
        name: SimpleObjectPool
      VB:
      - id: ZeroFramework.Utility.SimpleObjectPool`1*
        name: SimpleObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.SimpleObjectPool`1*
        name: SimpleObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.SimpleObjectPool`1.#ctor*
        name: SimpleObjectPool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.SimpleObjectPool`1*
        name: SimpleObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.SimpleObjectPool`1.#ctor
  ZeroFramework.Utility.SimpleObjectPool`1:
    name:
      CSharp:
      - id: ZeroFramework.Utility.SimpleObjectPool`1
        name: SimpleObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Utility.SimpleObjectPool`1
        name: SimpleObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.SimpleObjectPool`1
        name: SimpleObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework.Utility.SimpleObjectPool`1
        name: SimpleObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.SimpleObjectPool`1
        name: SimpleObjectPool
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.SimpleObjectPool`1
        name: SimpleObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:ZeroFramework.Utility.SimpleObjectPool`1
  ZeroFramework.Utility.IObjectPool`1.Get*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1.Get*
        name: Get
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1.Get*
        name: Get
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Get*
        name: Get
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Get*
        name: Get
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Get*
        name: Get
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Get*
        name: Get
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IObjectPool`1.Get
  ZeroFramework.Utility.IObjectPool`1.Release*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1.Release*
        name: Release
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1.Release*
        name: Release
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Release*
        name: Release
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Release*
        name: Release
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Release*
        name: Release
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Release*
        name: Release
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IObjectPool`1.Release
  ZeroFramework.Utility.IObjectPool`1.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IObjectPool`1.Clear
  ZeroFramework.Utility.IObjectPool`1.GetCountActive*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountActive*
        name: GetCountActive
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountActive*
        name: GetCountActive
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountActive*
        name: GetCountActive
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountActive*
        name: GetCountActive
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountActive*
        name: GetCountActive
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountActive*
        name: GetCountActive
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IObjectPool`1.GetCountActive
  ZeroFramework.Utility.IObjectPool`1.GetCountAll*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountAll*
        name: GetCountAll
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountAll*
        name: GetCountAll
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountAll*
        name: GetCountAll
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountAll*
        name: GetCountAll
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountAll*
        name: GetCountAll
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountAll*
        name: GetCountAll
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IObjectPool`1.GetCountAll
  ZeroFramework.Utility.IObjectPool`1.GetCountInactive*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountInactive*
        name: GetCountInactive
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountInactive*
        name: GetCountInactive
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountInactive*
        name: GetCountInactive
      VB:
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountInactive*
        name: GetCountInactive
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountInactive*
        name: GetCountInactive
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1*
        name: IObjectPool
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.Utility.IObjectPool`1.GetCountInactive*
        name: GetCountInactive
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IObjectPool`1.GetCountInactive
  ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool*
        name: AllocateSimpleObjectPool
      VB:
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool*
        name: AllocateSimpleObjectPool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit*
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool*
        name: AllocateSimpleObjectPool
      VB:
      - id: ZeroFramework.Utility.IPoolKit*
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool*
        name: AllocateSimpleObjectPool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit*
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool*
        name: AllocateSimpleObjectPool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit*
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool*
        name: AllocateSimpleObjectPool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IPoolKit.AllocateSimpleObjectPool
  ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool*
        name: AllocateSafeObjectPool
      VB:
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool*
        name: AllocateSafeObjectPool
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IPoolKit*
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool*
        name: AllocateSafeObjectPool
      VB:
      - id: ZeroFramework.Utility.IPoolKit*
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool*
        name: AllocateSafeObjectPool
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit*
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool*
        name: AllocateSafeObjectPool
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IPoolKit*
        name: IPoolKit
      - name: .
      - id: ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool*
        name: AllocateSafeObjectPool
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IPoolKit.AllocateSafeObjectPool
  ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1
    parent: ZeroFramework
    commentId: T:ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}
  ZeroFramework.SingletonMono`1.mInstance:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework.SingletonMono`1.mInstance
        name: mInstance
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.mInstance
        name: mInstance
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.mInstance
        name: mInstance
    isDefinition: true
    commentId: F:ZeroFramework.SingletonMono`1.mInstance
  ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.mInstance:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.mInstance
        name: mInstance
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.mInstance
        name: mInstance
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.mInstance
        name: mInstance
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.mInstance
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}
    commentId: F:ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.mInstance
  ZeroFramework.SingletonMono`1.Instance:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.Instance
        name: Instance
      VB:
      - id: ZeroFramework.SingletonMono`1.Instance
        name: Instance
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.Instance
        name: Instance
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.Instance
        name: Instance
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.Instance
        name: Instance
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.Instance
        name: Instance
    isDefinition: true
    commentId: P:ZeroFramework.SingletonMono`1.Instance
  ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Instance:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Instance
        name: Instance
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Instance
        name: Instance
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Instance
        name: Instance
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Instance
        name: Instance
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Instance
        name: Instance
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Instance
        name: Instance
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.Instance
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}
    commentId: P:ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Instance
  ZeroFramework.SingletonMono`1.ID:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.ID
        name: ID
      VB:
      - id: ZeroFramework.SingletonMono`1.ID
        name: ID
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.ID
        name: ID
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.ID
        name: ID
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.ID
        name: ID
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.ID
        name: ID
    isDefinition: true
    commentId: F:ZeroFramework.SingletonMono`1.ID
  ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ID:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ID
        name: ID
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ID
        name: ID
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ID
        name: ID
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ID
        name: ID
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ID
        name: ID
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ID
        name: ID
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.ID
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}
    commentId: F:ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ID
  ZeroFramework.SingletonMono`1.Dispose:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1.Dispose
        name: Dispose
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.Dispose
        name: Dispose
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.Dispose
        name: Dispose
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.SingletonMono`1.Dispose
  ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Dispose:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Dispose
        name: Dispose
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Dispose
        name: Dispose
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Dispose
        name: Dispose
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.Dispose
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}
    commentId: M:ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.Dispose
  ZeroFramework.SingletonMono`1.OnApplicationQuit:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.SingletonMono`1.OnApplicationQuit
  ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnApplicationQuit:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.OnApplicationQuit
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}
    commentId: M:ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnApplicationQuit
  ZeroFramework.SingletonMono`1.ResetID:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1.ResetID
        name: ResetID
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.ResetID
        name: ResetID
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.ResetID
        name: ResetID
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.SingletonMono`1.ResetID
  ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ResetID:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ResetID
        name: ResetID
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ResetID
        name: ResetID
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ResetID
        name: ResetID
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.ResetID
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}
    commentId: M:ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.ResetID
  ZeroFramework.SingletonMono`1.GetID:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1.GetID
        name: GetID
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.GetID
        name: GetID
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.GetID
        name: GetID
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.SingletonMono`1.GetID
  ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.GetID:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.GetID
        name: GetID
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.GetID
        name: GetID
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.GetID
        name: GetID
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.GetID
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}
    commentId: M:ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.GetID
  ZeroFramework.Utility.ITimerKit:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      VB:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      VB:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.ITimerKit
  System.Int64:
    name:
      CSharp:
      - id: System.Int64
        name: long
        isExternal: true
      VB:
      - id: System.Int64
        name: Long
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Int64
        name: long
        isExternal: true
      VB:
      - id: System.Int64
        name: Long
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Int64
        name: long
        isExternal: true
      VB:
      - id: System.Int64
        name: Long
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int64
  System.Collections.Generic.List{ZeroFramework.Utility.TimerTask}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: ZeroFramework.Utility.TimerTask
        name: TimerTask
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.TimerTask
        name: TimerTask
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: ZeroFramework.Utility.TimerTask
        name: TimerTask
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.TimerTask
        name: TimerTask
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerTask
        name: TimerTask
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerTask
        name: TimerTask
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{ZeroFramework.Utility.TimerTask}
  ZeroFramework.SingletonMono`1.OnSingletonInit:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - name: T
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono`1.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    isDefinition: true
    commentId: M:ZeroFramework.SingletonMono`1.OnSingletonInit
  ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnSingletonInit:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.OnSingletonInit
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}
    commentId: M:ZeroFramework.SingletonMono{ZeroFramework.Utility.TimerKit}.OnSingletonInit
  ZeroFramework.Utility.TimerKit.OnSingletonInit*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework.Utility.TimerKit.OnSingletonInit*
        name: OnSingletonInit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.OnSingletonInit*
        name: OnSingletonInit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.OnSingletonInit*
        name: OnSingletonInit
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TimerKit.OnSingletonInit
  ZeroFramework.Utility.TimerKit.Update*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit.Update*
        name: Update
      VB:
      - id: ZeroFramework.Utility.TimerKit.Update*
        name: Update
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Update*
        name: Update
      VB:
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Update*
        name: Update
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Update*
        name: Update
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Update*
        name: Update
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TimerKit.Update
  ZeroFramework.Utility.TimerKit.Wait*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit.Wait*
        name: Wait
      VB:
      - id: ZeroFramework.Utility.TimerKit.Wait*
        name: Wait
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Wait*
        name: Wait
      VB:
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Wait*
        name: Wait
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Wait*
        name: Wait
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Wait*
        name: Wait
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TimerKit.Wait
  ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action,System.Int32,System.Single):
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action,System.Int32,System.Single)
        name: Wait
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Action
        name: Action
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action,System.Int32,System.Single)
        name: Wait
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Action
        name: Action
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action,System.Int32,System.Single)
        name: Wait
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Action
        name: Action
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action,System.Int32,System.Single)
        name: Wait
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Action
        name: Action
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action,System.Int32,System.Single)
        name: Wait
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Action
        name: Action
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action,System.Int32,System.Single)
        name: Wait
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Action
        name: Action
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.ITimerKit
    commentId: M:ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action,System.Int32,System.Single)
  Global.Action{System.Object}:
    name:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: System.Object
        name: object
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: System.Object
        name: object
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: System.Object
        name: object
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.Action`1
    commentId: '!:Global.Action{System.Object}'
  ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action{System.Object},System.Object,System.Int32,System.Single):
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action{System.Object},System.Object,System.Int32,System.Single)
        name: Wait
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: System.Object
        name: object
        isExternal: true
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action{System.Object},System.Object,System.Int32,System.Single)
        name: Wait
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action{System.Object},System.Object,System.Int32,System.Single)
        name: Wait
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: System.Object
        name: object
        isExternal: true
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action{System.Object},System.Object,System.Int32,System.Single)
        name: Wait
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action{System.Object},System.Object,System.Int32,System.Single)
        name: Wait
      - name: (
      - id: System.Single
        name: float
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: System.Object
        name: object
        isExternal: true
      - name: '>'
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: int
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action{System.Object},System.Object,System.Int32,System.Single)
        name: Wait
      - name: (
      - id: System.Single
        name: Single
        isExternal: true
      - name: ','
      - name: " "
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Int32
        name: Integer
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.ITimerKit
    commentId: M:ZeroFramework.Utility.ITimerKit.Wait(System.Single,Action{System.Object},System.Object,System.Int32,System.Single)
  ZeroFramework.Utility.TimerKit.Abort*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit.Abort*
        name: Abort
      VB:
      - id: ZeroFramework.Utility.TimerKit.Abort*
        name: Abort
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Abort*
        name: Abort
      VB:
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Abort*
        name: Abort
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Abort*
        name: Abort
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Abort*
        name: Abort
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TimerKit.Abort
  ZeroFramework.Utility.ITimerKit.Abort(System.Int64):
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit.Abort(System.Int64)
        name: Abort
      - name: (
      - id: System.Int64
        name: long
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimerKit.Abort(System.Int64)
        name: Abort
      - name: (
      - id: System.Int64
        name: Long
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Abort(System.Int64)
        name: Abort
      - name: (
      - id: System.Int64
        name: long
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Abort(System.Int64)
        name: Abort
      - name: (
      - id: System.Int64
        name: Long
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Abort(System.Int64)
        name: Abort
      - name: (
      - id: System.Int64
        name: long
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Abort(System.Int64)
        name: Abort
      - name: (
      - id: System.Int64
        name: Long
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.ITimerKit
    commentId: M:ZeroFramework.Utility.ITimerKit.Abort(System.Int64)
  ZeroFramework.Utility.TimerKit.AbortAll*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit.AbortAll*
        name: AbortAll
      VB:
      - id: ZeroFramework.Utility.TimerKit.AbortAll*
        name: AbortAll
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.AbortAll*
        name: AbortAll
      VB:
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.AbortAll*
        name: AbortAll
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.AbortAll*
        name: AbortAll
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.AbortAll*
        name: AbortAll
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TimerKit.AbortAll
  ZeroFramework.Utility.ITimerKit.AbortAll:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit.AbortAll
        name: AbortAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimerKit.AbortAll
        name: AbortAll
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.AbortAll
        name: AbortAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.AbortAll
        name: AbortAll
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.AbortAll
        name: AbortAll
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.AbortAll
        name: AbortAll
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.ITimerKit
    commentId: M:ZeroFramework.Utility.ITimerKit.AbortAll
  ZeroFramework.Utility.TimerKit.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.Utility.TimerKit.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit*
        name: TimerKit
      - name: .
      - id: ZeroFramework.Utility.TimerKit.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TimerKit.Clear
  ZeroFramework.Utility.ITimerKit.Clear:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimerKit.Clear
        name: Clear
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Clear
        name: Clear
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Clear
        name: Clear
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Clear
        name: Clear
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.ITimerKit
    commentId: M:ZeroFramework.Utility.ITimerKit.Clear
  ZeroFramework.Utility.TimerKit:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      VB:
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      VB:
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerKit
        name: TimerKit
    isDefinition: true
    commentId: T:ZeroFramework.Utility.TimerKit
  ZeroFramework.Utility.TimerTask.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimerTask.#ctor*
        name: TimerTask
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimerTask*
        name: TimerTask
      - name: .
      - id: ZeroFramework.Utility.TimerTask.#ctor*
        name: TimerTask
      VB:
      - id: ZeroFramework.Utility.TimerTask*
        name: TimerTask
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerTask*
        name: TimerTask
      - name: .
      - id: ZeroFramework.Utility.TimerTask.#ctor*
        name: TimerTask
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerTask*
        name: TimerTask
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TimerTask.#ctor
  ZeroFramework.Utility.TimerTask.Init*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimerTask.Init*
        name: Init
      VB:
      - id: ZeroFramework.Utility.TimerTask.Init*
        name: Init
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimerTask*
        name: TimerTask
      - name: .
      - id: ZeroFramework.Utility.TimerTask.Init*
        name: Init
      VB:
      - id: ZeroFramework.Utility.TimerTask*
        name: TimerTask
      - name: .
      - id: ZeroFramework.Utility.TimerTask.Init*
        name: Init
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerTask*
        name: TimerTask
      - name: .
      - id: ZeroFramework.Utility.TimerTask.Init*
        name: Init
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerTask*
        name: TimerTask
      - name: .
      - id: ZeroFramework.Utility.TimerTask.Init*
        name: Init
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TimerTask.Init
  ZeroFramework.Utility.TimerTask.Reset*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimerTask.Reset*
        name: Reset
      VB:
      - id: ZeroFramework.Utility.TimerTask.Reset*
        name: Reset
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimerTask*
        name: TimerTask
      - name: .
      - id: ZeroFramework.Utility.TimerTask.Reset*
        name: Reset
      VB:
      - id: ZeroFramework.Utility.TimerTask*
        name: TimerTask
      - name: .
      - id: ZeroFramework.Utility.TimerTask.Reset*
        name: Reset
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerTask*
        name: TimerTask
      - name: .
      - id: ZeroFramework.Utility.TimerTask.Reset*
        name: Reset
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerTask*
        name: TimerTask
      - name: .
      - id: ZeroFramework.Utility.TimerTask.Reset*
        name: Reset
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TimerTask.Reset
  ZeroFramework.Utility.TimerTask:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimerTask
        name: TimerTask
      VB:
      - id: ZeroFramework.Utility.TimerTask
        name: TimerTask
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimerTask
        name: TimerTask
      VB:
      - id: ZeroFramework.Utility.TimerTask
        name: TimerTask
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerTask
        name: TimerTask
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimerTask
        name: TimerTask
    isDefinition: true
    commentId: T:ZeroFramework.Utility.TimerTask
  ZeroFramework.Utility.ITimerKit.Wait*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit.Wait*
        name: Wait
      VB:
      - id: ZeroFramework.Utility.ITimerKit.Wait*
        name: Wait
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Wait*
        name: Wait
      VB:
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Wait*
        name: Wait
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Wait*
        name: Wait
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Wait*
        name: Wait
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ITimerKit.Wait
  ZeroFramework.Utility.ITimerKit.Abort*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit.Abort*
        name: Abort
      VB:
      - id: ZeroFramework.Utility.ITimerKit.Abort*
        name: Abort
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Abort*
        name: Abort
      VB:
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Abort*
        name: Abort
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Abort*
        name: Abort
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Abort*
        name: Abort
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ITimerKit.Abort
  ZeroFramework.Utility.ITimerKit.AbortAll*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit.AbortAll*
        name: AbortAll
      VB:
      - id: ZeroFramework.Utility.ITimerKit.AbortAll*
        name: AbortAll
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.AbortAll*
        name: AbortAll
      VB:
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.AbortAll*
        name: AbortAll
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.AbortAll*
        name: AbortAll
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.AbortAll*
        name: AbortAll
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ITimerKit.AbortAll
  ZeroFramework.Utility.ITimerKit.Clear*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.Utility.ITimerKit.Clear*
        name: Clear
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Clear*
        name: Clear
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Clear*
        name: Clear
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimerKit*
        name: ITimerKit
      - name: .
      - id: ZeroFramework.Utility.ITimerKit.Clear*
        name: Clear
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ITimerKit.Clear
  ZeroFramework.Utility.TimestampKit.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimestampKit.#ctor*
        name: TimestampKit
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.#ctor*
        name: TimestampKit
      VB:
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.#ctor*
        name: TimestampKit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TimestampKit.#ctor
  ZeroFramework.Utility.TimestampKit.GetTimestamp*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimestampKit.GetTimestamp*
        name: GetTimestamp
      VB:
      - id: ZeroFramework.Utility.TimestampKit.GetTimestamp*
        name: GetTimestamp
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.GetTimestamp*
        name: GetTimestamp
      VB:
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.GetTimestamp*
        name: GetTimestamp
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.GetTimestamp*
        name: GetTimestamp
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.GetTimestamp*
        name: GetTimestamp
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TimestampKit.GetTimestamp
  ZeroFramework.Utility.ITimestampKit.GetTimestamp(System.Boolean):
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit.GetTimestamp(System.Boolean)
        name: GetTimestamp
      - name: (
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimestampKit.GetTimestamp(System.Boolean)
        name: GetTimestamp
      - name: (
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimestamp(System.Boolean)
        name: GetTimestamp
      - name: (
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimestamp(System.Boolean)
        name: GetTimestamp
      - name: (
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimestamp(System.Boolean)
        name: GetTimestamp
      - name: (
      - id: System.Boolean
        name: bool
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimestamp(System.Boolean)
        name: GetTimestamp
      - name: (
      - id: System.Boolean
        name: Boolean
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.ITimestampKit
    commentId: M:ZeroFramework.Utility.ITimestampKit.GetTimestamp(System.Boolean)
  ZeroFramework.Utility.TimestampKit.GetTimeString*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimestampKit.GetTimeString*
        name: GetTimeString
      VB:
      - id: ZeroFramework.Utility.TimestampKit.GetTimeString*
        name: GetTimeString
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.GetTimeString*
        name: GetTimeString
      VB:
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.GetTimeString*
        name: GetTimeString
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.GetTimeString*
        name: GetTimeString
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.GetTimeString*
        name: GetTimeString
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TimestampKit.GetTimeString
  ZeroFramework.Utility.ITimestampKit.GetTimeString(System.Int64,System.String):
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit.GetTimeString(System.Int64,System.String)
        name: GetTimeString
      - name: (
      - id: System.Int64
        name: long
        isExternal: true
      - name: ','
      - name: " "
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimestampKit.GetTimeString(System.Int64,System.String)
        name: GetTimeString
      - name: (
      - id: System.Int64
        name: Long
        isExternal: true
      - name: ','
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimeString(System.Int64,System.String)
        name: GetTimeString
      - name: (
      - id: System.Int64
        name: long
        isExternal: true
      - name: ','
      - name: " "
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimeString(System.Int64,System.String)
        name: GetTimeString
      - name: (
      - id: System.Int64
        name: Long
        isExternal: true
      - name: ','
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimeString(System.Int64,System.String)
        name: GetTimeString
      - name: (
      - id: System.Int64
        name: long
        isExternal: true
      - name: ','
      - name: " "
      - id: System.String
        name: string
        isExternal: true
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimeString(System.Int64,System.String)
        name: GetTimeString
      - name: (
      - id: System.Int64
        name: Long
        isExternal: true
      - name: ','
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.ITimestampKit
    commentId: M:ZeroFramework.Utility.ITimestampKit.GetTimeString(System.Int64,System.String)
  ZeroFramework.Utility.IClock:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      VB:
      - id: ZeroFramework.Utility.IClock
        name: IClock
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      VB:
      - id: ZeroFramework.Utility.IClock
        name: IClock
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
    isDefinition: true
    parent: ZeroFramework.Utility
    commentId: T:ZeroFramework.Utility.IClock
  ZeroFramework.Utility.TimestampKit.AllocateClock*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimestampKit.AllocateClock*
        name: AllocateClock
      VB:
      - id: ZeroFramework.Utility.TimestampKit.AllocateClock*
        name: AllocateClock
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.AllocateClock*
        name: AllocateClock
      VB:
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.AllocateClock*
        name: AllocateClock
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.AllocateClock*
        name: AllocateClock
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimestampKit*
        name: TimestampKit
      - name: .
      - id: ZeroFramework.Utility.TimestampKit.AllocateClock*
        name: AllocateClock
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.TimestampKit.AllocateClock
  ZeroFramework.Utility.ITimestampKit.AllocateClock:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit.AllocateClock
        name: AllocateClock
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimestampKit.AllocateClock
        name: AllocateClock
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.AllocateClock
        name: AllocateClock
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.AllocateClock
        name: AllocateClock
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.AllocateClock
        name: AllocateClock
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.AllocateClock
        name: AllocateClock
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.ITimestampKit
    commentId: M:ZeroFramework.Utility.ITimestampKit.AllocateClock
  ZeroFramework.Utility.TimestampKit:
    name:
      CSharp:
      - id: ZeroFramework.Utility.TimestampKit
        name: TimestampKit
      VB:
      - id: ZeroFramework.Utility.TimestampKit
        name: TimestampKit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.TimestampKit
        name: TimestampKit
      VB:
      - id: ZeroFramework.Utility.TimestampKit
        name: TimestampKit
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimestampKit
        name: TimestampKit
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.TimestampKit
        name: TimestampKit
    isDefinition: true
    commentId: T:ZeroFramework.Utility.TimestampKit
  ZeroFramework.Utility.Clock.#ctor*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Clock.#ctor*
        name: Clock
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.#ctor*
        name: Clock
      VB:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.#ctor*
        name: Clock
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Clock.#ctor
  ZeroFramework.Utility.Clock.GetTotalUseTime*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Clock.GetTotalUseTime*
        name: GetTotalUseTime
      VB:
      - id: ZeroFramework.Utility.Clock.GetTotalUseTime*
        name: GetTotalUseTime
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetTotalUseTime*
        name: GetTotalUseTime
      VB:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetTotalUseTime*
        name: GetTotalUseTime
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetTotalUseTime*
        name: GetTotalUseTime
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetTotalUseTime*
        name: GetTotalUseTime
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Clock.GetTotalUseTime
  ZeroFramework.Utility.IClock.GetTotalUseTime:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.GetTotalUseTime
        name: GetTotalUseTime
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock.GetTotalUseTime
        name: GetTotalUseTime
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetTotalUseTime
        name: GetTotalUseTime
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetTotalUseTime
        name: GetTotalUseTime
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetTotalUseTime
        name: GetTotalUseTime
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetTotalUseTime
        name: GetTotalUseTime
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IClock
    commentId: M:ZeroFramework.Utility.IClock.GetTotalUseTime
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Double
        name: double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Double
        name: double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Double
  ZeroFramework.Utility.Clock.GetAverageUseTime*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Clock.GetAverageUseTime*
        name: GetAverageUseTime
      VB:
      - id: ZeroFramework.Utility.Clock.GetAverageUseTime*
        name: GetAverageUseTime
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetAverageUseTime*
        name: GetAverageUseTime
      VB:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetAverageUseTime*
        name: GetAverageUseTime
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetAverageUseTime*
        name: GetAverageUseTime
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetAverageUseTime*
        name: GetAverageUseTime
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Clock.GetAverageUseTime
  ZeroFramework.Utility.IClock.GetAverageUseTime:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.GetAverageUseTime
        name: GetAverageUseTime
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock.GetAverageUseTime
        name: GetAverageUseTime
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetAverageUseTime
        name: GetAverageUseTime
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetAverageUseTime
        name: GetAverageUseTime
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetAverageUseTime
        name: GetAverageUseTime
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetAverageUseTime
        name: GetAverageUseTime
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IClock
    commentId: M:ZeroFramework.Utility.IClock.GetAverageUseTime
  ZeroFramework.Utility.Clock.GetFirstUseTime*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Clock.GetFirstUseTime*
        name: GetFirstUseTime
      VB:
      - id: ZeroFramework.Utility.Clock.GetFirstUseTime*
        name: GetFirstUseTime
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetFirstUseTime*
        name: GetFirstUseTime
      VB:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetFirstUseTime*
        name: GetFirstUseTime
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetFirstUseTime*
        name: GetFirstUseTime
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetFirstUseTime*
        name: GetFirstUseTime
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Clock.GetFirstUseTime
  ZeroFramework.Utility.IClock.GetFirstUseTime:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.GetFirstUseTime
        name: GetFirstUseTime
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock.GetFirstUseTime
        name: GetFirstUseTime
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetFirstUseTime
        name: GetFirstUseTime
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetFirstUseTime
        name: GetFirstUseTime
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetFirstUseTime
        name: GetFirstUseTime
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetFirstUseTime
        name: GetFirstUseTime
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IClock
    commentId: M:ZeroFramework.Utility.IClock.GetFirstUseTime
  ZeroFramework.Utility.Clock.GetCurrentUseTime*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Clock.GetCurrentUseTime*
        name: GetCurrentUseTime
      VB:
      - id: ZeroFramework.Utility.Clock.GetCurrentUseTime*
        name: GetCurrentUseTime
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetCurrentUseTime*
        name: GetCurrentUseTime
      VB:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetCurrentUseTime*
        name: GetCurrentUseTime
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetCurrentUseTime*
        name: GetCurrentUseTime
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetCurrentUseTime*
        name: GetCurrentUseTime
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Clock.GetCurrentUseTime
  ZeroFramework.Utility.IClock.GetCurrentUseTime:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.GetCurrentUseTime
        name: GetCurrentUseTime
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock.GetCurrentUseTime
        name: GetCurrentUseTime
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCurrentUseTime
        name: GetCurrentUseTime
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCurrentUseTime
        name: GetCurrentUseTime
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCurrentUseTime
        name: GetCurrentUseTime
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCurrentUseTime
        name: GetCurrentUseTime
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IClock
    commentId: M:ZeroFramework.Utility.IClock.GetCurrentUseTime
  ZeroFramework.Utility.Clock.GetCount*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Clock.GetCount*
        name: GetCount
      VB:
      - id: ZeroFramework.Utility.Clock.GetCount*
        name: GetCount
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetCount*
        name: GetCount
      VB:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetCount*
        name: GetCount
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetCount*
        name: GetCount
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.GetCount*
        name: GetCount
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Clock.GetCount
  ZeroFramework.Utility.IClock.GetCount:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.GetCount
        name: GetCount
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock.GetCount
        name: GetCount
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCount
        name: GetCount
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCount
        name: GetCount
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCount
        name: GetCount
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCount
        name: GetCount
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IClock
    commentId: M:ZeroFramework.Utility.IClock.GetCount
  ZeroFramework.Utility.Clock.Tic*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Clock.Tic*
        name: Tic
      VB:
      - id: ZeroFramework.Utility.Clock.Tic*
        name: Tic
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.Tic*
        name: Tic
      VB:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.Tic*
        name: Tic
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.Tic*
        name: Tic
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.Tic*
        name: Tic
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Clock.Tic
  ZeroFramework.Utility.IClock.Tic:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.Tic
        name: Tic
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock.Tic
        name: Tic
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Tic
        name: Tic
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Tic
        name: Tic
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Tic
        name: Tic
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Tic
        name: Tic
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IClock
    commentId: M:ZeroFramework.Utility.IClock.Tic
  ZeroFramework.Utility.Clock.Toc*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Clock.Toc*
        name: Toc
      VB:
      - id: ZeroFramework.Utility.Clock.Toc*
        name: Toc
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.Toc*
        name: Toc
      VB:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.Toc*
        name: Toc
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.Toc*
        name: Toc
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.Toc*
        name: Toc
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Clock.Toc
  ZeroFramework.Utility.IClock.Toc:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.Toc
        name: Toc
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock.Toc
        name: Toc
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Toc
        name: Toc
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Toc
        name: Toc
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Toc
        name: Toc
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Toc
        name: Toc
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IClock
    commentId: M:ZeroFramework.Utility.IClock.Toc
  ZeroFramework.Utility.Clock.Reset*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Clock.Reset*
        name: Reset
      VB:
      - id: ZeroFramework.Utility.Clock.Reset*
        name: Reset
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.Reset*
        name: Reset
      VB:
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.Reset*
        name: Reset
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.Reset*
        name: Reset
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock*
        name: Clock
      - name: .
      - id: ZeroFramework.Utility.Clock.Reset*
        name: Reset
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Clock.Reset
  ZeroFramework.Utility.IClock.Reset:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.Reset
        name: Reset
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock.Reset
        name: Reset
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Reset
        name: Reset
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Reset
        name: Reset
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Reset
        name: Reset
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Reset
        name: Reset
      - name: (
      - name: )
    isDefinition: true
    parent: ZeroFramework.Utility.IClock
    commentId: M:ZeroFramework.Utility.IClock.Reset
  ZeroFramework.Utility.Clock:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Clock
        name: Clock
      VB:
      - id: ZeroFramework.Utility.Clock
        name: Clock
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Clock
        name: Clock
      VB:
      - id: ZeroFramework.Utility.Clock
        name: Clock
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock
        name: Clock
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Clock
        name: Clock
    isDefinition: true
    commentId: T:ZeroFramework.Utility.Clock
  ZeroFramework.Utility.IClock.GetTotalUseTime*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.GetTotalUseTime*
        name: GetTotalUseTime
      VB:
      - id: ZeroFramework.Utility.IClock.GetTotalUseTime*
        name: GetTotalUseTime
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetTotalUseTime*
        name: GetTotalUseTime
      VB:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetTotalUseTime*
        name: GetTotalUseTime
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetTotalUseTime*
        name: GetTotalUseTime
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetTotalUseTime*
        name: GetTotalUseTime
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IClock.GetTotalUseTime
  ZeroFramework.Utility.IClock.GetAverageUseTime*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.GetAverageUseTime*
        name: GetAverageUseTime
      VB:
      - id: ZeroFramework.Utility.IClock.GetAverageUseTime*
        name: GetAverageUseTime
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetAverageUseTime*
        name: GetAverageUseTime
      VB:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetAverageUseTime*
        name: GetAverageUseTime
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetAverageUseTime*
        name: GetAverageUseTime
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetAverageUseTime*
        name: GetAverageUseTime
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IClock.GetAverageUseTime
  ZeroFramework.Utility.IClock.GetFirstUseTime*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.GetFirstUseTime*
        name: GetFirstUseTime
      VB:
      - id: ZeroFramework.Utility.IClock.GetFirstUseTime*
        name: GetFirstUseTime
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetFirstUseTime*
        name: GetFirstUseTime
      VB:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetFirstUseTime*
        name: GetFirstUseTime
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetFirstUseTime*
        name: GetFirstUseTime
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetFirstUseTime*
        name: GetFirstUseTime
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IClock.GetFirstUseTime
  ZeroFramework.Utility.IClock.GetCurrentUseTime*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.GetCurrentUseTime*
        name: GetCurrentUseTime
      VB:
      - id: ZeroFramework.Utility.IClock.GetCurrentUseTime*
        name: GetCurrentUseTime
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCurrentUseTime*
        name: GetCurrentUseTime
      VB:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCurrentUseTime*
        name: GetCurrentUseTime
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCurrentUseTime*
        name: GetCurrentUseTime
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCurrentUseTime*
        name: GetCurrentUseTime
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IClock.GetCurrentUseTime
  ZeroFramework.Utility.IClock.GetCount*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.GetCount*
        name: GetCount
      VB:
      - id: ZeroFramework.Utility.IClock.GetCount*
        name: GetCount
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCount*
        name: GetCount
      VB:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCount*
        name: GetCount
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCount*
        name: GetCount
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.GetCount*
        name: GetCount
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IClock.GetCount
  ZeroFramework.Utility.IClock.Tic*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.Tic*
        name: Tic
      VB:
      - id: ZeroFramework.Utility.IClock.Tic*
        name: Tic
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Tic*
        name: Tic
      VB:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Tic*
        name: Tic
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Tic*
        name: Tic
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Tic*
        name: Tic
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IClock.Tic
  ZeroFramework.Utility.IClock.Toc*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.Toc*
        name: Toc
      VB:
      - id: ZeroFramework.Utility.IClock.Toc*
        name: Toc
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Toc*
        name: Toc
      VB:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Toc*
        name: Toc
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Toc*
        name: Toc
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Toc*
        name: Toc
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IClock.Toc
  ZeroFramework.Utility.IClock.Reset*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.IClock.Reset*
        name: Reset
      VB:
      - id: ZeroFramework.Utility.IClock.Reset*
        name: Reset
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Reset*
        name: Reset
      VB:
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Reset*
        name: Reset
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Reset*
        name: Reset
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.IClock*
        name: IClock
      - name: .
      - id: ZeroFramework.Utility.IClock.Reset*
        name: Reset
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.IClock.Reset
  ZeroFramework.Utility.ITimestampKit.GetTimestamp*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit.GetTimestamp*
        name: GetTimestamp
      VB:
      - id: ZeroFramework.Utility.ITimestampKit.GetTimestamp*
        name: GetTimestamp
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit*
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimestamp*
        name: GetTimestamp
      VB:
      - id: ZeroFramework.Utility.ITimestampKit*
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimestamp*
        name: GetTimestamp
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit*
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimestamp*
        name: GetTimestamp
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit*
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimestamp*
        name: GetTimestamp
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ITimestampKit.GetTimestamp
  ZeroFramework.Utility.ITimestampKit.GetTimeString*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit.GetTimeString*
        name: GetTimeString
      VB:
      - id: ZeroFramework.Utility.ITimestampKit.GetTimeString*
        name: GetTimeString
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit*
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimeString*
        name: GetTimeString
      VB:
      - id: ZeroFramework.Utility.ITimestampKit*
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimeString*
        name: GetTimeString
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit*
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimeString*
        name: GetTimeString
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit*
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.GetTimeString*
        name: GetTimeString
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ITimestampKit.GetTimeString
  ZeroFramework.Utility.ITimestampKit.AllocateClock*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit.AllocateClock*
        name: AllocateClock
      VB:
      - id: ZeroFramework.Utility.ITimestampKit.AllocateClock*
        name: AllocateClock
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.ITimestampKit*
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.AllocateClock*
        name: AllocateClock
      VB:
      - id: ZeroFramework.Utility.ITimestampKit*
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.AllocateClock*
        name: AllocateClock
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit*
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.AllocateClock*
        name: AllocateClock
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit*
        name: ITimestampKit
      - name: .
      - id: ZeroFramework.Utility.ITimestampKit.AllocateClock*
        name: AllocateClock
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.ITimestampKit.AllocateClock
  ZeroFramework.Utility.Example.EventExample:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.EventExample
        name: EventExample
      VB:
      - id: ZeroFramework.Utility.Example.EventExample
        name: EventExample
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.EventExample
        name: EventExample
      VB:
      - id: ZeroFramework.Utility.Example.EventExample
        name: EventExample
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.EventExample
        name: EventExample
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.EventExample
        name: EventExample
    isDefinition: true
    commentId: T:ZeroFramework.Utility.Example.EventExample
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: System.String
        name: String
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: System.String
        name: String
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: System.String
        name: String
        isExternal: true
      - name: (
      - name: )
    isDefinition: false
  System.Collections.Generic.List{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Collections
        name: Collections
        isExternal: true
      - name: .
      - id: System.Collections.Generic
        name: Generic
        isExternal: true
      - name: .
      - id: System.Collections.Generic.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.String}
  ZeroFramework.Utility.Example.FileObjExample:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.FileObjExample
        name: FileObjExample
      VB:
      - id: ZeroFramework.Utility.Example.FileObjExample
        name: FileObjExample
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.FileObjExample
        name: FileObjExample
      VB:
      - id: ZeroFramework.Utility.Example.FileObjExample
        name: FileObjExample
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.FileObjExample
        name: FileObjExample
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.FileObjExample
        name: FileObjExample
    isDefinition: true
    commentId: T:ZeroFramework.Utility.Example.FileObjExample
  Global.Image:
    name:
      CSharp:
      - id: Global.Image
        name: Image
        isExternal: true
      VB:
      - id: Global.Image
        name: Image
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Image
        name: Image
        isExternal: true
      VB:
      - id: Global.Image
        name: Image
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Image
        name: Image
        isExternal: true
      VB:
      - id: Global.Image
        name: Image
        isExternal: true
    isDefinition: true
  ZeroFramework.Utility.Example.FileExample:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.FileExample
        name: FileExample
      VB:
      - id: ZeroFramework.Utility.Example.FileExample
        name: FileExample
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.FileExample
        name: FileExample
      VB:
      - id: ZeroFramework.Utility.Example.FileExample
        name: FileExample
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.FileExample
        name: FileExample
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.FileExample
        name: FileExample
    isDefinition: true
    commentId: T:ZeroFramework.Utility.Example.FileExample
  ZeroFramework.Utility.Example.LogExample:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.LogExample
        name: LogExample
      VB:
      - id: ZeroFramework.Utility.Example.LogExample
        name: LogExample
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.LogExample
        name: LogExample
      VB:
      - id: ZeroFramework.Utility.Example.LogExample
        name: LogExample
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.LogExample
        name: LogExample
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.LogExample
        name: LogExample
    isDefinition: true
    commentId: T:ZeroFramework.Utility.Example.LogExample
  Global.GameObject:
    name:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      VB:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      VB:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      VB:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
    isDefinition: true
  ZeroFramework.Utility.Example.PoolExample.CreateFunc*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.PoolExample.CreateFunc*
        name: CreateFunc
      VB:
      - id: ZeroFramework.Utility.Example.PoolExample.CreateFunc*
        name: CreateFunc
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.CreateFunc*
        name: CreateFunc
      VB:
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.CreateFunc*
        name: CreateFunc
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.CreateFunc*
        name: CreateFunc
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.CreateFunc*
        name: CreateFunc
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Example.PoolExample.CreateFunc
  ZeroFramework.Utility.Example.PoolExample.CreateFuncUnity*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.PoolExample.CreateFuncUnity*
        name: CreateFuncUnity
      VB:
      - id: ZeroFramework.Utility.Example.PoolExample.CreateFuncUnity*
        name: CreateFuncUnity
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.CreateFuncUnity*
        name: CreateFuncUnity
      VB:
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.CreateFuncUnity*
        name: CreateFuncUnity
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.CreateFuncUnity*
        name: CreateFuncUnity
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.CreateFuncUnity*
        name: CreateFuncUnity
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Example.PoolExample.CreateFuncUnity
  ZeroFramework.Utility.Example.PoolExample.ActionOnGet*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnGet*
        name: ActionOnGet
      VB:
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnGet*
        name: ActionOnGet
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnGet*
        name: ActionOnGet
      VB:
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnGet*
        name: ActionOnGet
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnGet*
        name: ActionOnGet
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnGet*
        name: ActionOnGet
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Example.PoolExample.ActionOnGet
  ZeroFramework.Utility.Example.PoolExample.ActionOnRelease*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnRelease*
        name: ActionOnRelease
      VB:
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnRelease*
        name: ActionOnRelease
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnRelease*
        name: ActionOnRelease
      VB:
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnRelease*
        name: ActionOnRelease
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnRelease*
        name: ActionOnRelease
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnRelease*
        name: ActionOnRelease
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Example.PoolExample.ActionOnRelease
  ZeroFramework.Utility.Example.PoolExample.ActionOnDestroy*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnDestroy*
        name: ActionOnDestroy
      VB:
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnDestroy*
        name: ActionOnDestroy
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnDestroy*
        name: ActionOnDestroy
      VB:
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnDestroy*
        name: ActionOnDestroy
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnDestroy*
        name: ActionOnDestroy
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample*
        name: PoolExample
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample.ActionOnDestroy*
        name: ActionOnDestroy
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Example.PoolExample.ActionOnDestroy
  ZeroFramework.Utility.Example.PoolExample:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.PoolExample
        name: PoolExample
      VB:
      - id: ZeroFramework.Utility.Example.PoolExample
        name: PoolExample
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.PoolExample
        name: PoolExample
      VB:
      - id: ZeroFramework.Utility.Example.PoolExample
        name: PoolExample
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample
        name: PoolExample
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.PoolExample
        name: PoolExample
    isDefinition: true
    commentId: T:ZeroFramework.Utility.Example.PoolExample
  ZeroFramework.Utility.Example.SingletonExample:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.SingletonExample
        name: SingletonExample
      VB:
      - id: ZeroFramework.Utility.Example.SingletonExample
        name: SingletonExample
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.SingletonExample
        name: SingletonExample
      VB:
      - id: ZeroFramework.Utility.Example.SingletonExample
        name: SingletonExample
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonExample
        name: SingletonExample
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonExample
        name: SingletonExample
    isDefinition: true
    commentId: T:ZeroFramework.Utility.Example.SingletonExample
  ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1
    parent: ZeroFramework
    commentId: T:ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}
  ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.mInstance:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.mInstance
        name: mInstance
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.mInstance
        name: mInstance
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.mInstance
        name: mInstance
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.mInstance
        name: mInstance
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.mInstance
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}
    commentId: F:ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.mInstance
  ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Instance:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Instance
        name: Instance
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Instance
        name: Instance
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Instance
        name: Instance
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Instance
        name: Instance
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Instance
        name: Instance
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Instance
        name: Instance
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.Instance
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}
    commentId: P:ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Instance
  ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ID:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ID
        name: ID
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ID
        name: ID
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ID
        name: ID
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ID
        name: ID
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ID
        name: ID
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ID
        name: ID
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.ID
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}
    commentId: F:ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ID
  ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnApplicationQuit:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnApplicationQuit
        name: OnApplicationQuit
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.OnApplicationQuit
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}
    commentId: M:ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnApplicationQuit
  ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ResetID:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ResetID
        name: ResetID
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ResetID
        name: ResetID
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ResetID
        name: ResetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ResetID
        name: ResetID
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.ResetID
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}
    commentId: M:ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.ResetID
  ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.GetID:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.GetID
        name: GetID
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.GetID
        name: GetID
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.GetID
        name: GetID
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.GetID
        name: GetID
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.GetID
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}
    commentId: M:ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.GetID
  ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnSingletonInit:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnSingletonInit
        name: OnSingletonInit
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.OnSingletonInit
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}
    commentId: M:ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.OnSingletonInit
  ZeroFramework.Utility.Example.SingletonMonoExample.OnSingletonInit*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.SingletonMonoExample.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework.Utility.Example.SingletonMonoExample.OnSingletonInit*
        name: OnSingletonInit
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.SingletonMonoExample*
        name: SingletonMonoExample
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework.Utility.Example.SingletonMonoExample*
        name: SingletonMonoExample
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample.OnSingletonInit*
        name: OnSingletonInit
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample*
        name: SingletonMonoExample
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample.OnSingletonInit*
        name: OnSingletonInit
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample*
        name: SingletonMonoExample
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample.OnSingletonInit*
        name: OnSingletonInit
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Example.SingletonMonoExample.OnSingletonInit
  ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Dispose:
    name:
      CSharp:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Dispose
        name: Dispose
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Dispose
        name: Dispose
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: '>'
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Dispose
        name: Dispose
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.SingletonMono`1
        name: SingletonMono
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      - name: )
      - name: .
      - id: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Dispose
        name: Dispose
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.SingletonMono`1.Dispose
    parent: ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}
    commentId: M:ZeroFramework.SingletonMono{ZeroFramework.Utility.Example.SingletonMonoExample}.Dispose
  ZeroFramework.Utility.Example.SingletonMonoExample.Dispose*:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.SingletonMonoExample.Dispose*
        name: Dispose
      VB:
      - id: ZeroFramework.Utility.Example.SingletonMonoExample.Dispose*
        name: Dispose
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.SingletonMonoExample*
        name: SingletonMonoExample
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample.Dispose*
        name: Dispose
      VB:
      - id: ZeroFramework.Utility.Example.SingletonMonoExample*
        name: SingletonMonoExample
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample.Dispose*
        name: Dispose
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample*
        name: SingletonMonoExample
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample.Dispose*
        name: Dispose
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility*
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example*
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample*
        name: SingletonMonoExample
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample.Dispose*
        name: Dispose
    isDefinition: true
    commentId: Overload:ZeroFramework.Utility.Example.SingletonMonoExample.Dispose
  ZeroFramework.Utility.Example.SingletonMonoExample:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      VB:
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      VB:
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.SingletonMonoExample
        name: SingletonMonoExample
    isDefinition: true
    commentId: T:ZeroFramework.Utility.Example.SingletonMonoExample
  ZeroFramework.Utility.Example.TimerExample:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.TimerExample
        name: TimerExample
      VB:
      - id: ZeroFramework.Utility.Example.TimerExample
        name: TimerExample
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.TimerExample
        name: TimerExample
      VB:
      - id: ZeroFramework.Utility.Example.TimerExample
        name: TimerExample
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.TimerExample
        name: TimerExample
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.TimerExample
        name: TimerExample
    isDefinition: true
    commentId: T:ZeroFramework.Utility.Example.TimerExample
  ZeroFramework.Utility.Example.TimestampExample:
    name:
      CSharp:
      - id: ZeroFramework.Utility.Example.TimestampExample
        name: TimestampExample
      VB:
      - id: ZeroFramework.Utility.Example.TimestampExample
        name: TimestampExample
    nameWithType:
      CSharp:
      - id: ZeroFramework.Utility.Example.TimestampExample
        name: TimestampExample
      VB:
      - id: ZeroFramework.Utility.Example.TimestampExample
        name: TimestampExample
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.TimestampExample
        name: TimestampExample
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      - name: .
      - id: ZeroFramework.Utility.Example.TimestampExample
        name: TimestampExample
    isDefinition: true
    commentId: T:ZeroFramework.Utility.Example.TimestampExample
  ZeroFramework.Utility.Example:
    name:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
    nameWithType:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Utility
        name: Utility
      - name: .
      - id: ZeroFramework.Utility.Example
        name: Example
    isDefinition: true
    commentId: N:ZeroFramework.Utility.Example
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}:
    name:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1
    parent: ZeroFramework
    commentId: T:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Initialized:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Initialized
        name: Initialized
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Initialized
        name: Initialized
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Initialized
        name: Initialized
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Initialized
        name: Initialized
    isDefinition: false
    definition: ZeroFramework.Architecture`1.Initialized
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: P:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Initialized
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Interface:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Interface
        name: Interface
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Interface
        name: Interface
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Interface
        name: Interface
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Interface
        name: Interface
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Interface
        name: Interface
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Interface
        name: Interface
    isDefinition: false
    definition: ZeroFramework.Architecture`1.Interface
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: P:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Interface
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Deinit:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Deinit
        name: Deinit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Deinit
        name: Deinit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Deinit
        name: Deinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Deinit
        name: Deinit
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.Deinit
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Deinit
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.OnDeinit:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.OnDeinit
        name: OnDeinit
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.OnDeinit
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.OnDeinit
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1({TSystem}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: TSystem
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: TSystem
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: TSystem
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: TSystem
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: TSystem
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(``0)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: TSystem
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterSystem``1(``0)
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(``0)
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
        name: RegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterSystem``1(ZeroFramework.IZeroFactory)
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterSystem``1(ZeroFramework.IZeroFactory)
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1({TModel}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: TModel
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: TModel
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: TModel
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: TModel
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(``0)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: TModel
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(``0)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: TModel
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterModel``1(``0)
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(``0)
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
        name: RegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterModel``1(ZeroFramework.IZeroFactory)
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterModel``1(ZeroFramework.IZeroFactory)
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1({TUtility}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: TUtility
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: TUtility
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: TUtility
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: TUtility
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: TUtility
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(``0)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: TUtility
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterUtility``1(``0)
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(``0)
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
        name: RegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IZeroFactory
        name: IZeroFactory
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterUtility``1(ZeroFramework.IZeroFactory)
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterUtility``1(ZeroFramework.IZeroFactory)
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterSystem``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterSystem``1
        name: UnRegisterSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.UnRegisterSystem``1
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterSystem``1
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterModel``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterModel``1
        name: UnRegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterModel``1
        name: UnRegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterModel``1
        name: UnRegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterModel``1
        name: UnRegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterModel``1
        name: UnRegisterModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterModel``1
        name: UnRegisterModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.UnRegisterModel``1
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterModel``1
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterUtility``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterUtility``1
        name: UnRegisterUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.UnRegisterUtility``1
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterUtility``1
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetSystem``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetSystem``1
        name: GetSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetSystem``1
        name: GetSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetSystem``1
        name: GetSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetSystem``1
        name: GetSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetSystem``1
        name: GetSystem
      - name: <
      - name: TSystem
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetSystem``1
        name: GetSystem
      - name: (
      - name: Of
      - name: " "
      - name: TSystem
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.GetSystem``1
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetSystem``1
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetModel``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetModel``1
        name: GetModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetModel``1
        name: GetModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetModel``1
        name: GetModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetModel``1
        name: GetModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetModel``1
        name: GetModel
      - name: <
      - name: TModel
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetModel``1
        name: GetModel
      - name: (
      - name: Of
      - name: " "
      - name: TModel
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.GetModel``1
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetModel``1
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetUtility``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetUtility``1
        name: GetUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetUtility``1
        name: GetUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetUtility``1
        name: GetUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetUtility``1
        name: GetUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetUtility``1
        name: GetUtility
      - name: <
      - name: TUtility
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetUtility``1
        name: GetUtility
      - name: (
      - name: Of
      - name: " "
      - name: TUtility
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.GetUtility``1
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.GetUtility``1
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(ZeroFramework.ICommand{{TResult}}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.SendCommand``1(ZeroFramework.ICommand{``0})
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(ZeroFramework.ICommand{``0})
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1({TCommand}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: TCommand
      - name: '>'
      - name: (
      - name: TCommand
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TCommand
      - name: )
      - name: (
      - name: TCommand
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: TCommand
      - name: '>'
      - name: (
      - name: TCommand
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TCommand
      - name: )
      - name: (
      - name: TCommand
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(``0)
        name: SendCommand
      - name: <
      - name: TCommand
      - name: '>'
      - name: (
      - name: TCommand
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(``0)
        name: SendCommand
      - name: (
      - name: Of
      - name: " "
      - name: TCommand
      - name: )
      - name: (
      - name: TCommand
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.SendCommand``1(``0)
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendCommand``1(``0)
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{{TResult}}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
        name: ExecuteCommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand`1
        name: ICommand
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.ExecuteCommand``1(ZeroFramework.ICommand{``0})
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand``1(ZeroFramework.ICommand{``0})
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand(ZeroFramework.ICommand):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
        name: ExecuteCommand
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.ICommand
        name: ICommand
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.ExecuteCommand(ZeroFramework.ICommand)
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.ExecuteCommand(ZeroFramework.ICommand)
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendQuery``1(ZeroFramework.IQuery{{TResult}}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
        name: SendQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.SendQuery``1(ZeroFramework.IQuery{``0})
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendQuery``1(ZeroFramework.IQuery{``0})
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.DoQuery``1(ZeroFramework.IQuery{{TResult}}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: <
      - name: TResult
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
        name: DoQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.IQuery`1
        name: IQuery
      - name: (
      - name: Of
      - name: " "
      - name: TResult
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.DoQuery``1(ZeroFramework.IQuery{``0})
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.DoQuery``1(ZeroFramework.IQuery{``0})
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.SendEvent``1
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1({TEvent}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: TEvent
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: TEvent
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: TEvent
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: TEvent
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1(``0)
        name: SendEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: TEvent
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1(``0)
        name: SendEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: TEvent
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.SendEvent``1(``0)
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.SendEvent``1(``0)
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterEvent``1(Action{{TEvent}}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterEvent``1(Action{``0})
        name: RegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.RegisterEvent``1(Action{``0})
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.RegisterEvent``1(Action{``0})
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1(Action{{TEvent}}):
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: TEvent
      - name: '>'
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1(Action{``0})
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - id: Global.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.UnRegisterEvent``1(Action{``0})
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1(Action{``0})
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: <
      - name: TEvent
      - name: '>'
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1
        name: UnRegisterEvent
      - name: (
      - name: Of
      - name: " "
      - name: TEvent
      - name: )
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.UnRegisterEvent``1
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.UnRegisterEvent``1
  ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Init:
    name:
      CSharp:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Init
        name: Init
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Init
        name: Init
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Init
        name: Init
      - name: (
      - name: )
      VB:
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Init
        name: Init
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: <
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: '>'
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Init
        name: Init
      - name: (
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Architecture`1
        name: Architecture
      - name: (
      - name: Of
      - name: " "
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      - name: )
      - name: .
      - id: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Init
        name: Init
      - name: (
      - name: )
    isDefinition: false
    definition: ZeroFramework.Architecture`1.Init
    parent: ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}
    commentId: M:ZeroFramework.Architecture{ZeroFramework.Editor.ZeroEditorArchitecture}.Init
  ZeroFramework.Editor.ZeroEditorArchitecture.Init*:
    name:
      CSharp:
      - id: ZeroFramework.Editor.ZeroEditorArchitecture.Init*
        name: Init
      VB:
      - id: ZeroFramework.Editor.ZeroEditorArchitecture.Init*
        name: Init
    nameWithType:
      CSharp:
      - id: ZeroFramework.Editor.ZeroEditorArchitecture*
        name: ZeroEditorArchitecture
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture.Init*
        name: Init
      VB:
      - id: ZeroFramework.Editor.ZeroEditorArchitecture*
        name: ZeroEditorArchitecture
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture.Init*
        name: Init
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor*
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture*
        name: ZeroEditorArchitecture
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture.Init*
        name: Init
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor*
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture*
        name: ZeroEditorArchitecture
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture.Init*
        name: Init
    isDefinition: true
    commentId: Overload:ZeroFramework.Editor.ZeroEditorArchitecture.Init
  ZeroFramework.Editor.ZeroEditorArchitecture:
    name:
      CSharp:
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      VB:
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
    nameWithType:
      CSharp:
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      VB:
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroEditorArchitecture
        name: ZeroEditorArchitecture
    isDefinition: true
    commentId: T:ZeroFramework.Editor.ZeroEditorArchitecture
  ZeroFramework.Editor.ZeroMenuEditorWindow:
    name:
      CSharp:
      - id: ZeroFramework.Editor.ZeroMenuEditorWindow
        name: ZeroMenuEditorWindow
      VB:
      - id: ZeroFramework.Editor.ZeroMenuEditorWindow
        name: ZeroMenuEditorWindow
    nameWithType:
      CSharp:
      - id: ZeroFramework.Editor.ZeroMenuEditorWindow
        name: ZeroMenuEditorWindow
      VB:
      - id: ZeroFramework.Editor.ZeroMenuEditorWindow
        name: ZeroMenuEditorWindow
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroMenuEditorWindow
        name: ZeroMenuEditorWindow
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      - name: .
      - id: ZeroFramework.Editor.ZeroMenuEditorWindow
        name: ZeroMenuEditorWindow
    isDefinition: true
    commentId: T:ZeroFramework.Editor.ZeroMenuEditorWindow
  ZeroFramework.Editor:
    name:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
    nameWithType:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Editor
        name: Editor
    isDefinition: true
    commentId: N:ZeroFramework.Editor
  Global.Node:
    name:
      CSharp:
      - id: Global.Node
        name: Node
        isExternal: true
      VB:
      - id: Global.Node
        name: Node
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Node
        name: Node
        isExternal: true
      VB:
      - id: Global.Node
        name: Node
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Node
        name: Node
        isExternal: true
      VB:
      - id: Global.Node
        name: Node
        isExternal: true
    isDefinition: true
  ZeroFramework.Core.BranchDialogue.OnUpdate*:
    name:
      CSharp:
      - id: ZeroFramework.Core.BranchDialogue.OnUpdate*
        name: OnUpdate
      VB:
      - id: ZeroFramework.Core.BranchDialogue.OnUpdate*
        name: OnUpdate
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.BranchDialogue*
        name: BranchDialogue
      - name: .
      - id: ZeroFramework.Core.BranchDialogue.OnUpdate*
        name: OnUpdate
      VB:
      - id: ZeroFramework.Core.BranchDialogue*
        name: BranchDialogue
      - name: .
      - id: ZeroFramework.Core.BranchDialogue.OnUpdate*
        name: OnUpdate
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.BranchDialogue*
        name: BranchDialogue
      - name: .
      - id: ZeroFramework.Core.BranchDialogue.OnUpdate*
        name: OnUpdate
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.BranchDialogue*
        name: BranchDialogue
      - name: .
      - id: ZeroFramework.Core.BranchDialogue.OnUpdate*
        name: OnUpdate
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.BranchDialogue.OnUpdate
  ZeroFramework.Core.BranchDialogue.OnStart*:
    name:
      CSharp:
      - id: ZeroFramework.Core.BranchDialogue.OnStart*
        name: OnStart
      VB:
      - id: ZeroFramework.Core.BranchDialogue.OnStart*
        name: OnStart
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.BranchDialogue*
        name: BranchDialogue
      - name: .
      - id: ZeroFramework.Core.BranchDialogue.OnStart*
        name: OnStart
      VB:
      - id: ZeroFramework.Core.BranchDialogue*
        name: BranchDialogue
      - name: .
      - id: ZeroFramework.Core.BranchDialogue.OnStart*
        name: OnStart
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.BranchDialogue*
        name: BranchDialogue
      - name: .
      - id: ZeroFramework.Core.BranchDialogue.OnStart*
        name: OnStart
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.BranchDialogue*
        name: BranchDialogue
      - name: .
      - id: ZeroFramework.Core.BranchDialogue.OnStart*
        name: OnStart
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.BranchDialogue.OnStart
  ZeroFramework.Core.BranchDialogue.OnStop*:
    name:
      CSharp:
      - id: ZeroFramework.Core.BranchDialogue.OnStop*
        name: OnStop
      VB:
      - id: ZeroFramework.Core.BranchDialogue.OnStop*
        name: OnStop
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.BranchDialogue*
        name: BranchDialogue
      - name: .
      - id: ZeroFramework.Core.BranchDialogue.OnStop*
        name: OnStop
      VB:
      - id: ZeroFramework.Core.BranchDialogue*
        name: BranchDialogue
      - name: .
      - id: ZeroFramework.Core.BranchDialogue.OnStop*
        name: OnStop
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.BranchDialogue*
        name: BranchDialogue
      - name: .
      - id: ZeroFramework.Core.BranchDialogue.OnStop*
        name: OnStop
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.BranchDialogue*
        name: BranchDialogue
      - name: .
      - id: ZeroFramework.Core.BranchDialogue.OnStop*
        name: OnStop
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.BranchDialogue.OnStop
  ZeroFramework.Core.BranchDialogue:
    name:
      CSharp:
      - id: ZeroFramework.Core.BranchDialogue
        name: BranchDialogue
      VB:
      - id: ZeroFramework.Core.BranchDialogue
        name: BranchDialogue
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.BranchDialogue
        name: BranchDialogue
      VB:
      - id: ZeroFramework.Core.BranchDialogue
        name: BranchDialogue
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.BranchDialogue
        name: BranchDialogue
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.BranchDialogue
        name: BranchDialogue
    isDefinition: true
    commentId: T:ZeroFramework.Core.BranchDialogue
  ZeroFramework.Core.DialogueTree.Update*:
    name:
      CSharp:
      - id: ZeroFramework.Core.DialogueTree.Update*
        name: Update
      VB:
      - id: ZeroFramework.Core.DialogueTree.Update*
        name: Update
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.DialogueTree*
        name: DialogueTree
      - name: .
      - id: ZeroFramework.Core.DialogueTree.Update*
        name: Update
      VB:
      - id: ZeroFramework.Core.DialogueTree*
        name: DialogueTree
      - name: .
      - id: ZeroFramework.Core.DialogueTree.Update*
        name: Update
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.DialogueTree*
        name: DialogueTree
      - name: .
      - id: ZeroFramework.Core.DialogueTree.Update*
        name: Update
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.DialogueTree*
        name: DialogueTree
      - name: .
      - id: ZeroFramework.Core.DialogueTree.Update*
        name: Update
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.DialogueTree.Update
  ZeroFramework.Core.DialogueTree.TreeStart*:
    name:
      CSharp:
      - id: ZeroFramework.Core.DialogueTree.TreeStart*
        name: TreeStart
      VB:
      - id: ZeroFramework.Core.DialogueTree.TreeStart*
        name: TreeStart
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.DialogueTree*
        name: DialogueTree
      - name: .
      - id: ZeroFramework.Core.DialogueTree.TreeStart*
        name: TreeStart
      VB:
      - id: ZeroFramework.Core.DialogueTree*
        name: DialogueTree
      - name: .
      - id: ZeroFramework.Core.DialogueTree.TreeStart*
        name: TreeStart
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.DialogueTree*
        name: DialogueTree
      - name: .
      - id: ZeroFramework.Core.DialogueTree.TreeStart*
        name: TreeStart
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.DialogueTree*
        name: DialogueTree
      - name: .
      - id: ZeroFramework.Core.DialogueTree.TreeStart*
        name: TreeStart
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.DialogueTree.TreeStart
  ZeroFramework.Core.DialogueTree.TreeEnd*:
    name:
      CSharp:
      - id: ZeroFramework.Core.DialogueTree.TreeEnd*
        name: TreeEnd
      VB:
      - id: ZeroFramework.Core.DialogueTree.TreeEnd*
        name: TreeEnd
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.DialogueTree*
        name: DialogueTree
      - name: .
      - id: ZeroFramework.Core.DialogueTree.TreeEnd*
        name: TreeEnd
      VB:
      - id: ZeroFramework.Core.DialogueTree*
        name: DialogueTree
      - name: .
      - id: ZeroFramework.Core.DialogueTree.TreeEnd*
        name: TreeEnd
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.DialogueTree*
        name: DialogueTree
      - name: .
      - id: ZeroFramework.Core.DialogueTree.TreeEnd*
        name: TreeEnd
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.DialogueTree*
        name: DialogueTree
      - name: .
      - id: ZeroFramework.Core.DialogueTree.TreeEnd*
        name: TreeEnd
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.DialogueTree.TreeEnd
  ZeroFramework.Core.DialogueTree:
    name:
      CSharp:
      - id: ZeroFramework.Core.DialogueTree
        name: DialogueTree
      VB:
      - id: ZeroFramework.Core.DialogueTree
        name: DialogueTree
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.DialogueTree
        name: DialogueTree
      VB:
      - id: ZeroFramework.Core.DialogueTree
        name: DialogueTree
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.DialogueTree
        name: DialogueTree
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.DialogueTree
        name: DialogueTree
    isDefinition: true
    commentId: T:ZeroFramework.Core.DialogueTree
  ZeroFramework.Core.SingleDialogue.OnUpdate*:
    name:
      CSharp:
      - id: ZeroFramework.Core.SingleDialogue.OnUpdate*
        name: OnUpdate
      VB:
      - id: ZeroFramework.Core.SingleDialogue.OnUpdate*
        name: OnUpdate
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.SingleDialogue*
        name: SingleDialogue
      - name: .
      - id: ZeroFramework.Core.SingleDialogue.OnUpdate*
        name: OnUpdate
      VB:
      - id: ZeroFramework.Core.SingleDialogue*
        name: SingleDialogue
      - name: .
      - id: ZeroFramework.Core.SingleDialogue.OnUpdate*
        name: OnUpdate
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.SingleDialogue*
        name: SingleDialogue
      - name: .
      - id: ZeroFramework.Core.SingleDialogue.OnUpdate*
        name: OnUpdate
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.SingleDialogue*
        name: SingleDialogue
      - name: .
      - id: ZeroFramework.Core.SingleDialogue.OnUpdate*
        name: OnUpdate
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.SingleDialogue.OnUpdate
  ZeroFramework.Core.SingleDialogue.OnStart*:
    name:
      CSharp:
      - id: ZeroFramework.Core.SingleDialogue.OnStart*
        name: OnStart
      VB:
      - id: ZeroFramework.Core.SingleDialogue.OnStart*
        name: OnStart
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.SingleDialogue*
        name: SingleDialogue
      - name: .
      - id: ZeroFramework.Core.SingleDialogue.OnStart*
        name: OnStart
      VB:
      - id: ZeroFramework.Core.SingleDialogue*
        name: SingleDialogue
      - name: .
      - id: ZeroFramework.Core.SingleDialogue.OnStart*
        name: OnStart
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.SingleDialogue*
        name: SingleDialogue
      - name: .
      - id: ZeroFramework.Core.SingleDialogue.OnStart*
        name: OnStart
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.SingleDialogue*
        name: SingleDialogue
      - name: .
      - id: ZeroFramework.Core.SingleDialogue.OnStart*
        name: OnStart
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.SingleDialogue.OnStart
  ZeroFramework.Core.SingleDialogue.OnStop*:
    name:
      CSharp:
      - id: ZeroFramework.Core.SingleDialogue.OnStop*
        name: OnStop
      VB:
      - id: ZeroFramework.Core.SingleDialogue.OnStop*
        name: OnStop
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.SingleDialogue*
        name: SingleDialogue
      - name: .
      - id: ZeroFramework.Core.SingleDialogue.OnStop*
        name: OnStop
      VB:
      - id: ZeroFramework.Core.SingleDialogue*
        name: SingleDialogue
      - name: .
      - id: ZeroFramework.Core.SingleDialogue.OnStop*
        name: OnStop
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.SingleDialogue*
        name: SingleDialogue
      - name: .
      - id: ZeroFramework.Core.SingleDialogue.OnStop*
        name: OnStop
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.SingleDialogue*
        name: SingleDialogue
      - name: .
      - id: ZeroFramework.Core.SingleDialogue.OnStop*
        name: OnStop
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.SingleDialogue.OnStop
  ZeroFramework.Core.SingleDialogue:
    name:
      CSharp:
      - id: ZeroFramework.Core.SingleDialogue
        name: SingleDialogue
      VB:
      - id: ZeroFramework.Core.SingleDialogue
        name: SingleDialogue
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.SingleDialogue
        name: SingleDialogue
      VB:
      - id: ZeroFramework.Core.SingleDialogue
        name: SingleDialogue
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.SingleDialogue
        name: SingleDialogue
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.SingleDialogue
        name: SingleDialogue
    isDefinition: true
    commentId: T:ZeroFramework.Core.SingleDialogue
  ZeroFramework.Core:
    name:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
    nameWithType:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
    isDefinition: true
    commentId: N:ZeroFramework.Core
  ZeroFramework.Core.ResMethodType:
    name:
      CSharp:
      - id: ZeroFramework.Core.ResMethodType
        name: ResMethodType
      VB:
      - id: ZeroFramework.Core.ResMethodType
        name: ResMethodType
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.ResMethodType
        name: ResMethodType
      VB:
      - id: ZeroFramework.Core.ResMethodType
        name: ResMethodType
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResMethodType
        name: ResMethodType
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResMethodType
        name: ResMethodType
    isDefinition: true
    parent: ZeroFramework.Core
    commentId: T:ZeroFramework.Core.ResMethodType
  ZeroFramework.Core.ResSearchKey:
    name:
      CSharp:
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      VB:
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      VB:
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
    isDefinition: true
    parent: ZeroFramework.Core
    commentId: T:ZeroFramework.Core.ResSearchKey
  ZeroFramework.Core.IResLoaderCreator:
    name:
      CSharp:
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
      VB:
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
      VB:
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
    isDefinition: true
    parent: ZeroFramework.Core
    commentId: T:ZeroFramework.Core.IResLoaderCreator
  ZeroFramework.Core.ResourcesLoaderCreator.Match*:
    name:
      CSharp:
      - id: ZeroFramework.Core.ResourcesLoaderCreator.Match*
        name: Match
      VB:
      - id: ZeroFramework.Core.ResourcesLoaderCreator.Match*
        name: Match
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.ResourcesLoaderCreator*
        name: ResourcesLoaderCreator
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator.Match*
        name: Match
      VB:
      - id: ZeroFramework.Core.ResourcesLoaderCreator*
        name: ResourcesLoaderCreator
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator.Match*
        name: Match
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator*
        name: ResourcesLoaderCreator
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator.Match*
        name: Match
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator*
        name: ResourcesLoaderCreator
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator.Match*
        name: Match
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.ResourcesLoaderCreator.Match
  ZeroFramework.Core.IResLoaderCreator.Match(ZeroFramework.Core.ResSearchKey):
    name:
      CSharp:
      - id: ZeroFramework.Core.IResLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
        name: Match
      - name: (
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      - name: )
      VB:
      - id: ZeroFramework.Core.IResLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
        name: Match
      - name: (
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
        name: Match
      - name: (
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      - name: )
      VB:
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
        name: Match
      - name: (
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
        name: Match
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
        name: Match
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      - name: )
    isDefinition: true
    parent: ZeroFramework.Core.IResLoaderCreator
    commentId: M:ZeroFramework.Core.IResLoaderCreator.Match(ZeroFramework.Core.ResSearchKey)
  ZeroFramework.Core.ResourcesLoaderCreator.Create*:
    name:
      CSharp:
      - id: ZeroFramework.Core.ResourcesLoaderCreator.Create*
        name: Create
      VB:
      - id: ZeroFramework.Core.ResourcesLoaderCreator.Create*
        name: Create
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.ResourcesLoaderCreator*
        name: ResourcesLoaderCreator
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator.Create*
        name: Create
      VB:
      - id: ZeroFramework.Core.ResourcesLoaderCreator*
        name: ResourcesLoaderCreator
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator.Create*
        name: Create
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator*
        name: ResourcesLoaderCreator
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator.Create*
        name: Create
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator*
        name: ResourcesLoaderCreator
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator.Create*
        name: Create
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.ResourcesLoaderCreator.Create
  ZeroFramework.Core.IResLoaderCreator.Create(ZeroFramework.Core.ResSearchKey):
    name:
      CSharp:
      - id: ZeroFramework.Core.IResLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
        name: Create
      - name: (
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      - name: )
      VB:
      - id: ZeroFramework.Core.IResLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
        name: Create
      - name: (
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      - name: )
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
        name: Create
      - name: (
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      - name: )
      VB:
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
        name: Create
      - name: (
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      - name: )
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
        name: Create
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      - name: )
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
        name: Create
      - name: (
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResSearchKey
        name: ResSearchKey
      - name: )
    isDefinition: true
    parent: ZeroFramework.Core.IResLoaderCreator
    commentId: M:ZeroFramework.Core.IResLoaderCreator.Create(ZeroFramework.Core.ResSearchKey)
  ZeroFramework.Core.ResourcesLoaderCreator:
    name:
      CSharp:
      - id: ZeroFramework.Core.ResourcesLoaderCreator
        name: ResourcesLoaderCreator
      VB:
      - id: ZeroFramework.Core.ResourcesLoaderCreator
        name: ResourcesLoaderCreator
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.ResourcesLoaderCreator
        name: ResourcesLoaderCreator
      VB:
      - id: ZeroFramework.Core.ResourcesLoaderCreator
        name: ResourcesLoaderCreator
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator
        name: ResourcesLoaderCreator
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.ResourcesLoaderCreator
        name: ResourcesLoaderCreator
    isDefinition: true
    commentId: T:ZeroFramework.Core.ResourcesLoaderCreator
  ZeroFramework.Core.IResLoader.LoadSync*:
    name:
      CSharp:
      - id: ZeroFramework.Core.IResLoader.LoadSync*
        name: LoadSync
      VB:
      - id: ZeroFramework.Core.IResLoader.LoadSync*
        name: LoadSync
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.IResLoader*
        name: IResLoader
      - name: .
      - id: ZeroFramework.Core.IResLoader.LoadSync*
        name: LoadSync
      VB:
      - id: ZeroFramework.Core.IResLoader*
        name: IResLoader
      - name: .
      - id: ZeroFramework.Core.IResLoader.LoadSync*
        name: LoadSync
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoader*
        name: IResLoader
      - name: .
      - id: ZeroFramework.Core.IResLoader.LoadSync*
        name: LoadSync
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoader*
        name: IResLoader
      - name: .
      - id: ZeroFramework.Core.IResLoader.LoadSync*
        name: LoadSync
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.IResLoader.LoadSync
  ZeroFramework.Core.IResLoader.LoadAsync*:
    name:
      CSharp:
      - id: ZeroFramework.Core.IResLoader.LoadAsync*
        name: LoadAsync
      VB:
      - id: ZeroFramework.Core.IResLoader.LoadAsync*
        name: LoadAsync
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.IResLoader*
        name: IResLoader
      - name: .
      - id: ZeroFramework.Core.IResLoader.LoadAsync*
        name: LoadAsync
      VB:
      - id: ZeroFramework.Core.IResLoader*
        name: IResLoader
      - name: .
      - id: ZeroFramework.Core.IResLoader.LoadAsync*
        name: LoadAsync
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoader*
        name: IResLoader
      - name: .
      - id: ZeroFramework.Core.IResLoader.LoadAsync*
        name: LoadAsync
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoader*
        name: IResLoader
      - name: .
      - id: ZeroFramework.Core.IResLoader.LoadAsync*
        name: LoadAsync
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.IResLoader.LoadAsync
  ZeroFramework.Core.IResLoader:
    name:
      CSharp:
      - id: ZeroFramework.Core.IResLoader
        name: IResLoader
      VB:
      - id: ZeroFramework.Core.IResLoader
        name: IResLoader
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.IResLoader
        name: IResLoader
      VB:
      - id: ZeroFramework.Core.IResLoader
        name: IResLoader
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoader
        name: IResLoader
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoader
        name: IResLoader
    isDefinition: true
    commentId: T:ZeroFramework.Core.IResLoader
  ZeroFramework.Core.IResLoaderCreator.Match*:
    name:
      CSharp:
      - id: ZeroFramework.Core.IResLoaderCreator.Match*
        name: Match
      VB:
      - id: ZeroFramework.Core.IResLoaderCreator.Match*
        name: Match
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.IResLoaderCreator*
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Match*
        name: Match
      VB:
      - id: ZeroFramework.Core.IResLoaderCreator*
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Match*
        name: Match
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator*
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Match*
        name: Match
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator*
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Match*
        name: Match
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.IResLoaderCreator.Match
  ZeroFramework.Core.IResLoaderCreator.Create*:
    name:
      CSharp:
      - id: ZeroFramework.Core.IResLoaderCreator.Create*
        name: Create
      VB:
      - id: ZeroFramework.Core.IResLoaderCreator.Create*
        name: Create
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.IResLoaderCreator*
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Create*
        name: Create
      VB:
      - id: ZeroFramework.Core.IResLoaderCreator*
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Create*
        name: Create
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator*
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Create*
        name: Create
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator*
        name: IResLoaderCreator
      - name: .
      - id: ZeroFramework.Core.IResLoaderCreator.Create*
        name: Create
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.IResLoaderCreator.Create
  ZeroFramework.Core.IResSystem.AllocateSearchKey*:
    name:
      CSharp:
      - id: ZeroFramework.Core.IResSystem.AllocateSearchKey*
        name: AllocateSearchKey
      VB:
      - id: ZeroFramework.Core.IResSystem.AllocateSearchKey*
        name: AllocateSearchKey
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.IResSystem*
        name: IResSystem
      - name: .
      - id: ZeroFramework.Core.IResSystem.AllocateSearchKey*
        name: AllocateSearchKey
      VB:
      - id: ZeroFramework.Core.IResSystem*
        name: IResSystem
      - name: .
      - id: ZeroFramework.Core.IResSystem.AllocateSearchKey*
        name: AllocateSearchKey
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResSystem*
        name: IResSystem
      - name: .
      - id: ZeroFramework.Core.IResSystem.AllocateSearchKey*
        name: AllocateSearchKey
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResSystem*
        name: IResSystem
      - name: .
      - id: ZeroFramework.Core.IResSystem.AllocateSearchKey*
        name: AllocateSearchKey
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.IResSystem.AllocateSearchKey
  ZeroFramework.Core.IResSystem.AddLoadQueue*:
    name:
      CSharp:
      - id: ZeroFramework.Core.IResSystem.AddLoadQueue*
        name: AddLoadQueue
      VB:
      - id: ZeroFramework.Core.IResSystem.AddLoadQueue*
        name: AddLoadQueue
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.IResSystem*
        name: IResSystem
      - name: .
      - id: ZeroFramework.Core.IResSystem.AddLoadQueue*
        name: AddLoadQueue
      VB:
      - id: ZeroFramework.Core.IResSystem*
        name: IResSystem
      - name: .
      - id: ZeroFramework.Core.IResSystem.AddLoadQueue*
        name: AddLoadQueue
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResSystem*
        name: IResSystem
      - name: .
      - id: ZeroFramework.Core.IResSystem.AddLoadQueue*
        name: AddLoadQueue
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResSystem*
        name: IResSystem
      - name: .
      - id: ZeroFramework.Core.IResSystem.AddLoadQueue*
        name: AddLoadQueue
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.IResSystem.AddLoadQueue
  Global.Func{System.Single}:
    name:
      CSharp:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - id: System.Single
        name: float
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - id: System.Single
        name: float
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: <
      - id: System.Single
        name: float
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Func`1
        name: Func
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.Func`1
    commentId: '!:Global.Func{System.Single}'
  ZeroFramework.Core.IResSystem.LoadQueueAsync*:
    name:
      CSharp:
      - id: ZeroFramework.Core.IResSystem.LoadQueueAsync*
        name: LoadQueueAsync
      VB:
      - id: ZeroFramework.Core.IResSystem.LoadQueueAsync*
        name: LoadQueueAsync
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.IResSystem*
        name: IResSystem
      - name: .
      - id: ZeroFramework.Core.IResSystem.LoadQueueAsync*
        name: LoadQueueAsync
      VB:
      - id: ZeroFramework.Core.IResSystem*
        name: IResSystem
      - name: .
      - id: ZeroFramework.Core.IResSystem.LoadQueueAsync*
        name: LoadQueueAsync
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResSystem*
        name: IResSystem
      - name: .
      - id: ZeroFramework.Core.IResSystem.LoadQueueAsync*
        name: LoadQueueAsync
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core*
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResSystem*
        name: IResSystem
      - name: .
      - id: ZeroFramework.Core.IResSystem.LoadQueueAsync*
        name: LoadQueueAsync
    isDefinition: true
    commentId: Overload:ZeroFramework.Core.IResSystem.LoadQueueAsync
  ZeroFramework.Core.IResSystem:
    name:
      CSharp:
      - id: ZeroFramework.Core.IResSystem
        name: IResSystem
      VB:
      - id: ZeroFramework.Core.IResSystem
        name: IResSystem
    nameWithType:
      CSharp:
      - id: ZeroFramework.Core.IResSystem
        name: IResSystem
      VB:
      - id: ZeroFramework.Core.IResSystem
        name: IResSystem
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResSystem
        name: IResSystem
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Core
        name: Core
      - name: .
      - id: ZeroFramework.Core.IResSystem
        name: IResSystem
    isDefinition: true
    commentId: T:ZeroFramework.Core.IResSystem
  Global.UniTaskVoid:
    name:
      CSharp:
      - id: Global.UniTaskVoid
        name: UniTaskVoid
        isExternal: true
      VB:
      - id: Global.UniTaskVoid
        name: UniTaskVoid
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.UniTaskVoid
        name: UniTaskVoid
        isExternal: true
      VB:
      - id: Global.UniTaskVoid
        name: UniTaskVoid
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.UniTaskVoid
        name: UniTaskVoid
        isExternal: true
      VB:
      - id: Global.UniTaskVoid
        name: UniTaskVoid
        isExternal: true
    isDefinition: true
  Global.ImageTool:
    name:
      CSharp:
      - id: Global.ImageTool
        name: ImageTool
        isExternal: true
      VB:
      - id: Global.ImageTool
        name: ImageTool
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.ImageTool
        name: ImageTool
        isExternal: true
      VB:
      - id: Global.ImageTool
        name: ImageTool
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.ImageTool
        name: ImageTool
        isExternal: true
      VB:
      - id: Global.ImageTool
        name: ImageTool
        isExternal: true
    isDefinition: true
  ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask*:
    name:
      CSharp:
      - id: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask*
        name: ReadFromUriByUniTask
      VB:
      - id: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask*
        name: ReadFromUriByUniTask
    nameWithType:
      CSharp:
      - id: ZeroFramework.Extension.UniTaskExtension*
        name: UniTaskExtension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask*
        name: ReadFromUriByUniTask
      VB:
      - id: ZeroFramework.Extension.UniTaskExtension*
        name: UniTaskExtension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask*
        name: ReadFromUriByUniTask
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension*
        name: Extension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension*
        name: UniTaskExtension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask*
        name: ReadFromUriByUniTask
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension*
        name: Extension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension*
        name: UniTaskExtension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask*
        name: ReadFromUriByUniTask
    isDefinition: true
    commentId: Overload:ZeroFramework.Extension.UniTaskExtension.ReadFromUriByUniTask
  Global.TextTool:
    name:
      CSharp:
      - id: Global.TextTool
        name: TextTool
        isExternal: true
      VB:
      - id: Global.TextTool
        name: TextTool
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.TextTool
        name: TextTool
        isExternal: true
      VB:
      - id: Global.TextTool
        name: TextTool
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.TextTool
        name: TextTool
        isExternal: true
      VB:
      - id: Global.TextTool
        name: TextTool
        isExternal: true
    isDefinition: true
  ZeroFramework.Extension.UniTaskExtension.ReadAsyncByUniTask*:
    name:
      CSharp:
      - id: ZeroFramework.Extension.UniTaskExtension.ReadAsyncByUniTask*
        name: ReadAsyncByUniTask
      VB:
      - id: ZeroFramework.Extension.UniTaskExtension.ReadAsyncByUniTask*
        name: ReadAsyncByUniTask
    nameWithType:
      CSharp:
      - id: ZeroFramework.Extension.UniTaskExtension*
        name: UniTaskExtension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension.ReadAsyncByUniTask*
        name: ReadAsyncByUniTask
      VB:
      - id: ZeroFramework.Extension.UniTaskExtension*
        name: UniTaskExtension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension.ReadAsyncByUniTask*
        name: ReadAsyncByUniTask
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension*
        name: Extension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension*
        name: UniTaskExtension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension.ReadAsyncByUniTask*
        name: ReadAsyncByUniTask
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension*
        name: Extension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension*
        name: UniTaskExtension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension.ReadAsyncByUniTask*
        name: ReadAsyncByUniTask
    isDefinition: true
    commentId: Overload:ZeroFramework.Extension.UniTaskExtension.ReadAsyncByUniTask
  ZeroFramework.Extension.UniTaskExtension.WriteAsyncByUniTask*:
    name:
      CSharp:
      - id: ZeroFramework.Extension.UniTaskExtension.WriteAsyncByUniTask*
        name: WriteAsyncByUniTask
      VB:
      - id: ZeroFramework.Extension.UniTaskExtension.WriteAsyncByUniTask*
        name: WriteAsyncByUniTask
    nameWithType:
      CSharp:
      - id: ZeroFramework.Extension.UniTaskExtension*
        name: UniTaskExtension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension.WriteAsyncByUniTask*
        name: WriteAsyncByUniTask
      VB:
      - id: ZeroFramework.Extension.UniTaskExtension*
        name: UniTaskExtension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension.WriteAsyncByUniTask*
        name: WriteAsyncByUniTask
    qualifiedName:
      CSharp:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension*
        name: Extension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension*
        name: UniTaskExtension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension.WriteAsyncByUniTask*
        name: WriteAsyncByUniTask
      VB:
      - id: ZeroFramework*
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension*
        name: Extension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension*
        name: UniTaskExtension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension.WriteAsyncByUniTask*
        name: WriteAsyncByUniTask
    isDefinition: true
    commentId: Overload:ZeroFramework.Extension.UniTaskExtension.WriteAsyncByUniTask
  ZeroFramework.Extension.UniTaskExtension:
    name:
      CSharp:
      - id: ZeroFramework.Extension.UniTaskExtension
        name: UniTaskExtension
      VB:
      - id: ZeroFramework.Extension.UniTaskExtension
        name: UniTaskExtension
    nameWithType:
      CSharp:
      - id: ZeroFramework.Extension.UniTaskExtension
        name: UniTaskExtension
      VB:
      - id: ZeroFramework.Extension.UniTaskExtension
        name: UniTaskExtension
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension
        name: Extension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension
        name: UniTaskExtension
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension
        name: Extension
      - name: .
      - id: ZeroFramework.Extension.UniTaskExtension
        name: UniTaskExtension
    isDefinition: true
    commentId: T:ZeroFramework.Extension.UniTaskExtension
  ZeroFramework.Extension:
    name:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension
        name: Extension
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension
        name: Extension
    nameWithType:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension
        name: Extension
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension
        name: Extension
    qualifiedName:
      CSharp:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension
        name: Extension
      VB:
      - id: ZeroFramework
        name: ZeroFramework
      - name: .
      - id: ZeroFramework.Extension
        name: Extension
    isDefinition: true
    commentId: N:ZeroFramework.Extension
